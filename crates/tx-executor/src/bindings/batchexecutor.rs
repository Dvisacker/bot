/**

Generated by the following Solidity interface...
```solidity
interface BatchExecutor {
    struct DynamicCall {
        address to;
        bytes data;
        uint64 offset;
        uint64 length;
        uint64 resOffset;
    }

    constructor(address _owner);

    fallback() external payable;

    receive() external payable;

    function OWNER() external view returns (address);
    function batchCall(bytes[] memory data) external payable;
    function requireProfitable(address token, uint256 amount) external view;
    function singlecall(address target, uint256 value, bytes32 context, bytes memory callData, DynamicCall[] memory dynamicCalls) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "fallback",
    "stateMutability": "payable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "batchCall",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "requireProfitable",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "singlecall",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "context",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callData",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "dynamicCalls",
        "type": "tuple[]",
        "internalType": "struct BatchExecutor.DynamicCall[]",
        "components": [
          {
            "name": "to",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "offset",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "length",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "resOffset",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod BatchExecutor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523461003f57610019610014610104565b610125565b610021610044565b610e3161012b823960805181818161030f01526109e00152610e3190f35b61004a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100769061004e565b810190811060018060401b0382111761008e57604052565b610058565b906100a661009f610044565b928361006c565b565b5f80fd5b60018060a01b031690565b6100c0906100ac565b90565b6100cc816100b7565b036100d357565b5f80fd5b905051906100e4826100c3565b565b906020828203126100ff576100fc915f016100d7565b90565b6100a8565b610122610f5c8038038061011781610093565b9283398101906100e6565b90565b60805256fe60806040526004361015610028575b36156100265761001e365f610c5f565b602081519101f35b005b6100325f35610071565b8063011e445b1461006c578063117803e314610067578063665e7b6414610062576368be3cf20361000e576104ce565b6103b5565b610353565b6102ca565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61009990610085565b90565b6100a581610090565b036100ac57565b5f80fd5b905035906100bd8261009c565b565b90565b6100cb816100bf565b036100d257565b5f80fd5b905035906100e3826100c2565b565b90565b6100f1816100e5565b036100f857565b5f80fd5b90503590610109826100e8565b565b5f80fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061013b90610113565b810190811067ffffffffffffffff82111761015557604052565b61011d565b9061016d610166610077565b9283610131565b565b67ffffffffffffffff811161018d57610189602091610113565b0190565b61011d565b90825f939282370152565b909291926101b26101ad8261016f565b61015a565b938185526020850190828401116101ce576101cc92610192565b565b61010f565b9080601f830112156101f1578160206101ee9335910161019d565b90565b61010b565b5f80fd5b5f80fd5b909182601f830112156102385781359167ffffffffffffffff831161023357602001926020830284011161022e57565b6101fa565b6101f6565b61010b565b91909160a0818403126102c057610256835f83016100b0565b9261026481602084016100d6565b9261027282604085016100fc565b92606081013567ffffffffffffffff81116102bb57836102939183016101d3565b92608082013567ffffffffffffffff81116102b6576102b292016101fe565b9091565b610081565b610081565b61007d565b5f0190565b6102e46102d836600461023d565b949390939291926106d0565b6102ec610077565b806102f6816102c5565b0390f35b5f80fd5b5f91031261030857565b61007d565b7f000000000000000000000000000000000000000000000000000000000000000090565b61033a90610090565b9052565b9190610351905f60208501940190610331565b565b34610383576103633660046102fe565b61037f61036e61030d565b610376610077565b9182918261033e565b0390f35b6102fa565b91906040838203126103b057806103a46103ad925f86016100b0565b936020016100d6565b90565b61007d565b346103e4576103ce6103c8366004610388565b90610918565b6103d6610077565b806103e0816102c5565b0390f35b6102fa565b67ffffffffffffffff81116104015760208091020190565b61011d565b92919061041a610415826103e9565b61015a565b93818552602080860192028101918383116104715781905b838210610440575050505050565b813567ffffffffffffffff811161046c5760209161046187849387016101d3565b815201910190610432565b61010b565b6101fa565b9080601f830112156104945781602061049193359101610406565b90565b61010b565b906020828203126104c9575f82013567ffffffffffffffff81116104c4576104c19201610476565b90565b610081565b61007d565b6104e16104dc366004610499565b6109d0565b6104e9610077565b806104f3816102c5565b0390f35b90565b61050e61050961051392610085565b6104f7565b610085565b90565b61051f906104fa565b90565b61052b90610516565b90565b1561053557565b5f80fd5b5f90565b600161054991016100bf565b90565b5090565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160a00381360303821215610587570190565b610564565b908210156105a65760206105a39202810190610570565b90565b610550565b356105b58161009c565b90565b9035906001602003813603038212156105fa570180359067ffffffffffffffff82116105f5576020019160018202360383136105f057565b61056c565b610568565b610564565b905090565b9091826106148161061b936105ff565b8093610192565b0190565b909161062a92610604565b90565b9061063f61063a8361016f565b61015a565b918252565b606090565b3d5f14610664576106593d61062d565b903d5f602084013e5b565b61066c610644565b90610662565b151590565b67ffffffffffffffff1690565b61068d81610677565b0361069457565b5f80fd5b356106a281610684565b90565b90565b6106bc6106b76106c1926106a5565b6104f7565b6100bf565b90565b6106cd5f6106a8565b90565b9493929591906106fa336106f46106ee6106e930610522565b610090565b91610090565b1461052e565b610702610539565b5b8061072061071a610715888a9061054c565b6100bf565b916100bf565b10156107c1576107328587839161058c565b5f8061073f8184016105ab565b61074d8460208101906105b8565b90610762610759610077565b9283928361061f565b03915afa610778610771610649565b9115610672565b6107bc57906107b7929161078e60408301610698565b906107a760806107a060608601610698565b9401610698565b60200101906020018b015e61053d565b610703565b610d1f565b50919590945f94508493506107ed6107df6107da6106c4565b610d4e565b966107e86106c4565b610d5b565b91602082019151925af1610809610802610649565b9115610672565b610821575061081f9061081a6106c4565b610d5b565b565b610d1f565b61082f906104fa565b90565b61083b90610826565b90565b61084790610516565b90565b60e01b90565b9050519061085d826100c2565b565b9060208282031261087857610875915f01610850565b90565b61007d565b610885610077565b3d5f823e3d90fd5b60209181520190565b5f7f4e6f742070726f66697461626c65000000000000000000000000000000000000910152565b6108ca600e60209261088d565b6108d381610896565b0190565b6108ec9060208101905f8183039101526108bd565b90565b156108f657565b6108fe610077565b62461bcd60e51b815280610914600482016108d7565b0390fd5b90602061092f61092a61096194610832565b61083e565b6370a082319061095661094130610522565b9261094a610077565b9687948593849361084a565b83526004830161033e565b03915afa9081156109cb57610991925f92610993575b5061098461098a916100bf565b916100bf565b10156108ef565b565b61098a9192506109bc6109849160203d81116109c4575b6109b48183610131565b81019061085f565b929150610977565b503d6109aa565b61087d565b610a1590610a1033610a0a610a047f0000000000000000000000000000000000000000000000000000000000000000610090565b91610090565b1461052e565b610d82565b565b5f1c90565b610a30610a2b610a35926100bf565b6104f7565b6100bf565b90565b610a44610a4991610a17565b610a1c565b90565b610a60610a5b610a65926100bf565b6104f7565b610085565b90565b90565b60ff1690565b610a85610a80610a8a92610a68565b6104f7565b610a6b565b90565b1c90565b610ab090610aaa610aa4610ab594610a6b565b916100e5565b90610a8d565b6100e5565b90565b5f80fd5b5f80fd5b90825f9392825e0152565b90929192610ae0610adb8261016f565b61015a565b93818552602085019082840111610afc57610afa92610ac0565b565b61010f565b9080601f83011215610b1f57816020610b1c93519101610acb565b90565b61010b565b929190610b38610b33826103e9565b61015a565b9381855260208086019202810191838311610b8f5781905b838210610b5e575050505050565b815167ffffffffffffffff8111610b8a57602091610b7f8784938701610b01565b815201910190610b50565b61010b565b6101fa565b9080601f83011215610bb257816020610baf93519101610b24565b90565b61010b565b919091604081840312610c2157610bce604061015a565b925f82015167ffffffffffffffff8111610c1c5781610bee918401610b94565b5f850152602082015167ffffffffffffffff8111610c1757610c109201610b01565b6020830152565b610abc565b610abc565b610ab8565b90602082820312610c56575f82015167ffffffffffffffff8111610c5157610c4e9201610bb7565b90565b610081565b61007d565b5190565b5050610c69610644565b50610d0a610ccc610cc7610c83610c7e6106c4565b610d4e565b610cb733610cb1610cab610ca6610ca1610c9c87610a38565b610a4c565b610516565b610090565b91610090565b1461052e565b610cc160a0610a71565b90610a91565b610a38565b610cd4610644565b50602002600401356004018035604051918160200190833760200181016040526020610cff82610c5b565b818301019101610c26565b90610d1d60205f84015193015192610d82565b565b610d2881610c5b565b90610d4582610d3f610d395f6106a8565b916100bf565b1161052e565b602001fd5b5f90565b610d56610d4a565b505c90565b5d565b5190565b90610d6c82610d5e565b811015610d7d576020809102010190565b610550565b610d8a610539565b5b80610da6610da0610d9b85610d5e565b6100bf565b916100bf565b1015610df7575f80610db730610522565b610dc2858590610d62565b5182602082019151925af1610ddf610dd8610649565b9115610672565b610df25750610ded9061053d565b610d8b565b610d1f565b505056fea26469706673582212200c614a679ca1762e16e550ad94fa4e6ef209468085e4169c9951a578ec14f11a64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\0?Wa\0\x19a\0\x14a\x01\x04V[a\x01%V[a\0!a\0DV[a\x0E1a\x01+\x829`\x80Q\x81\x81\x81a\x03\x0F\x01Ra\t\xE0\x01Ra\x0E1\x90\xF3[a\0JV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0v\x90a\0NV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x8EW`@RV[a\0XV[\x90a\0\xA6a\0\x9Fa\0DV[\x92\x83a\0lV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xC0\x90a\0\xACV[\x90V[a\0\xCC\x81a\0\xB7V[\x03a\0\xD3WV[_\x80\xFD[\x90PQ\x90a\0\xE4\x82a\0\xC3V[V[\x90` \x82\x82\x03\x12a\0\xFFWa\0\xFC\x91_\x01a\0\xD7V[\x90V[a\0\xA8V[a\x01\"a\x0F\\\x808\x03\x80a\x01\x17\x81a\0\x93V[\x92\x839\x81\x01\x90a\0\xE6V[\x90V[`\x80RV\xFE`\x80`@R`\x046\x10\x15a\0(W[6\x15a\0&Wa\0\x1E6_a\x0C_V[` \x81Q\x91\x01\xF3[\0[a\x002_5a\0qV[\x80c\x01\x1ED[\x14a\0lW\x80c\x11x\x03\xE3\x14a\0gW\x80cf^{d\x14a\0bWch\xBE<\xF2\x03a\0\x0EWa\x04\xCEV[a\x03\xB5V[a\x03SV[a\x02\xCAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x99\x90a\0\x85V[\x90V[a\0\xA5\x81a\0\x90V[\x03a\0\xACWV[_\x80\xFD[\x90P5\x90a\0\xBD\x82a\0\x9CV[V[\x90V[a\0\xCB\x81a\0\xBFV[\x03a\0\xD2WV[_\x80\xFD[\x90P5\x90a\0\xE3\x82a\0\xC2V[V[\x90V[a\0\xF1\x81a\0\xE5V[\x03a\0\xF8WV[_\x80\xFD[\x90P5\x90a\x01\t\x82a\0\xE8V[V[_\x80\xFD[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01;\x90a\x01\x13V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01UW`@RV[a\x01\x1DV[\x90a\x01ma\x01fa\0wV[\x92\x83a\x011V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x8DWa\x01\x89` \x91a\x01\x13V[\x01\x90V[a\x01\x1DV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x01\xB2a\x01\xAD\x82a\x01oV[a\x01ZV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x01\xCEWa\x01\xCC\x92a\x01\x92V[V[a\x01\x0FV[\x90\x80`\x1F\x83\x01\x12\x15a\x01\xF1W\x81` a\x01\xEE\x935\x91\x01a\x01\x9DV[\x90V[a\x01\x0BV[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x028W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x023W` \x01\x92` \x83\x02\x84\x01\x11a\x02.WV[a\x01\xFAV[a\x01\xF6V[a\x01\x0BV[\x91\x90\x91`\xA0\x81\x84\x03\x12a\x02\xC0Wa\x02V\x83_\x83\x01a\0\xB0V[\x92a\x02d\x81` \x84\x01a\0\xD6V[\x92a\x02r\x82`@\x85\x01a\0\xFCV[\x92``\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xBBW\x83a\x02\x93\x91\x83\x01a\x01\xD3V[\x92`\x80\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xB6Wa\x02\xB2\x92\x01a\x01\xFEV[\x90\x91V[a\0\x81V[a\0\x81V[a\0}V[_\x01\x90V[a\x02\xE4a\x02\xD86`\x04a\x02=V[\x94\x93\x90\x93\x92\x91\x92a\x06\xD0V[a\x02\xECa\0wV[\x80a\x02\xF6\x81a\x02\xC5V[\x03\x90\xF3[_\x80\xFD[_\x91\x03\x12a\x03\x08WV[a\0}V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x03:\x90a\0\x90V[\x90RV[\x91\x90a\x03Q\x90_` \x85\x01\x94\x01\x90a\x031V[V[4a\x03\x83Wa\x03c6`\x04a\x02\xFEV[a\x03\x7Fa\x03na\x03\rV[a\x03va\0wV[\x91\x82\x91\x82a\x03>V[\x03\x90\xF3[a\x02\xFAV[\x91\x90`@\x83\x82\x03\x12a\x03\xB0W\x80a\x03\xA4a\x03\xAD\x92_\x86\x01a\0\xB0V[\x93` \x01a\0\xD6V[\x90V[a\0}V[4a\x03\xE4Wa\x03\xCEa\x03\xC86`\x04a\x03\x88V[\x90a\t\x18V[a\x03\xD6a\0wV[\x80a\x03\xE0\x81a\x02\xC5V[\x03\x90\xF3[a\x02\xFAV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x01W` \x80\x91\x02\x01\x90V[a\x01\x1DV[\x92\x91\x90a\x04\x1Aa\x04\x15\x82a\x03\xE9V[a\x01ZV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\x04qW\x81\x90[\x83\x82\x10a\x04@WPPPPPV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04lW` \x91a\x04a\x87\x84\x93\x87\x01a\x01\xD3V[\x81R\x01\x91\x01\x90a\x042V[a\x01\x0BV[a\x01\xFAV[\x90\x80`\x1F\x83\x01\x12\x15a\x04\x94W\x81` a\x04\x91\x935\x91\x01a\x04\x06V[\x90V[a\x01\x0BV[\x90` \x82\x82\x03\x12a\x04\xC9W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xC4Wa\x04\xC1\x92\x01a\x04vV[\x90V[a\0\x81V[a\0}V[a\x04\xE1a\x04\xDC6`\x04a\x04\x99V[a\t\xD0V[a\x04\xE9a\0wV[\x80a\x04\xF3\x81a\x02\xC5V[\x03\x90\xF3[\x90V[a\x05\x0Ea\x05\ta\x05\x13\x92a\0\x85V[a\x04\xF7V[a\0\x85V[\x90V[a\x05\x1F\x90a\x04\xFAV[\x90V[a\x05+\x90a\x05\x16V[\x90V[\x15a\x055WV[_\x80\xFD[_\x90V[`\x01a\x05I\x91\x01a\0\xBFV[\x90V[P\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01`\xA0\x03\x816\x03\x03\x82\x12\x15a\x05\x87W\x01\x90V[a\x05dV[\x90\x82\x10\x15a\x05\xA6W` a\x05\xA3\x92\x02\x81\x01\x90a\x05pV[\x90V[a\x05PV[5a\x05\xB5\x81a\0\x9CV[\x90V[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x05\xFAW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x05\xF5W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x05\xF0WV[a\x05lV[a\x05hV[a\x05dV[\x90P\x90V[\x90\x91\x82a\x06\x14\x81a\x06\x1B\x93a\x05\xFFV[\x80\x93a\x01\x92V[\x01\x90V[\x90\x91a\x06*\x92a\x06\x04V[\x90V[\x90a\x06?a\x06:\x83a\x01oV[a\x01ZV[\x91\x82RV[``\x90V[=_\x14a\x06dWa\x06Y=a\x06-V[\x90=_` \x84\x01>[V[a\x06la\x06DV[\x90a\x06bV[\x15\x15\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x06\x8D\x81a\x06wV[\x03a\x06\x94WV[_\x80\xFD[5a\x06\xA2\x81a\x06\x84V[\x90V[\x90V[a\x06\xBCa\x06\xB7a\x06\xC1\x92a\x06\xA5V[a\x04\xF7V[a\0\xBFV[\x90V[a\x06\xCD_a\x06\xA8V[\x90V[\x94\x93\x92\x95\x91\x90a\x06\xFA3a\x06\xF4a\x06\xEEa\x06\xE90a\x05\"V[a\0\x90V[\x91a\0\x90V[\x14a\x05.V[a\x07\x02a\x059V[[\x80a\x07 a\x07\x1Aa\x07\x15\x88\x8A\x90a\x05LV[a\0\xBFV[\x91a\0\xBFV[\x10\x15a\x07\xC1Wa\x072\x85\x87\x83\x91a\x05\x8CV[_\x80a\x07?\x81\x84\x01a\x05\xABV[a\x07M\x84` \x81\x01\x90a\x05\xB8V[\x90a\x07ba\x07Ya\0wV[\x92\x83\x92\x83a\x06\x1FV[\x03\x91Z\xFAa\x07xa\x07qa\x06IV[\x91\x15a\x06rV[a\x07\xBCW\x90a\x07\xB7\x92\x91a\x07\x8E`@\x83\x01a\x06\x98V[\x90a\x07\xA7`\x80a\x07\xA0``\x86\x01a\x06\x98V[\x94\x01a\x06\x98V[` \x01\x01\x90` \x01\x8B\x01^a\x05=V[a\x07\x03V[a\r\x1FV[P\x91\x95\x90\x94_\x94P\x84\x93Pa\x07\xEDa\x07\xDFa\x07\xDAa\x06\xC4V[a\rNV[\x96a\x07\xE8a\x06\xC4V[a\r[V[\x91` \x82\x01\x91Q\x92Z\xF1a\x08\ta\x08\x02a\x06IV[\x91\x15a\x06rV[a\x08!WPa\x08\x1F\x90a\x08\x1Aa\x06\xC4V[a\r[V[V[a\r\x1FV[a\x08/\x90a\x04\xFAV[\x90V[a\x08;\x90a\x08&V[\x90V[a\x08G\x90a\x05\x16V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\x08]\x82a\0\xC2V[V[\x90` \x82\x82\x03\x12a\x08xWa\x08u\x91_\x01a\x08PV[\x90V[a\0}V[a\x08\x85a\0wV[=_\x82>=\x90\xFD[` \x91\x81R\x01\x90V[_\x7FNot profitable\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\xCA`\x0E` \x92a\x08\x8DV[a\x08\xD3\x81a\x08\x96V[\x01\x90V[a\x08\xEC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\xBDV[\x90V[\x15a\x08\xF6WV[a\x08\xFEa\0wV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\x14`\x04\x82\x01a\x08\xD7V[\x03\x90\xFD[\x90` a\t/a\t*a\ta\x94a\x082V[a\x08>V[cp\xA0\x821\x90a\tVa\tA0a\x05\"V[\x92a\tJa\0wV[\x96\x87\x94\x85\x93\x84\x93a\x08JV[\x83R`\x04\x83\x01a\x03>V[\x03\x91Z\xFA\x90\x81\x15a\t\xCBWa\t\x91\x92_\x92a\t\x93W[Pa\t\x84a\t\x8A\x91a\0\xBFV[\x91a\0\xBFV[\x10\x15a\x08\xEFV[V[a\t\x8A\x91\x92Pa\t\xBCa\t\x84\x91` =\x81\x11a\t\xC4W[a\t\xB4\x81\x83a\x011V[\x81\x01\x90a\x08_V[\x92\x91Pa\twV[P=a\t\xAAV[a\x08}V[a\n\x15\x90a\n\x103a\n\na\n\x04\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\x90V[\x91a\0\x90V[\x14a\x05.V[a\r\x82V[V[_\x1C\x90V[a\n0a\n+a\n5\x92a\0\xBFV[a\x04\xF7V[a\0\xBFV[\x90V[a\nDa\nI\x91a\n\x17V[a\n\x1CV[\x90V[a\n`a\n[a\ne\x92a\0\xBFV[a\x04\xF7V[a\0\x85V[\x90V[\x90V[`\xFF\x16\x90V[a\n\x85a\n\x80a\n\x8A\x92a\nhV[a\x04\xF7V[a\nkV[\x90V[\x1C\x90V[a\n\xB0\x90a\n\xAAa\n\xA4a\n\xB5\x94a\nkV[\x91a\0\xE5V[\x90a\n\x8DV[a\0\xE5V[\x90V[_\x80\xFD[_\x80\xFD[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\n\xE0a\n\xDB\x82a\x01oV[a\x01ZV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\n\xFCWa\n\xFA\x92a\n\xC0V[V[a\x01\x0FV[\x90\x80`\x1F\x83\x01\x12\x15a\x0B\x1FW\x81` a\x0B\x1C\x93Q\x91\x01a\n\xCBV[\x90V[a\x01\x0BV[\x92\x91\x90a\x0B8a\x0B3\x82a\x03\xE9V[a\x01ZV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\x0B\x8FW\x81\x90[\x83\x82\x10a\x0B^WPPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x8AW` \x91a\x0B\x7F\x87\x84\x93\x87\x01a\x0B\x01V[\x81R\x01\x91\x01\x90a\x0BPV[a\x01\x0BV[a\x01\xFAV[\x90\x80`\x1F\x83\x01\x12\x15a\x0B\xB2W\x81` a\x0B\xAF\x93Q\x91\x01a\x0B$V[\x90V[a\x01\x0BV[\x91\x90\x91`@\x81\x84\x03\x12a\x0C!Wa\x0B\xCE`@a\x01ZV[\x92_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0C\x1CW\x81a\x0B\xEE\x91\x84\x01a\x0B\x94V[_\x85\x01R` \x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0C\x17Wa\x0C\x10\x92\x01a\x0B\x01V[` \x83\x01RV[a\n\xBCV[a\n\xBCV[a\n\xB8V[\x90` \x82\x82\x03\x12a\x0CVW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0CQWa\x0CN\x92\x01a\x0B\xB7V[\x90V[a\0\x81V[a\0}V[Q\x90V[PPa\x0Cia\x06DV[Pa\r\na\x0C\xCCa\x0C\xC7a\x0C\x83a\x0C~a\x06\xC4V[a\rNV[a\x0C\xB73a\x0C\xB1a\x0C\xABa\x0C\xA6a\x0C\xA1a\x0C\x9C\x87a\n8V[a\nLV[a\x05\x16V[a\0\x90V[\x91a\0\x90V[\x14a\x05.V[a\x0C\xC1`\xA0a\nqV[\x90a\n\x91V[a\n8V[a\x0C\xD4a\x06DV[P` \x02`\x04\x015`\x04\x01\x805`@Q\x91\x81` \x01\x90\x837` \x01\x81\x01`@R` a\x0C\xFF\x82a\x0C[V[\x81\x83\x01\x01\x91\x01a\x0C&V[\x90a\r\x1D` _\x84\x01Q\x93\x01Q\x92a\r\x82V[V[a\r(\x81a\x0C[V[\x90a\rE\x82a\r?a\r9_a\x06\xA8V[\x91a\0\xBFV[\x11a\x05.V[` \x01\xFD[_\x90V[a\rVa\rJV[P\\\x90V[]V[Q\x90V[\x90a\rl\x82a\r^V[\x81\x10\x15a\r}W` \x80\x91\x02\x01\x01\x90V[a\x05PV[a\r\x8Aa\x059V[[\x80a\r\xA6a\r\xA0a\r\x9B\x85a\r^V[a\0\xBFV[\x91a\0\xBFV[\x10\x15a\r\xF7W_\x80a\r\xB70a\x05\"V[a\r\xC2\x85\x85\x90a\rbV[Q\x82` \x82\x01\x91Q\x92Z\xF1a\r\xDFa\r\xD8a\x06IV[\x91\x15a\x06rV[a\r\xF2WPa\r\xED\x90a\x05=V[a\r\x8BV[a\r\x1FV[PPV\xFE\xA2dipfsX\"\x12 \x0CaJg\x9C\xA1v.\x16\xE5P\xAD\x94\xFANn\xF2\tF\x80\x85\xE4\x16\x9C\x99Q\xA5x\xEC\x14\xF1\x1AdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610028575b36156100265761001e365f610c5f565b602081519101f35b005b6100325f35610071565b8063011e445b1461006c578063117803e314610067578063665e7b6414610062576368be3cf20361000e576104ce565b6103b5565b610353565b6102ca565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61009990610085565b90565b6100a581610090565b036100ac57565b5f80fd5b905035906100bd8261009c565b565b90565b6100cb816100bf565b036100d257565b5f80fd5b905035906100e3826100c2565b565b90565b6100f1816100e5565b036100f857565b5f80fd5b90503590610109826100e8565b565b5f80fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061013b90610113565b810190811067ffffffffffffffff82111761015557604052565b61011d565b9061016d610166610077565b9283610131565b565b67ffffffffffffffff811161018d57610189602091610113565b0190565b61011d565b90825f939282370152565b909291926101b26101ad8261016f565b61015a565b938185526020850190828401116101ce576101cc92610192565b565b61010f565b9080601f830112156101f1578160206101ee9335910161019d565b90565b61010b565b5f80fd5b5f80fd5b909182601f830112156102385781359167ffffffffffffffff831161023357602001926020830284011161022e57565b6101fa565b6101f6565b61010b565b91909160a0818403126102c057610256835f83016100b0565b9261026481602084016100d6565b9261027282604085016100fc565b92606081013567ffffffffffffffff81116102bb57836102939183016101d3565b92608082013567ffffffffffffffff81116102b6576102b292016101fe565b9091565b610081565b610081565b61007d565b5f0190565b6102e46102d836600461023d565b949390939291926106d0565b6102ec610077565b806102f6816102c5565b0390f35b5f80fd5b5f91031261030857565b61007d565b7f000000000000000000000000000000000000000000000000000000000000000090565b61033a90610090565b9052565b9190610351905f60208501940190610331565b565b34610383576103633660046102fe565b61037f61036e61030d565b610376610077565b9182918261033e565b0390f35b6102fa565b91906040838203126103b057806103a46103ad925f86016100b0565b936020016100d6565b90565b61007d565b346103e4576103ce6103c8366004610388565b90610918565b6103d6610077565b806103e0816102c5565b0390f35b6102fa565b67ffffffffffffffff81116104015760208091020190565b61011d565b92919061041a610415826103e9565b61015a565b93818552602080860192028101918383116104715781905b838210610440575050505050565b813567ffffffffffffffff811161046c5760209161046187849387016101d3565b815201910190610432565b61010b565b6101fa565b9080601f830112156104945781602061049193359101610406565b90565b61010b565b906020828203126104c9575f82013567ffffffffffffffff81116104c4576104c19201610476565b90565b610081565b61007d565b6104e16104dc366004610499565b6109d0565b6104e9610077565b806104f3816102c5565b0390f35b90565b61050e61050961051392610085565b6104f7565b610085565b90565b61051f906104fa565b90565b61052b90610516565b90565b1561053557565b5f80fd5b5f90565b600161054991016100bf565b90565b5090565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160a00381360303821215610587570190565b610564565b908210156105a65760206105a39202810190610570565b90565b610550565b356105b58161009c565b90565b9035906001602003813603038212156105fa570180359067ffffffffffffffff82116105f5576020019160018202360383136105f057565b61056c565b610568565b610564565b905090565b9091826106148161061b936105ff565b8093610192565b0190565b909161062a92610604565b90565b9061063f61063a8361016f565b61015a565b918252565b606090565b3d5f14610664576106593d61062d565b903d5f602084013e5b565b61066c610644565b90610662565b151590565b67ffffffffffffffff1690565b61068d81610677565b0361069457565b5f80fd5b356106a281610684565b90565b90565b6106bc6106b76106c1926106a5565b6104f7565b6100bf565b90565b6106cd5f6106a8565b90565b9493929591906106fa336106f46106ee6106e930610522565b610090565b91610090565b1461052e565b610702610539565b5b8061072061071a610715888a9061054c565b6100bf565b916100bf565b10156107c1576107328587839161058c565b5f8061073f8184016105ab565b61074d8460208101906105b8565b90610762610759610077565b9283928361061f565b03915afa610778610771610649565b9115610672565b6107bc57906107b7929161078e60408301610698565b906107a760806107a060608601610698565b9401610698565b60200101906020018b015e61053d565b610703565b610d1f565b50919590945f94508493506107ed6107df6107da6106c4565b610d4e565b966107e86106c4565b610d5b565b91602082019151925af1610809610802610649565b9115610672565b610821575061081f9061081a6106c4565b610d5b565b565b610d1f565b61082f906104fa565b90565b61083b90610826565b90565b61084790610516565b90565b60e01b90565b9050519061085d826100c2565b565b9060208282031261087857610875915f01610850565b90565b61007d565b610885610077565b3d5f823e3d90fd5b60209181520190565b5f7f4e6f742070726f66697461626c65000000000000000000000000000000000000910152565b6108ca600e60209261088d565b6108d381610896565b0190565b6108ec9060208101905f8183039101526108bd565b90565b156108f657565b6108fe610077565b62461bcd60e51b815280610914600482016108d7565b0390fd5b90602061092f61092a61096194610832565b61083e565b6370a082319061095661094130610522565b9261094a610077565b9687948593849361084a565b83526004830161033e565b03915afa9081156109cb57610991925f92610993575b5061098461098a916100bf565b916100bf565b10156108ef565b565b61098a9192506109bc6109849160203d81116109c4575b6109b48183610131565b81019061085f565b929150610977565b503d6109aa565b61087d565b610a1590610a1033610a0a610a047f0000000000000000000000000000000000000000000000000000000000000000610090565b91610090565b1461052e565b610d82565b565b5f1c90565b610a30610a2b610a35926100bf565b6104f7565b6100bf565b90565b610a44610a4991610a17565b610a1c565b90565b610a60610a5b610a65926100bf565b6104f7565b610085565b90565b90565b60ff1690565b610a85610a80610a8a92610a68565b6104f7565b610a6b565b90565b1c90565b610ab090610aaa610aa4610ab594610a6b565b916100e5565b90610a8d565b6100e5565b90565b5f80fd5b5f80fd5b90825f9392825e0152565b90929192610ae0610adb8261016f565b61015a565b93818552602085019082840111610afc57610afa92610ac0565b565b61010f565b9080601f83011215610b1f57816020610b1c93519101610acb565b90565b61010b565b929190610b38610b33826103e9565b61015a565b9381855260208086019202810191838311610b8f5781905b838210610b5e575050505050565b815167ffffffffffffffff8111610b8a57602091610b7f8784938701610b01565b815201910190610b50565b61010b565b6101fa565b9080601f83011215610bb257816020610baf93519101610b24565b90565b61010b565b919091604081840312610c2157610bce604061015a565b925f82015167ffffffffffffffff8111610c1c5781610bee918401610b94565b5f850152602082015167ffffffffffffffff8111610c1757610c109201610b01565b6020830152565b610abc565b610abc565b610ab8565b90602082820312610c56575f82015167ffffffffffffffff8111610c5157610c4e9201610bb7565b90565b610081565b61007d565b5190565b5050610c69610644565b50610d0a610ccc610cc7610c83610c7e6106c4565b610d4e565b610cb733610cb1610cab610ca6610ca1610c9c87610a38565b610a4c565b610516565b610090565b91610090565b1461052e565b610cc160a0610a71565b90610a91565b610a38565b610cd4610644565b50602002600401356004018035604051918160200190833760200181016040526020610cff82610c5b565b818301019101610c26565b90610d1d60205f84015193015192610d82565b565b610d2881610c5b565b90610d4582610d3f610d395f6106a8565b916100bf565b1161052e565b602001fd5b5f90565b610d56610d4a565b505c90565b5d565b5190565b90610d6c82610d5e565b811015610d7d576020809102010190565b610550565b610d8a610539565b5b80610da6610da0610d9b85610d5e565b6100bf565b916100bf565b1015610df7575f80610db730610522565b610dc2858590610d62565b5182602082019151925af1610ddf610dd8610649565b9115610672565b610df25750610ded9061053d565b610d8b565b610d1f565b505056fea26469706673582212200c614a679ca1762e16e550ad94fa4e6ef209468085e4169c9951a578ec14f11a64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0(W[6\x15a\0&Wa\0\x1E6_a\x0C_V[` \x81Q\x91\x01\xF3[\0[a\x002_5a\0qV[\x80c\x01\x1ED[\x14a\0lW\x80c\x11x\x03\xE3\x14a\0gW\x80cf^{d\x14a\0bWch\xBE<\xF2\x03a\0\x0EWa\x04\xCEV[a\x03\xB5V[a\x03SV[a\x02\xCAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x99\x90a\0\x85V[\x90V[a\0\xA5\x81a\0\x90V[\x03a\0\xACWV[_\x80\xFD[\x90P5\x90a\0\xBD\x82a\0\x9CV[V[\x90V[a\0\xCB\x81a\0\xBFV[\x03a\0\xD2WV[_\x80\xFD[\x90P5\x90a\0\xE3\x82a\0\xC2V[V[\x90V[a\0\xF1\x81a\0\xE5V[\x03a\0\xF8WV[_\x80\xFD[\x90P5\x90a\x01\t\x82a\0\xE8V[V[_\x80\xFD[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01;\x90a\x01\x13V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01UW`@RV[a\x01\x1DV[\x90a\x01ma\x01fa\0wV[\x92\x83a\x011V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x8DWa\x01\x89` \x91a\x01\x13V[\x01\x90V[a\x01\x1DV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x01\xB2a\x01\xAD\x82a\x01oV[a\x01ZV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x01\xCEWa\x01\xCC\x92a\x01\x92V[V[a\x01\x0FV[\x90\x80`\x1F\x83\x01\x12\x15a\x01\xF1W\x81` a\x01\xEE\x935\x91\x01a\x01\x9DV[\x90V[a\x01\x0BV[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x028W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x023W` \x01\x92` \x83\x02\x84\x01\x11a\x02.WV[a\x01\xFAV[a\x01\xF6V[a\x01\x0BV[\x91\x90\x91`\xA0\x81\x84\x03\x12a\x02\xC0Wa\x02V\x83_\x83\x01a\0\xB0V[\x92a\x02d\x81` \x84\x01a\0\xD6V[\x92a\x02r\x82`@\x85\x01a\0\xFCV[\x92``\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xBBW\x83a\x02\x93\x91\x83\x01a\x01\xD3V[\x92`\x80\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xB6Wa\x02\xB2\x92\x01a\x01\xFEV[\x90\x91V[a\0\x81V[a\0\x81V[a\0}V[_\x01\x90V[a\x02\xE4a\x02\xD86`\x04a\x02=V[\x94\x93\x90\x93\x92\x91\x92a\x06\xD0V[a\x02\xECa\0wV[\x80a\x02\xF6\x81a\x02\xC5V[\x03\x90\xF3[_\x80\xFD[_\x91\x03\x12a\x03\x08WV[a\0}V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x03:\x90a\0\x90V[\x90RV[\x91\x90a\x03Q\x90_` \x85\x01\x94\x01\x90a\x031V[V[4a\x03\x83Wa\x03c6`\x04a\x02\xFEV[a\x03\x7Fa\x03na\x03\rV[a\x03va\0wV[\x91\x82\x91\x82a\x03>V[\x03\x90\xF3[a\x02\xFAV[\x91\x90`@\x83\x82\x03\x12a\x03\xB0W\x80a\x03\xA4a\x03\xAD\x92_\x86\x01a\0\xB0V[\x93` \x01a\0\xD6V[\x90V[a\0}V[4a\x03\xE4Wa\x03\xCEa\x03\xC86`\x04a\x03\x88V[\x90a\t\x18V[a\x03\xD6a\0wV[\x80a\x03\xE0\x81a\x02\xC5V[\x03\x90\xF3[a\x02\xFAV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x01W` \x80\x91\x02\x01\x90V[a\x01\x1DV[\x92\x91\x90a\x04\x1Aa\x04\x15\x82a\x03\xE9V[a\x01ZV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\x04qW\x81\x90[\x83\x82\x10a\x04@WPPPPPV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04lW` \x91a\x04a\x87\x84\x93\x87\x01a\x01\xD3V[\x81R\x01\x91\x01\x90a\x042V[a\x01\x0BV[a\x01\xFAV[\x90\x80`\x1F\x83\x01\x12\x15a\x04\x94W\x81` a\x04\x91\x935\x91\x01a\x04\x06V[\x90V[a\x01\x0BV[\x90` \x82\x82\x03\x12a\x04\xC9W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xC4Wa\x04\xC1\x92\x01a\x04vV[\x90V[a\0\x81V[a\0}V[a\x04\xE1a\x04\xDC6`\x04a\x04\x99V[a\t\xD0V[a\x04\xE9a\0wV[\x80a\x04\xF3\x81a\x02\xC5V[\x03\x90\xF3[\x90V[a\x05\x0Ea\x05\ta\x05\x13\x92a\0\x85V[a\x04\xF7V[a\0\x85V[\x90V[a\x05\x1F\x90a\x04\xFAV[\x90V[a\x05+\x90a\x05\x16V[\x90V[\x15a\x055WV[_\x80\xFD[_\x90V[`\x01a\x05I\x91\x01a\0\xBFV[\x90V[P\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01`\xA0\x03\x816\x03\x03\x82\x12\x15a\x05\x87W\x01\x90V[a\x05dV[\x90\x82\x10\x15a\x05\xA6W` a\x05\xA3\x92\x02\x81\x01\x90a\x05pV[\x90V[a\x05PV[5a\x05\xB5\x81a\0\x9CV[\x90V[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x05\xFAW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x05\xF5W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x05\xF0WV[a\x05lV[a\x05hV[a\x05dV[\x90P\x90V[\x90\x91\x82a\x06\x14\x81a\x06\x1B\x93a\x05\xFFV[\x80\x93a\x01\x92V[\x01\x90V[\x90\x91a\x06*\x92a\x06\x04V[\x90V[\x90a\x06?a\x06:\x83a\x01oV[a\x01ZV[\x91\x82RV[``\x90V[=_\x14a\x06dWa\x06Y=a\x06-V[\x90=_` \x84\x01>[V[a\x06la\x06DV[\x90a\x06bV[\x15\x15\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x06\x8D\x81a\x06wV[\x03a\x06\x94WV[_\x80\xFD[5a\x06\xA2\x81a\x06\x84V[\x90V[\x90V[a\x06\xBCa\x06\xB7a\x06\xC1\x92a\x06\xA5V[a\x04\xF7V[a\0\xBFV[\x90V[a\x06\xCD_a\x06\xA8V[\x90V[\x94\x93\x92\x95\x91\x90a\x06\xFA3a\x06\xF4a\x06\xEEa\x06\xE90a\x05\"V[a\0\x90V[\x91a\0\x90V[\x14a\x05.V[a\x07\x02a\x059V[[\x80a\x07 a\x07\x1Aa\x07\x15\x88\x8A\x90a\x05LV[a\0\xBFV[\x91a\0\xBFV[\x10\x15a\x07\xC1Wa\x072\x85\x87\x83\x91a\x05\x8CV[_\x80a\x07?\x81\x84\x01a\x05\xABV[a\x07M\x84` \x81\x01\x90a\x05\xB8V[\x90a\x07ba\x07Ya\0wV[\x92\x83\x92\x83a\x06\x1FV[\x03\x91Z\xFAa\x07xa\x07qa\x06IV[\x91\x15a\x06rV[a\x07\xBCW\x90a\x07\xB7\x92\x91a\x07\x8E`@\x83\x01a\x06\x98V[\x90a\x07\xA7`\x80a\x07\xA0``\x86\x01a\x06\x98V[\x94\x01a\x06\x98V[` \x01\x01\x90` \x01\x8B\x01^a\x05=V[a\x07\x03V[a\r\x1FV[P\x91\x95\x90\x94_\x94P\x84\x93Pa\x07\xEDa\x07\xDFa\x07\xDAa\x06\xC4V[a\rNV[\x96a\x07\xE8a\x06\xC4V[a\r[V[\x91` \x82\x01\x91Q\x92Z\xF1a\x08\ta\x08\x02a\x06IV[\x91\x15a\x06rV[a\x08!WPa\x08\x1F\x90a\x08\x1Aa\x06\xC4V[a\r[V[V[a\r\x1FV[a\x08/\x90a\x04\xFAV[\x90V[a\x08;\x90a\x08&V[\x90V[a\x08G\x90a\x05\x16V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\x08]\x82a\0\xC2V[V[\x90` \x82\x82\x03\x12a\x08xWa\x08u\x91_\x01a\x08PV[\x90V[a\0}V[a\x08\x85a\0wV[=_\x82>=\x90\xFD[` \x91\x81R\x01\x90V[_\x7FNot profitable\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\xCA`\x0E` \x92a\x08\x8DV[a\x08\xD3\x81a\x08\x96V[\x01\x90V[a\x08\xEC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\xBDV[\x90V[\x15a\x08\xF6WV[a\x08\xFEa\0wV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\x14`\x04\x82\x01a\x08\xD7V[\x03\x90\xFD[\x90` a\t/a\t*a\ta\x94a\x082V[a\x08>V[cp\xA0\x821\x90a\tVa\tA0a\x05\"V[\x92a\tJa\0wV[\x96\x87\x94\x85\x93\x84\x93a\x08JV[\x83R`\x04\x83\x01a\x03>V[\x03\x91Z\xFA\x90\x81\x15a\t\xCBWa\t\x91\x92_\x92a\t\x93W[Pa\t\x84a\t\x8A\x91a\0\xBFV[\x91a\0\xBFV[\x10\x15a\x08\xEFV[V[a\t\x8A\x91\x92Pa\t\xBCa\t\x84\x91` =\x81\x11a\t\xC4W[a\t\xB4\x81\x83a\x011V[\x81\x01\x90a\x08_V[\x92\x91Pa\twV[P=a\t\xAAV[a\x08}V[a\n\x15\x90a\n\x103a\n\na\n\x04\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\x90V[\x91a\0\x90V[\x14a\x05.V[a\r\x82V[V[_\x1C\x90V[a\n0a\n+a\n5\x92a\0\xBFV[a\x04\xF7V[a\0\xBFV[\x90V[a\nDa\nI\x91a\n\x17V[a\n\x1CV[\x90V[a\n`a\n[a\ne\x92a\0\xBFV[a\x04\xF7V[a\0\x85V[\x90V[\x90V[`\xFF\x16\x90V[a\n\x85a\n\x80a\n\x8A\x92a\nhV[a\x04\xF7V[a\nkV[\x90V[\x1C\x90V[a\n\xB0\x90a\n\xAAa\n\xA4a\n\xB5\x94a\nkV[\x91a\0\xE5V[\x90a\n\x8DV[a\0\xE5V[\x90V[_\x80\xFD[_\x80\xFD[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\n\xE0a\n\xDB\x82a\x01oV[a\x01ZV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\n\xFCWa\n\xFA\x92a\n\xC0V[V[a\x01\x0FV[\x90\x80`\x1F\x83\x01\x12\x15a\x0B\x1FW\x81` a\x0B\x1C\x93Q\x91\x01a\n\xCBV[\x90V[a\x01\x0BV[\x92\x91\x90a\x0B8a\x0B3\x82a\x03\xE9V[a\x01ZV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\x0B\x8FW\x81\x90[\x83\x82\x10a\x0B^WPPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x8AW` \x91a\x0B\x7F\x87\x84\x93\x87\x01a\x0B\x01V[\x81R\x01\x91\x01\x90a\x0BPV[a\x01\x0BV[a\x01\xFAV[\x90\x80`\x1F\x83\x01\x12\x15a\x0B\xB2W\x81` a\x0B\xAF\x93Q\x91\x01a\x0B$V[\x90V[a\x01\x0BV[\x91\x90\x91`@\x81\x84\x03\x12a\x0C!Wa\x0B\xCE`@a\x01ZV[\x92_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0C\x1CW\x81a\x0B\xEE\x91\x84\x01a\x0B\x94V[_\x85\x01R` \x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0C\x17Wa\x0C\x10\x92\x01a\x0B\x01V[` \x83\x01RV[a\n\xBCV[a\n\xBCV[a\n\xB8V[\x90` \x82\x82\x03\x12a\x0CVW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0CQWa\x0CN\x92\x01a\x0B\xB7V[\x90V[a\0\x81V[a\0}V[Q\x90V[PPa\x0Cia\x06DV[Pa\r\na\x0C\xCCa\x0C\xC7a\x0C\x83a\x0C~a\x06\xC4V[a\rNV[a\x0C\xB73a\x0C\xB1a\x0C\xABa\x0C\xA6a\x0C\xA1a\x0C\x9C\x87a\n8V[a\nLV[a\x05\x16V[a\0\x90V[\x91a\0\x90V[\x14a\x05.V[a\x0C\xC1`\xA0a\nqV[\x90a\n\x91V[a\n8V[a\x0C\xD4a\x06DV[P` \x02`\x04\x015`\x04\x01\x805`@Q\x91\x81` \x01\x90\x837` \x01\x81\x01`@R` a\x0C\xFF\x82a\x0C[V[\x81\x83\x01\x01\x91\x01a\x0C&V[\x90a\r\x1D` _\x84\x01Q\x93\x01Q\x92a\r\x82V[V[a\r(\x81a\x0C[V[\x90a\rE\x82a\r?a\r9_a\x06\xA8V[\x91a\0\xBFV[\x11a\x05.V[` \x01\xFD[_\x90V[a\rVa\rJV[P\\\x90V[]V[Q\x90V[\x90a\rl\x82a\r^V[\x81\x10\x15a\r}W` \x80\x91\x02\x01\x01\x90V[a\x05PV[a\r\x8Aa\x059V[[\x80a\r\xA6a\r\xA0a\r\x9B\x85a\r^V[a\0\xBFV[\x91a\0\xBFV[\x10\x15a\r\xF7W_\x80a\r\xB70a\x05\"V[a\r\xC2\x85\x85\x90a\rbV[Q\x82` \x82\x01\x91Q\x92Z\xF1a\r\xDFa\r\xD8a\x06IV[\x91\x15a\x06rV[a\r\xF2WPa\r\xED\x90a\x05=V[a\r\x8BV[a\r\x1FV[PPV\xFE\xA2dipfsX\"\x12 \x0CaJg\x9C\xA1v.\x16\xE5P\xAD\x94\xFANn\xF2\tF\x80\x85\xE4\x16\x9C\x99Q\xA5x\xEC\x14\xF1\x1AdsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct DynamicCall { address to; bytes data; uint64 offset; uint64 length; uint64 resOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DynamicCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub offset: u64,
        #[allow(missing_docs)]
        pub length: u64,
        #[allow(missing_docs)]
        pub resOffset: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Bytes,
            u64,
            u64,
            u64,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DynamicCall> for UnderlyingRustTuple<'_> {
            fn from(value: DynamicCall) -> Self {
                (value.to, value.data, value.offset, value.length, value.resOffset)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DynamicCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    to: tuple.0,
                    data: tuple.1,
                    offset: tuple.2,
                    length: tuple.3,
                    resOffset: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for DynamicCall {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for DynamicCall {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.offset),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.resOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for DynamicCall {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for DynamicCall {
            const NAME: &'static str = "DynamicCall";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "DynamicCall(address to,bytes data,uint64 offset,uint64 length,uint64 resOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.to,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.offset)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.length)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.resOffset)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for DynamicCall {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.to,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.offset,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.length,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.resOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.to,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.offset,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.length,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.resOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _owner: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                )
            }
        }
    };
    /**Function with signature `OWNER()` and selector `0x117803e3`.
```solidity
function OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OWNERCall {}
    ///Container type for the return parameters of the [`OWNER()`](OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OWNER()";
            const SELECTOR: [u8; 4] = [17u8, 120u8, 3u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `batchCall(bytes[])` and selector `0x68be3cf2`.
```solidity
function batchCall(bytes[] memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct batchCallCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`batchCall(bytes[])`](batchCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct batchCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<batchCallCall> for UnderlyingRustTuple<'_> {
                fn from(value: batchCallCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for batchCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<batchCallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: batchCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for batchCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for batchCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = batchCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "batchCall(bytes[])";
            const SELECTOR: [u8; 4] = [104u8, 190u8, 60u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `requireProfitable(address,uint256)` and selector `0x665e7b64`.
```solidity
function requireProfitable(address token, uint256 amount) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireProfitableCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`requireProfitable(address,uint256)`](requireProfitableCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireProfitableReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireProfitableCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: requireProfitableCall) -> Self {
                    (value.token, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requireProfitableCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireProfitableReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: requireProfitableReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requireProfitableReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requireProfitableCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requireProfitableReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requireProfitable(address,uint256)";
            const SELECTOR: [u8; 4] = [102u8, 94u8, 123u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])` and selector `0x011e445b`.
```solidity
function singlecall(address target, uint256 value, bytes32 context, bytes memory callData, DynamicCall[] memory dynamicCalls) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct singlecallCall {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub context: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callData: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub dynamicCalls: alloy::sol_types::private::Vec<
            <DynamicCall as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])`](singlecallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct singlecallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<DynamicCall>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<
                    <DynamicCall as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<singlecallCall> for UnderlyingRustTuple<'_> {
                fn from(value: singlecallCall) -> Self {
                    (
                        value.target,
                        value.value,
                        value.context,
                        value.callData,
                        value.dynamicCalls,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for singlecallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        target: tuple.0,
                        value: tuple.1,
                        context: tuple.2,
                        callData: tuple.3,
                        dynamicCalls: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<singlecallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: singlecallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for singlecallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for singlecallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<DynamicCall>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = singlecallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])";
            const SELECTOR: [u8; 4] = [1u8, 30u8, 68u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.context),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callData,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        DynamicCall,
                    > as alloy_sol_types::SolType>::tokenize(&self.dynamicCalls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`BatchExecutor`](self) function calls.
    pub enum BatchExecutorCalls {
        #[allow(missing_docs)]
        OWNER(OWNERCall),
        #[allow(missing_docs)]
        batchCall(batchCallCall),
        #[allow(missing_docs)]
        requireProfitable(requireProfitableCall),
        #[allow(missing_docs)]
        singlecall(singlecallCall),
    }
    #[automatically_derived]
    impl BatchExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 30u8, 68u8, 91u8],
            [17u8, 120u8, 3u8, 227u8],
            [102u8, 94u8, 123u8, 100u8],
            [104u8, 190u8, 60u8, 242u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BatchExecutorCalls {
        const NAME: &'static str = "BatchExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OWNER(_) => <OWNERCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::batchCall(_) => {
                    <batchCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requireProfitable(_) => {
                    <requireProfitableCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::singlecall(_) => {
                    <singlecallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<BatchExecutorCalls>] = &[
                {
                    fn singlecall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <singlecallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::singlecall)
                    }
                    singlecall
                },
                {
                    fn OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::OWNER)
                    }
                    OWNER
                },
                {
                    fn requireProfitable(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <requireProfitableCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::requireProfitable)
                    }
                    requireProfitable
                },
                {
                    fn batchCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <batchCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::batchCall)
                    }
                    batchCall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OWNER(inner) => {
                    <OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::batchCall(inner) => {
                    <batchCallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::requireProfitable(inner) => {
                    <requireProfitableCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::singlecall(inner) => {
                    <singlecallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OWNER(inner) => {
                    <OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::batchCall(inner) => {
                    <batchCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requireProfitable(inner) => {
                    <requireProfitableCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::singlecall(inner) => {
                    <singlecallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BatchExecutor`](self) contract instance.

See the [wrapper's documentation](`BatchExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BatchExecutorInstance<T, P, N> {
        BatchExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BatchExecutorInstance<T, P, N>>,
    > {
        BatchExecutorInstance::<T, P, N>::deploy(provider, _owner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        BatchExecutorInstance::<T, P, N>::deploy_builder(provider, _owner)
    }
    /**A [`BatchExecutor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`BatchExecutor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BatchExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BatchExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BatchExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`BatchExecutor`](self) contract instance.

See the [wrapper's documentation](`BatchExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<BatchExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _owner);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _owner },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BatchExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BatchExecutorInstance<T, P, N> {
            BatchExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`OWNER`] function.
        pub fn OWNER(&self) -> alloy_contract::SolCallBuilder<T, &P, OWNERCall, N> {
            self.call_builder(&OWNERCall {})
        }
        ///Creates a new call builder for the [`batchCall`] function.
        pub fn batchCall(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, batchCallCall, N> {
            self.call_builder(&batchCallCall { data })
        }
        ///Creates a new call builder for the [`requireProfitable`] function.
        pub fn requireProfitable(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, requireProfitableCall, N> {
            self.call_builder(
                &requireProfitableCall {
                    token,
                    amount,
                },
            )
        }
        ///Creates a new call builder for the [`singlecall`] function.
        pub fn singlecall(
            &self,
            target: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            context: alloy::sol_types::private::FixedBytes<32>,
            callData: alloy::sol_types::private::Bytes,
            dynamicCalls: alloy::sol_types::private::Vec<
                <DynamicCall as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, singlecallCall, N> {
            self.call_builder(
                &singlecallCall {
                    target,
                    value,
                    context,
                    callData,
                    dynamicCalls,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
