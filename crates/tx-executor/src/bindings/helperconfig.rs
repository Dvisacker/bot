/**

Generated by the following Solidity interface...
```solidity
interface HelperConfig {
    struct NetworkConfig {
        uint256 deployerKey;
        address deployerAddress;
        address aaveLendingPool;
        address uniswapV2Router;
        address uniswapV3Factory;
        address uniswapV3Router;
        address aerodromeRouter;
        address usdc;
        address usdt;
        address weth;
    }

    constructor();

    function IS_SCRIPT() external view returns (bool);
    function activeNetworkConfig() external view returns (uint256 deployerKey, address deployerAddress, address aaveLendingPool, address uniswapV2Router, address uniswapV3Factory, address uniswapV3Router, address aerodromeRouter, address usdc, address usdt, address weth);
    function getActiveNetworkConfig() external view returns (NetworkConfig memory);
    function isAnvilChain() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "activeNetworkConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "deployerKey",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deployerAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "aaveLendingPool",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV2Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV3Factory",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "aerodromeRouter",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "usdc",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "usdt",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "weth",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveNetworkConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct HelperConfig.NetworkConfig",
        "components": [
          {
            "name": "deployerKey",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deployerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "aaveLendingPool",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV2Router",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV3Factory",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV3Router",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "aerodromeRouter",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "usdc",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "usdt",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "weth",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAnvilChain",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod HelperConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234610027576100116106f9565b61001961002c565b61071b611151823961071b90f35b610032565b60405190565b5f80fd5b5f90565b5f90565b5f1c90565b90565b90565b61005d61005861006292610043565b610046565b610043565b90565b6100716100769161003e565b610049565b90565b60018060a01b031690565b61009861009361009d92610043565b610046565b610079565b90565b6100b46100af6100b992610079565b610046565b610079565b90565b6100c5906100a0565b90565b6101016100fc6100f77f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610065565b610084565b6100bc565b90565b61010d906100a0565b90565b61011990610104565b90565b61012c6101276100c8565b610110565b90565b610138906100bc565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906101639061013b565b810190811060018060401b0382111761017b57604052565b610145565b60e01b90565b5f80fd5b61019381610043565b0361019a57565b5f80fd5b905051906101ab8261018a565b565b906020828203126101c6576101c3915f0161019e565b90565b610186565b60209181520190565b5f7f4445565f505249564154455f4b45590000000000000000000000000000000000910152565b610208600f6020926101cb565b610211816101d4565b0190565b61022a9060208101905f8183039101526101fb565b90565b61023561002c565b3d5f823e3d90fd5b61024690610079565b90565b6102528161023d565b0361025957565b5f80fd5b9050519061026a82610249565b565b9060208282031261028557610282915f0161025d565b90565b610186565b5f7f4445565f41444452455353000000000000000000000000000000000000000000910152565b6102be600b6020926101cb565b6102c78161028a565b0190565b6102e09060208101905f8183039101526102b1565b90565b906102f66102ef61002c565b9283610159565b565b60018060401b0381116103145761031060209161013b565b0190565b610145565b9061032b610326836102f8565b6102e3565b918252565b5f7f416e76696c206465746563746564000000000000000000000000000000000000910152565b610361600e610319565b9061036e60208301610330565b565b610378610357565b90565b5f7f414e56494c5f4445565f505249564154455f4b45590000000000000000000000910152565b6103af60156020926101cb565b6103b88161037b565b0190565b6103d19060208101905f8183039101526103a2565b90565b5f7f414e56494c5f4445565f41444452455353000000000000000000000000000000910152565b61040860116020926101cb565b610411816103d4565b0190565b61042a9060208101905f8183039101526103fb565b90565b90565b61044461043f6104499261042d565b610046565b610043565b90565b90565b61046361045e6104689261044c565b610046565b610043565b90565b90565b61048261047d6104879261046b565b610046565b610043565b90565b90565b6104a161049c6104a69261048a565b610046565b610043565b90565b5f7f556e737570706f72746564206e6574776f726b00000000000000000000000000910152565b6104dd60136020926101cb565b6104e6816104a9565b0190565b6104ff9060208101905f8183039101526104d0565b90565b61050b90610043565b9052565b9190610522905f60208501940190610502565b565b61052f6101406102e3565b90565b9061053c90610043565b9052565b9061054a9061023d565b9052565b6105589051610043565b90565b5f1b90565b9061056c5f199161055b565b9181191691161790565b90565b9061058e61058961059592610049565b610576565b8254610560565b9055565b6105a3905161023d565b90565b906105b760018060a01b039161055b565b9181191691161790565b6105ca906100bc565b90565b90565b906105e56105e06105ec926105c1565b6105cd565b82546105a6565b9055565b906106e561012060096106eb946106145f820161060e5f880161054e565b90610579565b61062d6001820161062760208801610599565b906105d0565b6106466002820161064060408801610599565b906105d0565b61065f6003820161065960608801610599565b906105d0565b6106786004820161067260808801610599565b906105d0565b6106916005820161068b60a08801610599565b906105d0565b6106aa600682016106a460c08801610599565b906105d0565b6106c3600782016106bd60e08801610599565b906105d0565b6106dd600882016106d76101008801610599565b906105d0565b019201610599565b906105d0565b565b906106f7916105f0565b565b610701610f80565b610709610036565b5061071261003a565b5061071b611011565b5f14610e265761073161072c610370565b611092565b61075c602061074661074161011c565b61012f565b63c1978d1f9061075461002c565b938492610180565b8252818061076c600482016103bc565b03915afa908115610e21575f91610df3575b506107aa602061079461078f61011c565b61012f565b63350d56bf906107a261002c565b938492610180565b825281806107ba60048201610415565b03915afa908115610dee575f91610dc0575b50505b466107e46107de61a4b1610430565b91610043565b148015610da4575b5f146109b15761082f60208261080861080361011c565b61012f565b61082463ffa1864961081861002c565b95869485938493610180565b83526004830161050f565b03915afa9081156109ac575f9161097e575b5073794a61358d6845594f94dc1db02a252b5b4814ad731b02da8cb0d097eb8d57a175b88c7d8b47997506731f98431c8ad98523631ae4a59f267346ea31f9847368b3465833fb72a70ecdf485e0e4c7bd8665fc455f9173af88d065e77c8cc2239327c5edb3a432268e58319373fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9957382af49447d8a07e3bd95bd0d56f35241523fbab1976108e2610524565b995f8b01906108f091610532565b60208a01906108fe91610540565b604089019061090c91610540565b606088019061091a91610540565b608087019061092891610540565b60a086019061093691610540565b60c085019061094491610540565b60e084019061095291610540565b61010083019061096191610540565b61012082019061097091610540565b61097b90600d6106ed565b5b565b61099f915060203d81116109a5575b6109978183610159565b81019061026c565b5f610841565b503d61098d565b61022d565b466109c66109c061210561046e565b91610043565b145f14610ba357610a0a6020826109e36109de61011c565b61012f565b6109ff63ffa186496109f361002c565b95869485938493610180565b83526004830161050f565b03915afa908115610b9e575f91610b70575b5073794a61358d6845594f94dc1db02a252b5b4814ad734752ba5dbc23f44d87826276bf6fd6b1c372ad247333128a8fc17869897dce68ed026d694621f6fdfd732626664c2603336e57b271c5c0b26f421741e48173cf77a3ba9a5ca399b7c97c74d54e5b1beb874e439173833589fcd6edb6e08f4c7c32d4f71b54bda029139373fde4c96c8593536e31f229ea8f37b2ada2699bb29573420000000000000000000000000000000000000697610ad1610524565b995f8b0190610adf91610532565b60208a0190610aed91610540565b6040890190610afb91610540565b6060880190610b0991610540565b6080870190610b1791610540565b60a0860190610b2591610540565b60c0850190610b3391610540565b60e0840190610b4191610540565b610100830190610b5091610540565b610120820190610b5f91610540565b610b6a90600d6106ed565b5b61097c565b610b91915060203d8111610b97575b610b898183610159565b81019061026c565b5f610a1c565b503d610b7f565b61022d565b46610bb9610bb362aa36a761048d565b91610043565b145f14610d8257610bfd602082610bd6610bd161011c565b61012f565b610bf263ffa18649610be661002c565b95869485938493610180565b83526004830161050f565b03915afa908115610d7d575f91610d4f575b50736ae43d3271ff6888e7fc43fd7321a503ff738951737a250d5630b4cf539739df2c5dacb4c659f2488d731f98431c8ad98523631ae4a59f267346ea31f9845f9073e592427a0aece92de3edee1f18e0157c05861564907394a9d9ac8a22534e3faca9f4e7f2e2cf85d5e4c89373aa8e23fb1079ea71e0a56f48a2aa51851d8433d09573c558dbdd856501fcd9aaf1e62eae57a9f0629a3c97610cb1610524565b995f8b0190610cbf91610532565b60208a0190610ccd91610540565b6040890190610cdb91610540565b6060880190610ce991610540565b6080870190610cf791610540565b60a0860190610d0591610540565b60c0850190610d1391610540565b60e0840190610d2191610540565b610100830190610d3091610540565b610120820190610d3f91610540565b610d4a90600d6106ed565b610b6b565b610d70915060203d8111610d76575b610d688183610159565b81019061026c565b5f610c0f565b503d610d5e565b61022d565b610d8a61002c565b62461bcd60e51b815280610da0600482016104ea565b0390fd5b5046610dba610db4617a6961044f565b91610043565b146107ec565b610de1915060203d8111610de7575b610dd98183610159565b81019061026c565b5f6107cc565b503d610dcf565b61022d565b610e14915060203d8111610e1a575b610e0c8183610159565b8101906101ad565b5f61077e565b503d610e02565b61022d565b610e516020610e3b610e3661011c565b61012f565b63c1978d1f90610e4961002c565b938492610180565b82528180610e6160048201610215565b03915afa908115610f29575f91610efb575b50610e9f6020610e89610e8461011c565b61012f565b63350d56bf90610e9761002c565b938492610180565b82528180610eaf600482016102cb565b03915afa908115610ef6575f91610ec8575b50506107cf565b610ee9915060203d8111610eef575b610ee18183610159565b81019061026c565b5f610ec1565b503d610ed7565b61022d565b610f1c915060203d8111610f22575b610f148183610159565b8101906101ad565b5f610e73565b503d610f0a565b61022d565b60101b90565b90610f4262ff000091610f2e565b9181191691161790565b151590565b610f5a90610f4c565b90565b90565b90610f75610f70610f7c92610f51565b610f5d565b8254610f34565b9055565b610f88610f96565b610f946001600c610f60565b565b610f9e610fa0565b565b610fa8610fe0565b565b90610fb660ff9161055b565b9181191691161790565b90610fd5610fd0610fdc92610f51565b610f5d565b8254610faa565b9055565b610fec6001600c610fc0565b565b5f90565b90565b61100961100461100e92610ff2565b610046565b610043565b90565b611019610fee565b50611022610036565b50446110366110305f610ff5565b91610043565b1490565b5190565b90825f9392825e0152565b6110686110716020936110769361105f8161103a565b938480936101cb565b9586910161103e565b61013b565b0190565b61108f9160208201915f818403910152611049565b90565b6110bd6110cc6110d1926110a461002c565b92839160046020840163104c13eb60e21b81520161107a565b60208201810382520382610159565b6110d3565b565b6110e6906110e1600161111e565b61113e565b565b5190565b6a636f6e736f6c652e6c6f6790565b5f8091611107816110e8565b9060206111126110ec565b9101905afa50565b5f90565b61112661111a565b5090565b634e487b7160e01b5f52605160045260245ffd5b60010361112a5761114e906110fb565b56fe60806040526004361015610013575b610452565b61001d5f3561005c565b8063612a895214610057578063a2d7c88e14610052578063d7b657451461004d5763f8ccbf470361000e5761041d565b61039b565b6101dc565b6100a6565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261007a57565b61006c565b151590565b61008d9061007f565b9052565b91906100a4905f60208501940190610084565b565b346100d6576100b6366004610070565b6100d26100c1610480565b6100c9610062565b91829182610091565b0390f35b610068565b90565b6100e7906100db565b9052565b60018060a01b031690565b6100ff906100eb565b90565b61010b906100f6565b9052565b90610120806101c4936101285f8201515f8601906100de565b61013a60208201516020860190610102565b61014c60408201516040860190610102565b61015e60608201516060860190610102565b61017060808201516080860190610102565b61018260a082015160a0860190610102565b61019460c082015160c0860190610102565b6101a660e082015160e0860190610102565b6101ba610100820151610100860190610102565b0151910190610102565b565b91906101da905f610140850194019061010f565b565b3461020c576101ec366004610070565b6102086101f76106cf565b6101ff610062565b918291826101c6565b0390f35b610068565b5f1c90565b90565b61022561022a91610211565b610216565b90565b6102379054610219565b90565b60018060a01b031690565b61025161025691610211565b61023a565b90565b6102639054610245565b90565b600d906102745f830161022d565b9161028160018201610259565b9161028e60028301610259565b9161029b60038201610259565b916102a860048301610259565b916102b560058201610259565b916102c260068301610259565b916102cf60078201610259565b916102e860096102e160088501610259565b9301610259565b90565b6102f4906100db565b9052565b610301906100f6565b9052565b979593919a9998969492909a61014089019b5f8a01610323916102eb565b60208901610330916102f8565b6040880161033d916102f8565b6060870161034a916102f8565b60808601610357916102f8565b60a08501610364916102f8565b60c08401610371916102f8565b60e0830161037e916102f8565b610100820161038c916102f8565b61012001610399916102f8565b565b346103d8576103ab366004610070565b6103d46103b6610266565b966103cb9a989a969196959295949394610062565b9a8b9a8b610305565b0390f35b610068565b1c90565b60ff1690565b6103f79060086103fc93026103dd565b6103e1565b90565b9061040a91546103e7565b90565b61041a600c6002906103ff565b90565b3461044d5761042d366004610070565b61044961043861040d565b610440610062565b91829182610091565b0390f35b610068565b5f80fd5b5f90565b5f90565b90565b90565b61047861047361047d9261045e565b610461565b6100db565b90565b610488610456565b5061049161045a565b50446104a561049f5f610464565b916100db565b1490565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104d1906104a9565b810190811067ffffffffffffffff8211176104eb57604052565b6104b3565b906105036104fc610062565b92836104c7565b565b6105106101406104f0565b90565b5f90565b5f90565b610523610505565b9060208080808080808080808b610538610513565b815201610543610517565b81520161054e610517565b815201610559610517565b815201610564610517565b81520161056f610517565b81520161057a610517565b815201610585610517565b815201610590610517565b81520161059b610517565b81525050565b6105a961051b565b90565b906105b6906100db565b9052565b906105c4906100f6565b9052565b906106c16106b760096105d9610505565b946105f06105e85f830161022d565b5f88016105ac565b6106086105ff60018301610259565b602088016105ba565b61062061061760028301610259565b604088016105ba565b61063861062f60038301610259565b606088016105ba565b61065061064760048301610259565b608088016105ba565b61066861065f60058301610259565b60a088016105ba565b61068061067760068301610259565b60c088016105ba565b61069861068f60078301610259565b60e088016105ba565b6106b16106a760088301610259565b61010088016105ba565b01610259565b61012084016105ba565b565b6106cc906105c8565b90565b6106d76105a1565b506106e2600d6106c3565b9056fea26469706673582212208767381698df863446d4c894972f759c4815f5cd0c427b46252321a6cf0849e464736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x06\xF9V[a\0\x19a\0,V[a\x07\x1Ba\x11Q\x829a\x07\x1B\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[_\x90V[_\x90V[_\x1C\x90V[\x90V[\x90V[a\0]a\0Xa\0b\x92a\0CV[a\0FV[a\0CV[\x90V[a\0qa\0v\x91a\0>V[a\0IV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x98a\0\x93a\0\x9D\x92a\0CV[a\0FV[a\0yV[\x90V[a\0\xB4a\0\xAFa\0\xB9\x92a\0yV[a\0FV[a\0yV[\x90V[a\0\xC5\x90a\0\xA0V[\x90V[a\x01\x01a\0\xFCa\0\xF7\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\0eV[a\0\x84V[a\0\xBCV[\x90V[a\x01\r\x90a\0\xA0V[\x90V[a\x01\x19\x90a\x01\x04V[\x90V[a\x01,a\x01'a\0\xC8V[a\x01\x10V[\x90V[a\x018\x90a\0\xBCV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01c\x90a\x01;V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x01{W`@RV[a\x01EV[`\xE0\x1B\x90V[_\x80\xFD[a\x01\x93\x81a\0CV[\x03a\x01\x9AWV[_\x80\xFD[\x90PQ\x90a\x01\xAB\x82a\x01\x8AV[V[\x90` \x82\x82\x03\x12a\x01\xC6Wa\x01\xC3\x91_\x01a\x01\x9EV[\x90V[a\x01\x86V[` \x91\x81R\x01\x90V[_\x7FDEV_PRIVATE_KEY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\x08`\x0F` \x92a\x01\xCBV[a\x02\x11\x81a\x01\xD4V[\x01\x90V[a\x02*\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xFBV[\x90V[a\x025a\0,V[=_\x82>=\x90\xFD[a\x02F\x90a\0yV[\x90V[a\x02R\x81a\x02=V[\x03a\x02YWV[_\x80\xFD[\x90PQ\x90a\x02j\x82a\x02IV[V[\x90` \x82\x82\x03\x12a\x02\x85Wa\x02\x82\x91_\x01a\x02]V[\x90V[a\x01\x86V[_\x7FDEV_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xBE`\x0B` \x92a\x01\xCBV[a\x02\xC7\x81a\x02\x8AV[\x01\x90V[a\x02\xE0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xB1V[\x90V[\x90a\x02\xF6a\x02\xEFa\0,V[\x92\x83a\x01YV[V[`\x01\x80`@\x1B\x03\x81\x11a\x03\x14Wa\x03\x10` \x91a\x01;V[\x01\x90V[a\x01EV[\x90a\x03+a\x03&\x83a\x02\xF8V[a\x02\xE3V[\x91\x82RV[_\x7FAnvil detected\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03a`\x0Ea\x03\x19V[\x90a\x03n` \x83\x01a\x030V[V[a\x03xa\x03WV[\x90V[_\x7FANVIL_DEV_PRIVATE_KEY\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\xAF`\x15` \x92a\x01\xCBV[a\x03\xB8\x81a\x03{V[\x01\x90V[a\x03\xD1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xA2V[\x90V[_\x7FANVIL_DEV_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\x08`\x11` \x92a\x01\xCBV[a\x04\x11\x81a\x03\xD4V[\x01\x90V[a\x04*\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xFBV[\x90V[\x90V[a\x04Da\x04?a\x04I\x92a\x04-V[a\0FV[a\0CV[\x90V[\x90V[a\x04ca\x04^a\x04h\x92a\x04LV[a\0FV[a\0CV[\x90V[\x90V[a\x04\x82a\x04}a\x04\x87\x92a\x04kV[a\0FV[a\0CV[\x90V[\x90V[a\x04\xA1a\x04\x9Ca\x04\xA6\x92a\x04\x8AV[a\0FV[a\0CV[\x90V[_\x7FUnsupported network\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xDD`\x13` \x92a\x01\xCBV[a\x04\xE6\x81a\x04\xA9V[\x01\x90V[a\x04\xFF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\xD0V[\x90V[a\x05\x0B\x90a\0CV[\x90RV[\x91\x90a\x05\"\x90_` \x85\x01\x94\x01\x90a\x05\x02V[V[a\x05/a\x01@a\x02\xE3V[\x90V[\x90a\x05<\x90a\0CV[\x90RV[\x90a\x05J\x90a\x02=V[\x90RV[a\x05X\x90Qa\0CV[\x90V[_\x1B\x90V[\x90a\x05l_\x19\x91a\x05[V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x05\x8Ea\x05\x89a\x05\x95\x92a\0IV[a\x05vV[\x82Ta\x05`V[\x90UV[a\x05\xA3\x90Qa\x02=V[\x90V[\x90a\x05\xB7`\x01\x80`\xA0\x1B\x03\x91a\x05[V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05\xCA\x90a\0\xBCV[\x90V[\x90V[\x90a\x05\xE5a\x05\xE0a\x05\xEC\x92a\x05\xC1V[a\x05\xCDV[\x82Ta\x05\xA6V[\x90UV[\x90a\x06\xE5a\x01 `\ta\x06\xEB\x94a\x06\x14_\x82\x01a\x06\x0E_\x88\x01a\x05NV[\x90a\x05yV[a\x06-`\x01\x82\x01a\x06'` \x88\x01a\x05\x99V[\x90a\x05\xD0V[a\x06F`\x02\x82\x01a\x06@`@\x88\x01a\x05\x99V[\x90a\x05\xD0V[a\x06_`\x03\x82\x01a\x06Y``\x88\x01a\x05\x99V[\x90a\x05\xD0V[a\x06x`\x04\x82\x01a\x06r`\x80\x88\x01a\x05\x99V[\x90a\x05\xD0V[a\x06\x91`\x05\x82\x01a\x06\x8B`\xA0\x88\x01a\x05\x99V[\x90a\x05\xD0V[a\x06\xAA`\x06\x82\x01a\x06\xA4`\xC0\x88\x01a\x05\x99V[\x90a\x05\xD0V[a\x06\xC3`\x07\x82\x01a\x06\xBD`\xE0\x88\x01a\x05\x99V[\x90a\x05\xD0V[a\x06\xDD`\x08\x82\x01a\x06\xD7a\x01\0\x88\x01a\x05\x99V[\x90a\x05\xD0V[\x01\x92\x01a\x05\x99V[\x90a\x05\xD0V[V[\x90a\x06\xF7\x91a\x05\xF0V[V[a\x07\x01a\x0F\x80V[a\x07\ta\x006V[Pa\x07\x12a\0:V[Pa\x07\x1Ba\x10\x11V[_\x14a\x0E&Wa\x071a\x07,a\x03pV[a\x10\x92V[a\x07\\` a\x07Fa\x07Aa\x01\x1CV[a\x01/V[c\xC1\x97\x8D\x1F\x90a\x07Ta\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x07l`\x04\x82\x01a\x03\xBCV[\x03\x91Z\xFA\x90\x81\x15a\x0E!W_\x91a\r\xF3W[Pa\x07\xAA` a\x07\x94a\x07\x8Fa\x01\x1CV[a\x01/V[c5\rV\xBF\x90a\x07\xA2a\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x07\xBA`\x04\x82\x01a\x04\x15V[\x03\x91Z\xFA\x90\x81\x15a\r\xEEW_\x91a\r\xC0W[PP[Fa\x07\xE4a\x07\xDEa\xA4\xB1a\x040V[\x91a\0CV[\x14\x80\x15a\r\xA4W[_\x14a\t\xB1Wa\x08/` \x82a\x08\x08a\x08\x03a\x01\x1CV[a\x01/V[a\x08$c\xFF\xA1\x86Ia\x08\x18a\0,V[\x95\x86\x94\x85\x93\x84\x93a\x01\x80V[\x83R`\x04\x83\x01a\x05\x0FV[\x03\x91Z\xFA\x90\x81\x15a\t\xACW_\x91a\t~W[PsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xADs\x1B\x02\xDA\x8C\xB0\xD0\x97\xEB\x8DW\xA1u\xB8\x8C}\x8BG\x99u\x06s\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84sh\xB3FX3\xFBr\xA7\x0E\xCD\xF4\x85\xE0\xE4\xC7\xBD\x86e\xFCE_\x91s\xAF\x88\xD0e\xE7|\x8C\xC2#\x93'\xC5\xED\xB3\xA42&\x8EX1\x93s\xFD\x08k\xC7\xCD\\H\x1D\xCC\x9C\x85\xEB\xE4x\xA1\xC0\xB6\x9F\xCB\xB9\x95s\x82\xAFID}\x8A\x07\xE3\xBD\x95\xBD\rV\xF3RAR?\xBA\xB1\x97a\x08\xE2a\x05$V[\x99_\x8B\x01\x90a\x08\xF0\x91a\x052V[` \x8A\x01\x90a\x08\xFE\x91a\x05@V[`@\x89\x01\x90a\t\x0C\x91a\x05@V[``\x88\x01\x90a\t\x1A\x91a\x05@V[`\x80\x87\x01\x90a\t(\x91a\x05@V[`\xA0\x86\x01\x90a\t6\x91a\x05@V[`\xC0\x85\x01\x90a\tD\x91a\x05@V[`\xE0\x84\x01\x90a\tR\x91a\x05@V[a\x01\0\x83\x01\x90a\ta\x91a\x05@V[a\x01 \x82\x01\x90a\tp\x91a\x05@V[a\t{\x90`\ra\x06\xEDV[[V[a\t\x9F\x91P` =\x81\x11a\t\xA5W[a\t\x97\x81\x83a\x01YV[\x81\x01\x90a\x02lV[_a\x08AV[P=a\t\x8DV[a\x02-V[Fa\t\xC6a\t\xC0a!\x05a\x04nV[\x91a\0CV[\x14_\x14a\x0B\xA3Wa\n\n` \x82a\t\xE3a\t\xDEa\x01\x1CV[a\x01/V[a\t\xFFc\xFF\xA1\x86Ia\t\xF3a\0,V[\x95\x86\x94\x85\x93\x84\x93a\x01\x80V[\x83R`\x04\x83\x01a\x05\x0FV[\x03\x91Z\xFA\x90\x81\x15a\x0B\x9EW_\x91a\x0BpW[PsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xADsGR\xBA]\xBC#\xF4M\x87\x82bv\xBFo\xD6\xB1\xC3r\xAD$s3\x12\x8A\x8F\xC1xi\x89}\xCEh\xED\x02miF!\xF6\xFD\xFDs&&fL&\x033nW\xB2q\xC5\xC0\xB2oB\x17A\xE4\x81s\xCFw\xA3\xBA\x9A\\\xA3\x99\xB7\xC9|t\xD5N[\x1B\xEB\x87NC\x91s\x835\x89\xFC\xD6\xED\xB6\xE0\x8FL|2\xD4\xF7\x1BT\xBD\xA0)\x13\x93s\xFD\xE4\xC9l\x85\x93Sn1\xF2)\xEA\x8F7\xB2\xAD\xA2i\x9B\xB2\x95sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\x97a\n\xD1a\x05$V[\x99_\x8B\x01\x90a\n\xDF\x91a\x052V[` \x8A\x01\x90a\n\xED\x91a\x05@V[`@\x89\x01\x90a\n\xFB\x91a\x05@V[``\x88\x01\x90a\x0B\t\x91a\x05@V[`\x80\x87\x01\x90a\x0B\x17\x91a\x05@V[`\xA0\x86\x01\x90a\x0B%\x91a\x05@V[`\xC0\x85\x01\x90a\x0B3\x91a\x05@V[`\xE0\x84\x01\x90a\x0BA\x91a\x05@V[a\x01\0\x83\x01\x90a\x0BP\x91a\x05@V[a\x01 \x82\x01\x90a\x0B_\x91a\x05@V[a\x0Bj\x90`\ra\x06\xEDV[[a\t|V[a\x0B\x91\x91P` =\x81\x11a\x0B\x97W[a\x0B\x89\x81\x83a\x01YV[\x81\x01\x90a\x02lV[_a\n\x1CV[P=a\x0B\x7FV[a\x02-V[Fa\x0B\xB9a\x0B\xB3b\xAA6\xA7a\x04\x8DV[\x91a\0CV[\x14_\x14a\r\x82Wa\x0B\xFD` \x82a\x0B\xD6a\x0B\xD1a\x01\x1CV[a\x01/V[a\x0B\xF2c\xFF\xA1\x86Ia\x0B\xE6a\0,V[\x95\x86\x94\x85\x93\x84\x93a\x01\x80V[\x83R`\x04\x83\x01a\x05\x0FV[\x03\x91Z\xFA\x90\x81\x15a\r}W_\x91a\rOW[Psj\xE4=2q\xFFh\x88\xE7\xFCC\xFDs!\xA5\x03\xFFs\x89Qsz%\rV0\xB4\xCFS\x979\xDF,]\xAC\xB4\xC6Y\xF2H\x8Ds\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84_\x90s\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d\x90s\x94\xA9\xD9\xAC\x8A\"SN?\xAC\xA9\xF4\xE7\xF2\xE2\xCF\x85\xD5\xE4\xC8\x93s\xAA\x8E#\xFB\x10y\xEAq\xE0\xA5oH\xA2\xAAQ\x85\x1D\x843\xD0\x95s\xC5X\xDB\xDD\x85e\x01\xFC\xD9\xAA\xF1\xE6.\xAEW\xA9\xF0b\x9A<\x97a\x0C\xB1a\x05$V[\x99_\x8B\x01\x90a\x0C\xBF\x91a\x052V[` \x8A\x01\x90a\x0C\xCD\x91a\x05@V[`@\x89\x01\x90a\x0C\xDB\x91a\x05@V[``\x88\x01\x90a\x0C\xE9\x91a\x05@V[`\x80\x87\x01\x90a\x0C\xF7\x91a\x05@V[`\xA0\x86\x01\x90a\r\x05\x91a\x05@V[`\xC0\x85\x01\x90a\r\x13\x91a\x05@V[`\xE0\x84\x01\x90a\r!\x91a\x05@V[a\x01\0\x83\x01\x90a\r0\x91a\x05@V[a\x01 \x82\x01\x90a\r?\x91a\x05@V[a\rJ\x90`\ra\x06\xEDV[a\x0BkV[a\rp\x91P` =\x81\x11a\rvW[a\rh\x81\x83a\x01YV[\x81\x01\x90a\x02lV[_a\x0C\x0FV[P=a\r^V[a\x02-V[a\r\x8Aa\0,V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xA0`\x04\x82\x01a\x04\xEAV[\x03\x90\xFD[PFa\r\xBAa\r\xB4azia\x04OV[\x91a\0CV[\x14a\x07\xECV[a\r\xE1\x91P` =\x81\x11a\r\xE7W[a\r\xD9\x81\x83a\x01YV[\x81\x01\x90a\x02lV[_a\x07\xCCV[P=a\r\xCFV[a\x02-V[a\x0E\x14\x91P` =\x81\x11a\x0E\x1AW[a\x0E\x0C\x81\x83a\x01YV[\x81\x01\x90a\x01\xADV[_a\x07~V[P=a\x0E\x02V[a\x02-V[a\x0EQ` a\x0E;a\x0E6a\x01\x1CV[a\x01/V[c\xC1\x97\x8D\x1F\x90a\x0EIa\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x0Ea`\x04\x82\x01a\x02\x15V[\x03\x91Z\xFA\x90\x81\x15a\x0F)W_\x91a\x0E\xFBW[Pa\x0E\x9F` a\x0E\x89a\x0E\x84a\x01\x1CV[a\x01/V[c5\rV\xBF\x90a\x0E\x97a\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x0E\xAF`\x04\x82\x01a\x02\xCBV[\x03\x91Z\xFA\x90\x81\x15a\x0E\xF6W_\x91a\x0E\xC8W[PPa\x07\xCFV[a\x0E\xE9\x91P` =\x81\x11a\x0E\xEFW[a\x0E\xE1\x81\x83a\x01YV[\x81\x01\x90a\x02lV[_a\x0E\xC1V[P=a\x0E\xD7V[a\x02-V[a\x0F\x1C\x91P` =\x81\x11a\x0F\"W[a\x0F\x14\x81\x83a\x01YV[\x81\x01\x90a\x01\xADV[_a\x0EsV[P=a\x0F\nV[a\x02-V[`\x10\x1B\x90V[\x90a\x0FBb\xFF\0\0\x91a\x0F.V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x0FZ\x90a\x0FLV[\x90V[\x90V[\x90a\x0Fua\x0Fpa\x0F|\x92a\x0FQV[a\x0F]V[\x82Ta\x0F4V[\x90UV[a\x0F\x88a\x0F\x96V[a\x0F\x94`\x01`\x0Ca\x0F`V[V[a\x0F\x9Ea\x0F\xA0V[V[a\x0F\xA8a\x0F\xE0V[V[\x90a\x0F\xB6`\xFF\x91a\x05[V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x0F\xD5a\x0F\xD0a\x0F\xDC\x92a\x0FQV[a\x0F]V[\x82Ta\x0F\xAAV[\x90UV[a\x0F\xEC`\x01`\x0Ca\x0F\xC0V[V[_\x90V[\x90V[a\x10\ta\x10\x04a\x10\x0E\x92a\x0F\xF2V[a\0FV[a\0CV[\x90V[a\x10\x19a\x0F\xEEV[Pa\x10\"a\x006V[PDa\x106a\x100_a\x0F\xF5V[\x91a\0CV[\x14\x90V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x10ha\x10q` \x93a\x10v\x93a\x10_\x81a\x10:V[\x93\x84\x80\x93a\x01\xCBV[\x95\x86\x91\x01a\x10>V[a\x01;V[\x01\x90V[a\x10\x8F\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x10IV[\x90V[a\x10\xBDa\x10\xCCa\x10\xD1\x92a\x10\xA4a\0,V[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x10zV[` \x82\x01\x81\x03\x82R\x03\x82a\x01YV[a\x10\xD3V[V[a\x10\xE6\x90a\x10\xE1`\x01a\x11\x1EV[a\x11>V[V[Q\x90V[jconsole.log\x90V[_\x80\x91a\x11\x07\x81a\x10\xE8V[\x90` a\x11\x12a\x10\xECV[\x91\x01\x90Z\xFAPV[_\x90V[a\x11&a\x11\x1AV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x11*Wa\x11N\x90a\x10\xFBV[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04RV[a\0\x1D_5a\0\\V[\x80ca*\x89R\x14a\0WW\x80c\xA2\xD7\xC8\x8E\x14a\0RW\x80c\xD7\xB6WE\x14a\0MWc\xF8\xCC\xBFG\x03a\0\x0EWa\x04\x1DV[a\x03\x9BV[a\x01\xDCV[a\0\xA6V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0zWV[a\0lV[\x15\x15\x90V[a\0\x8D\x90a\0\x7FV[\x90RV[\x91\x90a\0\xA4\x90_` \x85\x01\x94\x01\x90a\0\x84V[V[4a\0\xD6Wa\0\xB66`\x04a\0pV[a\0\xD2a\0\xC1a\x04\x80V[a\0\xC9a\0bV[\x91\x82\x91\x82a\0\x91V[\x03\x90\xF3[a\0hV[\x90V[a\0\xE7\x90a\0\xDBV[\x90RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xFF\x90a\0\xEBV[\x90V[a\x01\x0B\x90a\0\xF6V[\x90RV[\x90a\x01 \x80a\x01\xC4\x93a\x01(_\x82\x01Q_\x86\x01\x90a\0\xDEV[a\x01:` \x82\x01Q` \x86\x01\x90a\x01\x02V[a\x01L`@\x82\x01Q`@\x86\x01\x90a\x01\x02V[a\x01^``\x82\x01Q``\x86\x01\x90a\x01\x02V[a\x01p`\x80\x82\x01Q`\x80\x86\x01\x90a\x01\x02V[a\x01\x82`\xA0\x82\x01Q`\xA0\x86\x01\x90a\x01\x02V[a\x01\x94`\xC0\x82\x01Q`\xC0\x86\x01\x90a\x01\x02V[a\x01\xA6`\xE0\x82\x01Q`\xE0\x86\x01\x90a\x01\x02V[a\x01\xBAa\x01\0\x82\x01Qa\x01\0\x86\x01\x90a\x01\x02V[\x01Q\x91\x01\x90a\x01\x02V[V[\x91\x90a\x01\xDA\x90_a\x01@\x85\x01\x94\x01\x90a\x01\x0FV[V[4a\x02\x0CWa\x01\xEC6`\x04a\0pV[a\x02\x08a\x01\xF7a\x06\xCFV[a\x01\xFFa\0bV[\x91\x82\x91\x82a\x01\xC6V[\x03\x90\xF3[a\0hV[_\x1C\x90V[\x90V[a\x02%a\x02*\x91a\x02\x11V[a\x02\x16V[\x90V[a\x027\x90Ta\x02\x19V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02Qa\x02V\x91a\x02\x11V[a\x02:V[\x90V[a\x02c\x90Ta\x02EV[\x90V[`\r\x90a\x02t_\x83\x01a\x02-V[\x91a\x02\x81`\x01\x82\x01a\x02YV[\x91a\x02\x8E`\x02\x83\x01a\x02YV[\x91a\x02\x9B`\x03\x82\x01a\x02YV[\x91a\x02\xA8`\x04\x83\x01a\x02YV[\x91a\x02\xB5`\x05\x82\x01a\x02YV[\x91a\x02\xC2`\x06\x83\x01a\x02YV[\x91a\x02\xCF`\x07\x82\x01a\x02YV[\x91a\x02\xE8`\ta\x02\xE1`\x08\x85\x01a\x02YV[\x93\x01a\x02YV[\x90V[a\x02\xF4\x90a\0\xDBV[\x90RV[a\x03\x01\x90a\0\xF6V[\x90RV[\x97\x95\x93\x91\x9A\x99\x98\x96\x94\x92\x90\x9Aa\x01@\x89\x01\x9B_\x8A\x01a\x03#\x91a\x02\xEBV[` \x89\x01a\x030\x91a\x02\xF8V[`@\x88\x01a\x03=\x91a\x02\xF8V[``\x87\x01a\x03J\x91a\x02\xF8V[`\x80\x86\x01a\x03W\x91a\x02\xF8V[`\xA0\x85\x01a\x03d\x91a\x02\xF8V[`\xC0\x84\x01a\x03q\x91a\x02\xF8V[`\xE0\x83\x01a\x03~\x91a\x02\xF8V[a\x01\0\x82\x01a\x03\x8C\x91a\x02\xF8V[a\x01 \x01a\x03\x99\x91a\x02\xF8V[V[4a\x03\xD8Wa\x03\xAB6`\x04a\0pV[a\x03\xD4a\x03\xB6a\x02fV[\x96a\x03\xCB\x9A\x98\x9A\x96\x91\x96\x95\x92\x95\x94\x93\x94a\0bV[\x9A\x8B\x9A\x8Ba\x03\x05V[\x03\x90\xF3[a\0hV[\x1C\x90V[`\xFF\x16\x90V[a\x03\xF7\x90`\x08a\x03\xFC\x93\x02a\x03\xDDV[a\x03\xE1V[\x90V[\x90a\x04\n\x91Ta\x03\xE7V[\x90V[a\x04\x1A`\x0C`\x02\x90a\x03\xFFV[\x90V[4a\x04MWa\x04-6`\x04a\0pV[a\x04Ia\x048a\x04\rV[a\x04@a\0bV[\x91\x82\x91\x82a\0\x91V[\x03\x90\xF3[a\0hV[_\x80\xFD[_\x90V[_\x90V[\x90V[\x90V[a\x04xa\x04sa\x04}\x92a\x04^V[a\x04aV[a\0\xDBV[\x90V[a\x04\x88a\x04VV[Pa\x04\x91a\x04ZV[PDa\x04\xA5a\x04\x9F_a\x04dV[\x91a\0\xDBV[\x14\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xD1\x90a\x04\xA9V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xEBW`@RV[a\x04\xB3V[\x90a\x05\x03a\x04\xFCa\0bV[\x92\x83a\x04\xC7V[V[a\x05\x10a\x01@a\x04\xF0V[\x90V[_\x90V[_\x90V[a\x05#a\x05\x05V[\x90` \x80\x80\x80\x80\x80\x80\x80\x80\x80\x8Ba\x058a\x05\x13V[\x81R\x01a\x05Ca\x05\x17V[\x81R\x01a\x05Na\x05\x17V[\x81R\x01a\x05Ya\x05\x17V[\x81R\x01a\x05da\x05\x17V[\x81R\x01a\x05oa\x05\x17V[\x81R\x01a\x05za\x05\x17V[\x81R\x01a\x05\x85a\x05\x17V[\x81R\x01a\x05\x90a\x05\x17V[\x81R\x01a\x05\x9Ba\x05\x17V[\x81RPPV[a\x05\xA9a\x05\x1BV[\x90V[\x90a\x05\xB6\x90a\0\xDBV[\x90RV[\x90a\x05\xC4\x90a\0\xF6V[\x90RV[\x90a\x06\xC1a\x06\xB7`\ta\x05\xD9a\x05\x05V[\x94a\x05\xF0a\x05\xE8_\x83\x01a\x02-V[_\x88\x01a\x05\xACV[a\x06\x08a\x05\xFF`\x01\x83\x01a\x02YV[` \x88\x01a\x05\xBAV[a\x06 a\x06\x17`\x02\x83\x01a\x02YV[`@\x88\x01a\x05\xBAV[a\x068a\x06/`\x03\x83\x01a\x02YV[``\x88\x01a\x05\xBAV[a\x06Pa\x06G`\x04\x83\x01a\x02YV[`\x80\x88\x01a\x05\xBAV[a\x06ha\x06_`\x05\x83\x01a\x02YV[`\xA0\x88\x01a\x05\xBAV[a\x06\x80a\x06w`\x06\x83\x01a\x02YV[`\xC0\x88\x01a\x05\xBAV[a\x06\x98a\x06\x8F`\x07\x83\x01a\x02YV[`\xE0\x88\x01a\x05\xBAV[a\x06\xB1a\x06\xA7`\x08\x83\x01a\x02YV[a\x01\0\x88\x01a\x05\xBAV[\x01a\x02YV[a\x01 \x84\x01a\x05\xBAV[V[a\x06\xCC\x90a\x05\xC8V[\x90V[a\x06\xD7a\x05\xA1V[Pa\x06\xE2`\ra\x06\xC3V[\x90V\xFE\xA2dipfsX\"\x12 \x87g8\x16\x98\xDF\x864F\xD4\xC8\x94\x97/u\x9CH\x15\xF5\xCD\x0CB{F%#!\xA6\xCF\x08I\xE4dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610452565b61001d5f3561005c565b8063612a895214610057578063a2d7c88e14610052578063d7b657451461004d5763f8ccbf470361000e5761041d565b61039b565b6101dc565b6100a6565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261007a57565b61006c565b151590565b61008d9061007f565b9052565b91906100a4905f60208501940190610084565b565b346100d6576100b6366004610070565b6100d26100c1610480565b6100c9610062565b91829182610091565b0390f35b610068565b90565b6100e7906100db565b9052565b60018060a01b031690565b6100ff906100eb565b90565b61010b906100f6565b9052565b90610120806101c4936101285f8201515f8601906100de565b61013a60208201516020860190610102565b61014c60408201516040860190610102565b61015e60608201516060860190610102565b61017060808201516080860190610102565b61018260a082015160a0860190610102565b61019460c082015160c0860190610102565b6101a660e082015160e0860190610102565b6101ba610100820151610100860190610102565b0151910190610102565b565b91906101da905f610140850194019061010f565b565b3461020c576101ec366004610070565b6102086101f76106cf565b6101ff610062565b918291826101c6565b0390f35b610068565b5f1c90565b90565b61022561022a91610211565b610216565b90565b6102379054610219565b90565b60018060a01b031690565b61025161025691610211565b61023a565b90565b6102639054610245565b90565b600d906102745f830161022d565b9161028160018201610259565b9161028e60028301610259565b9161029b60038201610259565b916102a860048301610259565b916102b560058201610259565b916102c260068301610259565b916102cf60078201610259565b916102e860096102e160088501610259565b9301610259565b90565b6102f4906100db565b9052565b610301906100f6565b9052565b979593919a9998969492909a61014089019b5f8a01610323916102eb565b60208901610330916102f8565b6040880161033d916102f8565b6060870161034a916102f8565b60808601610357916102f8565b60a08501610364916102f8565b60c08401610371916102f8565b60e0830161037e916102f8565b610100820161038c916102f8565b61012001610399916102f8565b565b346103d8576103ab366004610070565b6103d46103b6610266565b966103cb9a989a969196959295949394610062565b9a8b9a8b610305565b0390f35b610068565b1c90565b60ff1690565b6103f79060086103fc93026103dd565b6103e1565b90565b9061040a91546103e7565b90565b61041a600c6002906103ff565b90565b3461044d5761042d366004610070565b61044961043861040d565b610440610062565b91829182610091565b0390f35b610068565b5f80fd5b5f90565b5f90565b90565b90565b61047861047361047d9261045e565b610461565b6100db565b90565b610488610456565b5061049161045a565b50446104a561049f5f610464565b916100db565b1490565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104d1906104a9565b810190811067ffffffffffffffff8211176104eb57604052565b6104b3565b906105036104fc610062565b92836104c7565b565b6105106101406104f0565b90565b5f90565b5f90565b610523610505565b9060208080808080808080808b610538610513565b815201610543610517565b81520161054e610517565b815201610559610517565b815201610564610517565b81520161056f610517565b81520161057a610517565b815201610585610517565b815201610590610517565b81520161059b610517565b81525050565b6105a961051b565b90565b906105b6906100db565b9052565b906105c4906100f6565b9052565b906106c16106b760096105d9610505565b946105f06105e85f830161022d565b5f88016105ac565b6106086105ff60018301610259565b602088016105ba565b61062061061760028301610259565b604088016105ba565b61063861062f60038301610259565b606088016105ba565b61065061064760048301610259565b608088016105ba565b61066861065f60058301610259565b60a088016105ba565b61068061067760068301610259565b60c088016105ba565b61069861068f60078301610259565b60e088016105ba565b6106b16106a760088301610259565b61010088016105ba565b01610259565b61012084016105ba565b565b6106cc906105c8565b90565b6106d76105a1565b506106e2600d6106c3565b9056fea26469706673582212208767381698df863446d4c894972f759c4815f5cd0c427b46252321a6cf0849e464736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04RV[a\0\x1D_5a\0\\V[\x80ca*\x89R\x14a\0WW\x80c\xA2\xD7\xC8\x8E\x14a\0RW\x80c\xD7\xB6WE\x14a\0MWc\xF8\xCC\xBFG\x03a\0\x0EWa\x04\x1DV[a\x03\x9BV[a\x01\xDCV[a\0\xA6V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0zWV[a\0lV[\x15\x15\x90V[a\0\x8D\x90a\0\x7FV[\x90RV[\x91\x90a\0\xA4\x90_` \x85\x01\x94\x01\x90a\0\x84V[V[4a\0\xD6Wa\0\xB66`\x04a\0pV[a\0\xD2a\0\xC1a\x04\x80V[a\0\xC9a\0bV[\x91\x82\x91\x82a\0\x91V[\x03\x90\xF3[a\0hV[\x90V[a\0\xE7\x90a\0\xDBV[\x90RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xFF\x90a\0\xEBV[\x90V[a\x01\x0B\x90a\0\xF6V[\x90RV[\x90a\x01 \x80a\x01\xC4\x93a\x01(_\x82\x01Q_\x86\x01\x90a\0\xDEV[a\x01:` \x82\x01Q` \x86\x01\x90a\x01\x02V[a\x01L`@\x82\x01Q`@\x86\x01\x90a\x01\x02V[a\x01^``\x82\x01Q``\x86\x01\x90a\x01\x02V[a\x01p`\x80\x82\x01Q`\x80\x86\x01\x90a\x01\x02V[a\x01\x82`\xA0\x82\x01Q`\xA0\x86\x01\x90a\x01\x02V[a\x01\x94`\xC0\x82\x01Q`\xC0\x86\x01\x90a\x01\x02V[a\x01\xA6`\xE0\x82\x01Q`\xE0\x86\x01\x90a\x01\x02V[a\x01\xBAa\x01\0\x82\x01Qa\x01\0\x86\x01\x90a\x01\x02V[\x01Q\x91\x01\x90a\x01\x02V[V[\x91\x90a\x01\xDA\x90_a\x01@\x85\x01\x94\x01\x90a\x01\x0FV[V[4a\x02\x0CWa\x01\xEC6`\x04a\0pV[a\x02\x08a\x01\xF7a\x06\xCFV[a\x01\xFFa\0bV[\x91\x82\x91\x82a\x01\xC6V[\x03\x90\xF3[a\0hV[_\x1C\x90V[\x90V[a\x02%a\x02*\x91a\x02\x11V[a\x02\x16V[\x90V[a\x027\x90Ta\x02\x19V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02Qa\x02V\x91a\x02\x11V[a\x02:V[\x90V[a\x02c\x90Ta\x02EV[\x90V[`\r\x90a\x02t_\x83\x01a\x02-V[\x91a\x02\x81`\x01\x82\x01a\x02YV[\x91a\x02\x8E`\x02\x83\x01a\x02YV[\x91a\x02\x9B`\x03\x82\x01a\x02YV[\x91a\x02\xA8`\x04\x83\x01a\x02YV[\x91a\x02\xB5`\x05\x82\x01a\x02YV[\x91a\x02\xC2`\x06\x83\x01a\x02YV[\x91a\x02\xCF`\x07\x82\x01a\x02YV[\x91a\x02\xE8`\ta\x02\xE1`\x08\x85\x01a\x02YV[\x93\x01a\x02YV[\x90V[a\x02\xF4\x90a\0\xDBV[\x90RV[a\x03\x01\x90a\0\xF6V[\x90RV[\x97\x95\x93\x91\x9A\x99\x98\x96\x94\x92\x90\x9Aa\x01@\x89\x01\x9B_\x8A\x01a\x03#\x91a\x02\xEBV[` \x89\x01a\x030\x91a\x02\xF8V[`@\x88\x01a\x03=\x91a\x02\xF8V[``\x87\x01a\x03J\x91a\x02\xF8V[`\x80\x86\x01a\x03W\x91a\x02\xF8V[`\xA0\x85\x01a\x03d\x91a\x02\xF8V[`\xC0\x84\x01a\x03q\x91a\x02\xF8V[`\xE0\x83\x01a\x03~\x91a\x02\xF8V[a\x01\0\x82\x01a\x03\x8C\x91a\x02\xF8V[a\x01 \x01a\x03\x99\x91a\x02\xF8V[V[4a\x03\xD8Wa\x03\xAB6`\x04a\0pV[a\x03\xD4a\x03\xB6a\x02fV[\x96a\x03\xCB\x9A\x98\x9A\x96\x91\x96\x95\x92\x95\x94\x93\x94a\0bV[\x9A\x8B\x9A\x8Ba\x03\x05V[\x03\x90\xF3[a\0hV[\x1C\x90V[`\xFF\x16\x90V[a\x03\xF7\x90`\x08a\x03\xFC\x93\x02a\x03\xDDV[a\x03\xE1V[\x90V[\x90a\x04\n\x91Ta\x03\xE7V[\x90V[a\x04\x1A`\x0C`\x02\x90a\x03\xFFV[\x90V[4a\x04MWa\x04-6`\x04a\0pV[a\x04Ia\x048a\x04\rV[a\x04@a\0bV[\x91\x82\x91\x82a\0\x91V[\x03\x90\xF3[a\0hV[_\x80\xFD[_\x90V[_\x90V[\x90V[\x90V[a\x04xa\x04sa\x04}\x92a\x04^V[a\x04aV[a\0\xDBV[\x90V[a\x04\x88a\x04VV[Pa\x04\x91a\x04ZV[PDa\x04\xA5a\x04\x9F_a\x04dV[\x91a\0\xDBV[\x14\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xD1\x90a\x04\xA9V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xEBW`@RV[a\x04\xB3V[\x90a\x05\x03a\x04\xFCa\0bV[\x92\x83a\x04\xC7V[V[a\x05\x10a\x01@a\x04\xF0V[\x90V[_\x90V[_\x90V[a\x05#a\x05\x05V[\x90` \x80\x80\x80\x80\x80\x80\x80\x80\x80\x8Ba\x058a\x05\x13V[\x81R\x01a\x05Ca\x05\x17V[\x81R\x01a\x05Na\x05\x17V[\x81R\x01a\x05Ya\x05\x17V[\x81R\x01a\x05da\x05\x17V[\x81R\x01a\x05oa\x05\x17V[\x81R\x01a\x05za\x05\x17V[\x81R\x01a\x05\x85a\x05\x17V[\x81R\x01a\x05\x90a\x05\x17V[\x81R\x01a\x05\x9Ba\x05\x17V[\x81RPPV[a\x05\xA9a\x05\x1BV[\x90V[\x90a\x05\xB6\x90a\0\xDBV[\x90RV[\x90a\x05\xC4\x90a\0\xF6V[\x90RV[\x90a\x06\xC1a\x06\xB7`\ta\x05\xD9a\x05\x05V[\x94a\x05\xF0a\x05\xE8_\x83\x01a\x02-V[_\x88\x01a\x05\xACV[a\x06\x08a\x05\xFF`\x01\x83\x01a\x02YV[` \x88\x01a\x05\xBAV[a\x06 a\x06\x17`\x02\x83\x01a\x02YV[`@\x88\x01a\x05\xBAV[a\x068a\x06/`\x03\x83\x01a\x02YV[``\x88\x01a\x05\xBAV[a\x06Pa\x06G`\x04\x83\x01a\x02YV[`\x80\x88\x01a\x05\xBAV[a\x06ha\x06_`\x05\x83\x01a\x02YV[`\xA0\x88\x01a\x05\xBAV[a\x06\x80a\x06w`\x06\x83\x01a\x02YV[`\xC0\x88\x01a\x05\xBAV[a\x06\x98a\x06\x8F`\x07\x83\x01a\x02YV[`\xE0\x88\x01a\x05\xBAV[a\x06\xB1a\x06\xA7`\x08\x83\x01a\x02YV[a\x01\0\x88\x01a\x05\xBAV[\x01a\x02YV[a\x01 \x84\x01a\x05\xBAV[V[a\x06\xCC\x90a\x05\xC8V[\x90V[a\x06\xD7a\x05\xA1V[Pa\x06\xE2`\ra\x06\xC3V[\x90V\xFE\xA2dipfsX\"\x12 \x87g8\x16\x98\xDF\x864F\xD4\xC8\x94\x97/u\x9CH\x15\xF5\xCD\x0CB{F%#!\xA6\xCF\x08I\xE4dsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct NetworkConfig { uint256 deployerKey; address deployerAddress; address aaveLendingPool; address uniswapV2Router; address uniswapV3Factory; address uniswapV3Router; address aerodromeRouter; address usdc; address usdt; address weth; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NetworkConfig {
        #[allow(missing_docs)]
        pub deployerKey: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deployerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub aaveLendingPool: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub uniswapV2Router: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub uniswapV3Factory: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub uniswapV3Router: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub aerodromeRouter: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub usdc: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub usdt: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub weth: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NetworkConfig> for UnderlyingRustTuple<'_> {
            fn from(value: NetworkConfig) -> Self {
                (
                    value.deployerKey,
                    value.deployerAddress,
                    value.aaveLendingPool,
                    value.uniswapV2Router,
                    value.uniswapV3Factory,
                    value.uniswapV3Router,
                    value.aerodromeRouter,
                    value.usdc,
                    value.usdt,
                    value.weth,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NetworkConfig {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    deployerKey: tuple.0,
                    deployerAddress: tuple.1,
                    aaveLendingPool: tuple.2,
                    uniswapV2Router: tuple.3,
                    uniswapV3Factory: tuple.4,
                    uniswapV3Router: tuple.5,
                    aerodromeRouter: tuple.6,
                    usdc: tuple.7,
                    usdt: tuple.8,
                    weth: tuple.9,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for NetworkConfig {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for NetworkConfig {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deployerKey),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.deployerAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aaveLendingPool,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV2Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV3Factory,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aerodromeRouter,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.usdc,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.usdt,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.weth,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for NetworkConfig {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for NetworkConfig {
            const NAME: &'static str = "NetworkConfig";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "NetworkConfig(uint256 deployerKey,address deployerAddress,address aaveLendingPool,address uniswapV2Router,address uniswapV3Factory,address uniswapV3Router,address aerodromeRouter,address usdc,address usdt,address weth)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.deployerKey)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.deployerAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.aaveLendingPool,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV2Router,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV3Factory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV3Router,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.aerodromeRouter,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.usdc,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.usdt,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.weth,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for NetworkConfig {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deployerKey,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deployerAddress,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.aaveLendingPool,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV2Router,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV3Factory,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV3Router,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.aerodromeRouter,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.usdc,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.usdt,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.weth,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deployerKey,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deployerAddress,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.aaveLendingPool,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV2Router,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV3Factory,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV3Router,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.aerodromeRouter,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.usdc,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.usdt,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.weth,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `activeNetworkConfig()` and selector `0xd7b65745`.
```solidity
function activeNetworkConfig() external view returns (uint256 deployerKey, address deployerAddress, address aaveLendingPool, address uniswapV2Router, address uniswapV3Factory, address uniswapV3Router, address aerodromeRouter, address usdc, address usdt, address weth);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activeNetworkConfigCall {}
    ///Container type for the return parameters of the [`activeNetworkConfig()`](activeNetworkConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activeNetworkConfigReturn {
        #[allow(missing_docs)]
        pub deployerKey: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deployerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub aaveLendingPool: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub uniswapV2Router: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub uniswapV3Factory: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub uniswapV3Router: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub aerodromeRouter: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub usdc: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub usdt: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub weth: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeNetworkConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: activeNetworkConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activeNetworkConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeNetworkConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activeNetworkConfigReturn) -> Self {
                    (
                        value.deployerKey,
                        value.deployerAddress,
                        value.aaveLendingPool,
                        value.uniswapV2Router,
                        value.uniswapV3Factory,
                        value.uniswapV3Router,
                        value.aerodromeRouter,
                        value.usdc,
                        value.usdt,
                        value.weth,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activeNetworkConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deployerKey: tuple.0,
                        deployerAddress: tuple.1,
                        aaveLendingPool: tuple.2,
                        uniswapV2Router: tuple.3,
                        uniswapV3Factory: tuple.4,
                        uniswapV3Router: tuple.5,
                        aerodromeRouter: tuple.6,
                        usdc: tuple.7,
                        usdt: tuple.8,
                        weth: tuple.9,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activeNetworkConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activeNetworkConfigReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activeNetworkConfig()";
            const SELECTOR: [u8; 4] = [215u8, 182u8, 87u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getActiveNetworkConfig()` and selector `0xa2d7c88e`.
```solidity
function getActiveNetworkConfig() external view returns (NetworkConfig memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveNetworkConfigCall {}
    ///Container type for the return parameters of the [`getActiveNetworkConfig()`](getActiveNetworkConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveNetworkConfigReturn {
        #[allow(missing_docs)]
        pub _0: <NetworkConfig as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveNetworkConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveNetworkConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveNetworkConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (NetworkConfig,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <NetworkConfig as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveNetworkConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveNetworkConfigReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveNetworkConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveNetworkConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getActiveNetworkConfigReturn;
            type ReturnTuple<'a> = (NetworkConfig,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveNetworkConfig()";
            const SELECTOR: [u8; 4] = [162u8, 215u8, 200u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAnvilChain()` and selector `0x612a8952`.
```solidity
function isAnvilChain() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAnvilChainCall {}
    ///Container type for the return parameters of the [`isAnvilChain()`](isAnvilChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAnvilChainReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAnvilChainCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAnvilChainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAnvilChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAnvilChainReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAnvilChainReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAnvilChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAnvilChainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAnvilChainReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAnvilChain()";
            const SELECTOR: [u8; 4] = [97u8, 42u8, 137u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`HelperConfig`](self) function calls.
    pub enum HelperConfigCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        activeNetworkConfig(activeNetworkConfigCall),
        #[allow(missing_docs)]
        getActiveNetworkConfig(getActiveNetworkConfigCall),
        #[allow(missing_docs)]
        isAnvilChain(isAnvilChainCall),
    }
    #[automatically_derived]
    impl HelperConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [97u8, 42u8, 137u8, 82u8],
            [162u8, 215u8, 200u8, 142u8],
            [215u8, 182u8, 87u8, 69u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HelperConfigCalls {
        const NAME: &'static str = "HelperConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activeNetworkConfig(_) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveNetworkConfig(_) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAnvilChain(_) => {
                    <isAnvilChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<HelperConfigCalls>] = &[
                {
                    fn isAnvilChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <isAnvilChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::isAnvilChain)
                    }
                    isAnvilChain
                },
                {
                    fn getActiveNetworkConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::getActiveNetworkConfig)
                    }
                    getActiveNetworkConfig
                },
                {
                    fn activeNetworkConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::activeNetworkConfig)
                    }
                    activeNetworkConfig
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::activeNetworkConfig(inner) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveNetworkConfig(inner) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAnvilChain(inner) => {
                    <isAnvilChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activeNetworkConfig(inner) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveNetworkConfig(inner) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAnvilChain(inner) => {
                    <isAnvilChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HelperConfig`](self) contract instance.

See the [wrapper's documentation](`HelperConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> HelperConfigInstance<T, P, N> {
        HelperConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HelperConfigInstance<T, P, N>>,
    > {
        HelperConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        HelperConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`HelperConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HelperConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HelperConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for HelperConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HelperConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`HelperConfig`](self) contract instance.

See the [wrapper's documentation](`HelperConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<HelperConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> HelperConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> HelperConfigInstance<T, P, N> {
            HelperConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`activeNetworkConfig`] function.
        pub fn activeNetworkConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, activeNetworkConfigCall, N> {
            self.call_builder(&activeNetworkConfigCall {})
        }
        ///Creates a new call builder for the [`getActiveNetworkConfig`] function.
        pub fn getActiveNetworkConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getActiveNetworkConfigCall, N> {
            self.call_builder(&getActiveNetworkConfigCall {})
        }
        ///Creates a new call builder for the [`isAnvilChain`] function.
        pub fn isAnvilChain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAnvilChainCall, N> {
            self.call_builder(&isAnvilChainCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
