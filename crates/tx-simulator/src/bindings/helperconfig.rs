/**

Generated by the following Solidity interface...
```solidity
interface HelperConfig {
    struct NetworkConfig {
        uint256 deployerKey;
        address deployerAddress;
        address aaveLendingPool;
        address uniswapV2Router;
        address uniswapV3Factory;
        address uniswapV3Router;
        address aerodromeRouter;
        address usdc;
        address usdt;
        address weth;
    }

    constructor();

    function IS_SCRIPT() external view returns (bool);
    function activeNetworkConfig() external view returns (uint256 deployerKey, address deployerAddress, address aaveLendingPool, address uniswapV2Router, address uniswapV3Factory, address uniswapV3Router, address aerodromeRouter, address usdc, address usdt, address weth);
    function getActiveNetworkConfig() external view returns (NetworkConfig memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "activeNetworkConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "deployerKey",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deployerAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "aaveLendingPool",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV2Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV3Factory",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "aerodromeRouter",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "usdc",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "usdt",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "weth",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveNetworkConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct HelperConfig.NetworkConfig",
        "components": [
          {
            "name": "deployerKey",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deployerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "aaveLendingPool",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV2Router",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV3Factory",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV3Router",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "aerodromeRouter",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "usdc",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "usdt",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "weth",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod HelperConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346109f557600080916201000162ff00ff19600c541617600c5563f82c50f160e01b602082015246602482015260248152610041604482610ba8565b6020815191016a636f6e736f6c652e6c6f675afa506000604051637ed1ec7d60e01b81526020600482015260096024820152681554d157d05395925360ba1b6044820152602081606481600080516020610eea8339815191525afa908115610b81578291610b42575b5015610a2e5750604080519081016001600160401b03811182821017610a1857604052600e81526d105b9d9a5b0819195d1958dd195960921b60208201526040519063104c13eb60e21b60208301526020602483015280519081604484015260005b828110610a0257505081610140606482846000838198978298010152601f801991011681010301601f198101835282610ba8565b6020815191016a636f6e736f6c652e6c6f675afa5060405163c1978d1f60e01b8152602060048201819052601560248301527f414e56494c5f4445565f505249564154455f4b45590000000000000000000000604483015281606481600080516020610eea8339815191525afa908115610488576000916109cb575b5060405163350d56bf60e01b81526020600482018190526011602483015270414e56494c5f4445565f4144445245535360781b604483015281606481600080516020610eea8339815191525afa8015610488576109ac575b505b61a4b1461480156109a1575b15610494576040516001625e79b760e01b031981526004810182905290602082602481600080516020610eea8339815191525afa9081156104885761036192600092610457575b507382af49447d8a07e3bd95bd0d56f35241523fbab16101206040519361028f85610b8c565b8385526001600160a01b03166020850181905273794a61358d6845594f94dc1db02a252b5b4814ad6040860152731b02da8cb0d097eb8d57a175b88c7d8b479975066060860152731f98431c8ad98523631ae4a59f267346ea31f98460808601527368b3465833fb72a70ecdf485e0e4c7bd8665fc4560a0860152600060c086015273af88d065e77c8cc2239327c5edb3a432268e583160e086015273fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9610100860152930152600d55600e80546001600160a01b0319169091179055565b600f80546001600160a01b031990811673794a61358d6845594f94dc1db02a252b5b4814ad17909155601080548216731b02da8cb0d097eb8d57a175b88c7d8b47997506179055601180548216731f98431c8ad98523631ae4a59f267346ea31f9841790556012805482167368b3465833fb72a70ecdf485e0e4c7bd8665fc45179055601380548216905560148054821673af88d065e77c8cc2239327c5edb3a432268e583117905560158054821673fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9179055601680549091167382af49447d8a07e3bd95bd0d56f35241523fbab11790555b6040516102ff9081610beb8239f35b61047a91925060203d602011610481575b6104728183610ba8565b810190610bcb565b9038610269565b503d610468565b6040513d6000823e3d90fd5b466121050361070c576040516001625e79b760e01b031981526004810182905290602082602481600080516020610eea8339815191525afa908115610488576105ea926000926106eb575b507342000000000000000000000000000000000000066101206040519361050585610b8c565b8385526001600160a01b03166020850181905273794a61358d6845594f94dc1db02a252b5b4814ad6040860152734752ba5dbc23f44d87826276bf6fd6b1c372ad2460608601527333128a8fc17869897dce68ed026d694621f6fdfd6080860152732626664c2603336e57b271c5c0b26f421741e48160a086015273cf77a3ba9a5ca399b7c97c74d54e5b1beb874e4360c086015273833589fcd6edb6e08f4c7c32d4f71b54bda0291360e086015273fde4c96c8593536e31f229ea8f37b2ada2699bb2610100860152930152600d55600e80546001600160a01b0319169091179055565b600f80546001600160a01b031990811673794a61358d6845594f94dc1db02a252b5b4814ad17909155601080548216734752ba5dbc23f44d87826276bf6fd6b1c372ad241790556011805482167333128a8fc17869897dce68ed026d694621f6fdfd179055601280548216732626664c2603336e57b271c5c0b26f421741e48117905560138054821673cf77a3ba9a5ca399b7c97c74d54e5b1beb874e4317905560148054821673833589fcd6edb6e08f4c7c32d4f71b54bda0291317905560158054821673fde4c96c8593536e31f229ea8f37b2ada2699bb217905560168054909116734200000000000000000000000000000000000006179055610448565b61070591925060203d602011610481576104728183610ba8565b90386104df565b4662aa36a70361095c576040516001625e79b760e01b031981526004810182905290602082602481600080516020610eea8339815191525afa908115610488576108509260009261093b575b5073c558dbdd856501fcd9aaf1e62eae57a9f0629a3c6101206040519361077e85610b8c565b8385526001600160a01b031660208501819052736ae43d3271ff6888e7fc43fd7321a503ff7389516040860152737a250d5630b4cf539739df2c5dacb4c659f2488d6060860152731f98431c8ad98523631ae4a59f267346ea31f984608086015273e592427a0aece92de3edee1f18e0157c0586156460a0860152600060c08601527394a9d9ac8a22534e3faca9f4e7f2e2cf85d5e4c860e086015273aa8e23fb1079ea71e0a56f48a2aa51851d8433d0610100860152930152600d55600e80546001600160a01b0319169091179055565b600f80546001600160a01b0319908116736ae43d3271ff6888e7fc43fd7321a503ff73895117909155601080548216737a250d5630b4cf539739df2c5dacb4c659f2488d179055601180548216731f98431c8ad98523631ae4a59f267346ea31f98417905560128054821673e592427a0aece92de3edee1f18e0157c0586156417905560138054821690556014805482167394a9d9ac8a22534e3faca9f4e7f2e2cf85d5e4c817905560158054821673aa8e23fb1079ea71e0a56f48a2aa51851d8433d01790556016805490911673c558dbdd856501fcd9aaf1e62eae57a9f0629a3c179055610448565b61095591925060203d602011610481576104728183610ba8565b9038610758565b60405162461bcd60e51b815260206004820152601360248201527f556e737570706f72746564206e6574776f726b000000000000000000000000006044820152606490fd5b50617a694614610222565b6109c49060203d602011610481576104728183610ba8565b5038610214565b90506020813d6020116109fa575b816109e660209383610ba8565b810103126109f55751386101bc565b600080fd5b3d91506109d9565b806020809284010151606482870101520161010c565b634e487b7160e01b600052604160045260246000fd5b60405163c1978d1f60e01b8152602060048201819052600f60248301526e4445565f505249564154455f4b455960881b604483015281606481600080516020610eea8339815191525afa918215610b36578092610afe575b505060405163350d56bf60e01b8152602060048201819052600b60248301526a4445565f4144445245535360a81b604483015281606481600080516020610eea8339815191525afa801561048857610adf575b50610216565b610af79060203d602011610481576104728183610ba8565b5038610ad9565b9091506020823d602011610b2e575b81610b1a60209383610ba8565b81010312610b2b5750513880610a86565b80fd5b3d9150610b0d565b604051903d90823e3d90fd5b90506020813d602011610b79575b81610b5d60209383610ba8565b81010312610b7557518015158103610b7557386100aa565b5080fd5b3d9150610b50565b6040513d84823e3d90fd5b61014081019081106001600160401b03821117610a1857604052565b601f909101601f19168101906001600160401b03821190821017610a1857604052565b908160209103126109f557516001600160a01b03811681036109f5579056fe6080604052600436101561001257600080fd5b60003560e01c8063a2d7c88e146100f3578063d7b65745146100685763f8ccbf471461003d57600080fd5b3461006357600036600319011261006357602060ff600c5460101c166040519015158152f35b600080fd5b3461006357600036600319011261006357600d54600e54600f54601054601154601254601354601454601554601654604080519a8b526001600160a01b03998a1660208c0152978916978a01979097529487166060890152928616608088015290851660a0870152841660c0860152831660e085015282166101008401521661012082015261014090f35b34610063576000366003190112610063576000610120610111610292565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152610140610152610292565b600d549081815260018060a01b03600e54166020820190815260018060a01b03600f54166040830190815260018060a01b03601054166060840190815260018060a01b03601154166080850190815260018060a01b03601254169060a0860191825260018060a01b03601354169260c0870193845260018060a01b03601454169460e0880195865260018060a01b036015541696610100890197885261012060018060a01b03601654169901988952604051998a5260018060a01b0390511660208a015260018060a01b03905116604089015260018060a01b03905116606088015260018060a01b03905116608087015260018060a01b0390511660a086015260018060a01b0390511660c085015260018060a01b0390511660e084015260018060a01b0390511661010083015260018060a01b03905116610120820152f35b60405190610140820182811067ffffffffffffffff8211176102b357604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e6b54090b07dfaed192c51f571e499a8ab5863334217742c240260922ad5f1df64736f6c634300081a00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4a\t\xF5W`\0\x80\x91b\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUc\xF8,P\xF1`\xE0\x1B` \x82\x01RF`$\x82\x01R`$\x81Ra\0A`D\x82a\x0B\xA8V[` \x81Q\x91\x01jconsole.logZ\xFAP`\0`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\t`$\x82\x01Rh\x15T\xD1W\xD0S\x95\x92S`\xBA\x1B`D\x82\x01R` \x81`d\x81`\0\x80Q` a\x0E\xEA\x839\x81Q\x91RZ\xFA\x90\x81\x15a\x0B\x81W\x82\x91a\x0BBW[P\x15a\n.WP`@\x80Q\x90\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17a\n\x18W`@R`\x0E\x81Rm\x10[\x9D\x9A[\x08\x19\x19]\x19X\xDD\x19Y`\x92\x1B` \x82\x01R`@Q\x90c\x10L\x13\xEB`\xE2\x1B` \x83\x01R` `$\x83\x01R\x80Q\x90\x81`D\x84\x01R`\0[\x82\x81\x10a\n\x02WPP\x81a\x01@`d\x82\x84`\0\x83\x81\x98\x97\x82\x98\x01\x01R`\x1F\x80\x19\x91\x01\x16\x81\x01\x03\x01`\x1F\x19\x81\x01\x83R\x82a\x0B\xA8V[` \x81Q\x91\x01jconsole.logZ\xFAP`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`\x15`$\x83\x01R\x7FANVIL_DEV_PRIVATE_KEY\0\0\0\0\0\0\0\0\0\0\0`D\x83\x01R\x81`d\x81`\0\x80Q` a\x0E\xEA\x839\x81Q\x91RZ\xFA\x90\x81\x15a\x04\x88W`\0\x91a\t\xCBW[P`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`\x11`$\x83\x01RpANVIL_DEV_ADDRESS`x\x1B`D\x83\x01R\x81`d\x81`\0\x80Q` a\x0E\xEA\x839\x81Q\x91RZ\xFA\x80\x15a\x04\x88Wa\t\xACW[P[a\xA4\xB1F\x14\x80\x15a\t\xA1W[\x15a\x04\x94W`@Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x82\x90R\x90` \x82`$\x81`\0\x80Q` a\x0E\xEA\x839\x81Q\x91RZ\xFA\x90\x81\x15a\x04\x88Wa\x03a\x92`\0\x92a\x04WW[Ps\x82\xAFID}\x8A\x07\xE3\xBD\x95\xBD\rV\xF3RAR?\xBA\xB1a\x01 `@Q\x93a\x02\x8F\x85a\x0B\x8CV[\x83\x85R`\x01`\x01`\xA0\x1B\x03\x16` \x85\x01\x81\x90RsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD`@\x86\x01Rs\x1B\x02\xDA\x8C\xB0\xD0\x97\xEB\x8DW\xA1u\xB8\x8C}\x8BG\x99u\x06``\x86\x01Rs\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84`\x80\x86\x01Rsh\xB3FX3\xFBr\xA7\x0E\xCD\xF4\x85\xE0\xE4\xC7\xBD\x86e\xFCE`\xA0\x86\x01R`\0`\xC0\x86\x01Rs\xAF\x88\xD0e\xE7|\x8C\xC2#\x93'\xC5\xED\xB3\xA42&\x8EX1`\xE0\x86\x01Rs\xFD\x08k\xC7\xCD\\H\x1D\xCC\x9C\x85\xEB\xE4x\xA1\xC0\xB6\x9F\xCB\xB9a\x01\0\x86\x01R\x93\x01R`\rU`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90\x91\x17\x90UV[`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16syJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD\x17\x90\x91U`\x10\x80T\x82\x16s\x1B\x02\xDA\x8C\xB0\xD0\x97\xEB\x8DW\xA1u\xB8\x8C}\x8BG\x99u\x06\x17\x90U`\x11\x80T\x82\x16s\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84\x17\x90U`\x12\x80T\x82\x16sh\xB3FX3\xFBr\xA7\x0E\xCD\xF4\x85\xE0\xE4\xC7\xBD\x86e\xFCE\x17\x90U`\x13\x80T\x82\x16\x90U`\x14\x80T\x82\x16s\xAF\x88\xD0e\xE7|\x8C\xC2#\x93'\xC5\xED\xB3\xA42&\x8EX1\x17\x90U`\x15\x80T\x82\x16s\xFD\x08k\xC7\xCD\\H\x1D\xCC\x9C\x85\xEB\xE4x\xA1\xC0\xB6\x9F\xCB\xB9\x17\x90U`\x16\x80T\x90\x91\x16s\x82\xAFID}\x8A\x07\xE3\xBD\x95\xBD\rV\xF3RAR?\xBA\xB1\x17\x90U[`@Qa\x02\xFF\x90\x81a\x0B\xEB\x829\xF3[a\x04z\x91\x92P` =` \x11a\x04\x81W[a\x04r\x81\x83a\x0B\xA8V[\x81\x01\x90a\x0B\xCBV[\x908a\x02iV[P=a\x04hV[`@Q=`\0\x82>=\x90\xFD[Fa!\x05\x03a\x07\x0CW`@Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x82\x90R\x90` \x82`$\x81`\0\x80Q` a\x0E\xEA\x839\x81Q\x91RZ\xFA\x90\x81\x15a\x04\x88Wa\x05\xEA\x92`\0\x92a\x06\xEBW[PsB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06a\x01 `@Q\x93a\x05\x05\x85a\x0B\x8CV[\x83\x85R`\x01`\x01`\xA0\x1B\x03\x16` \x85\x01\x81\x90RsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD`@\x86\x01RsGR\xBA]\xBC#\xF4M\x87\x82bv\xBFo\xD6\xB1\xC3r\xAD$``\x86\x01Rs3\x12\x8A\x8F\xC1xi\x89}\xCEh\xED\x02miF!\xF6\xFD\xFD`\x80\x86\x01Rs&&fL&\x033nW\xB2q\xC5\xC0\xB2oB\x17A\xE4\x81`\xA0\x86\x01Rs\xCFw\xA3\xBA\x9A\\\xA3\x99\xB7\xC9|t\xD5N[\x1B\xEB\x87NC`\xC0\x86\x01Rs\x835\x89\xFC\xD6\xED\xB6\xE0\x8FL|2\xD4\xF7\x1BT\xBD\xA0)\x13`\xE0\x86\x01Rs\xFD\xE4\xC9l\x85\x93Sn1\xF2)\xEA\x8F7\xB2\xAD\xA2i\x9B\xB2a\x01\0\x86\x01R\x93\x01R`\rU`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90\x91\x17\x90UV[`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16syJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD\x17\x90\x91U`\x10\x80T\x82\x16sGR\xBA]\xBC#\xF4M\x87\x82bv\xBFo\xD6\xB1\xC3r\xAD$\x17\x90U`\x11\x80T\x82\x16s3\x12\x8A\x8F\xC1xi\x89}\xCEh\xED\x02miF!\xF6\xFD\xFD\x17\x90U`\x12\x80T\x82\x16s&&fL&\x033nW\xB2q\xC5\xC0\xB2oB\x17A\xE4\x81\x17\x90U`\x13\x80T\x82\x16s\xCFw\xA3\xBA\x9A\\\xA3\x99\xB7\xC9|t\xD5N[\x1B\xEB\x87NC\x17\x90U`\x14\x80T\x82\x16s\x835\x89\xFC\xD6\xED\xB6\xE0\x8FL|2\xD4\xF7\x1BT\xBD\xA0)\x13\x17\x90U`\x15\x80T\x82\x16s\xFD\xE4\xC9l\x85\x93Sn1\xF2)\xEA\x8F7\xB2\xAD\xA2i\x9B\xB2\x17\x90U`\x16\x80T\x90\x91\x16sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\x17\x90Ua\x04HV[a\x07\x05\x91\x92P` =` \x11a\x04\x81Wa\x04r\x81\x83a\x0B\xA8V[\x908a\x04\xDFV[Fb\xAA6\xA7\x03a\t\\W`@Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x82\x90R\x90` \x82`$\x81`\0\x80Q` a\x0E\xEA\x839\x81Q\x91RZ\xFA\x90\x81\x15a\x04\x88Wa\x08P\x92`\0\x92a\t;W[Ps\xC5X\xDB\xDD\x85e\x01\xFC\xD9\xAA\xF1\xE6.\xAEW\xA9\xF0b\x9A<a\x01 `@Q\x93a\x07~\x85a\x0B\x8CV[\x83\x85R`\x01`\x01`\xA0\x1B\x03\x16` \x85\x01\x81\x90Rsj\xE4=2q\xFFh\x88\xE7\xFCC\xFDs!\xA5\x03\xFFs\x89Q`@\x86\x01Rsz%\rV0\xB4\xCFS\x979\xDF,]\xAC\xB4\xC6Y\xF2H\x8D``\x86\x01Rs\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84`\x80\x86\x01Rs\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d`\xA0\x86\x01R`\0`\xC0\x86\x01Rs\x94\xA9\xD9\xAC\x8A\"SN?\xAC\xA9\xF4\xE7\xF2\xE2\xCF\x85\xD5\xE4\xC8`\xE0\x86\x01Rs\xAA\x8E#\xFB\x10y\xEAq\xE0\xA5oH\xA2\xAAQ\x85\x1D\x843\xD0a\x01\0\x86\x01R\x93\x01R`\rU`\x0E\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90\x91\x17\x90UV[`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16sj\xE4=2q\xFFh\x88\xE7\xFCC\xFDs!\xA5\x03\xFFs\x89Q\x17\x90\x91U`\x10\x80T\x82\x16sz%\rV0\xB4\xCFS\x979\xDF,]\xAC\xB4\xC6Y\xF2H\x8D\x17\x90U`\x11\x80T\x82\x16s\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84\x17\x90U`\x12\x80T\x82\x16s\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d\x17\x90U`\x13\x80T\x82\x16\x90U`\x14\x80T\x82\x16s\x94\xA9\xD9\xAC\x8A\"SN?\xAC\xA9\xF4\xE7\xF2\xE2\xCF\x85\xD5\xE4\xC8\x17\x90U`\x15\x80T\x82\x16s\xAA\x8E#\xFB\x10y\xEAq\xE0\xA5oH\xA2\xAAQ\x85\x1D\x843\xD0\x17\x90U`\x16\x80T\x90\x91\x16s\xC5X\xDB\xDD\x85e\x01\xFC\xD9\xAA\xF1\xE6.\xAEW\xA9\xF0b\x9A<\x17\x90Ua\x04HV[a\tU\x91\x92P` =` \x11a\x04\x81Wa\x04r\x81\x83a\x0B\xA8V[\x908a\x07XV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUnsupported network\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[PaziF\x14a\x02\"V[a\t\xC4\x90` =` \x11a\x04\x81Wa\x04r\x81\x83a\x0B\xA8V[P8a\x02\x14V[\x90P` \x81=` \x11a\t\xFAW[\x81a\t\xE6` \x93\x83a\x0B\xA8V[\x81\x01\x03\x12a\t\xF5WQ8a\x01\xBCV[`\0\x80\xFD[=\x91Pa\t\xD9V[\x80` \x80\x92\x84\x01\x01Q`d\x82\x87\x01\x01R\x01a\x01\x0CV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`\x0F`$\x83\x01RnDEV_PRIVATE_KEY`\x88\x1B`D\x83\x01R\x81`d\x81`\0\x80Q` a\x0E\xEA\x839\x81Q\x91RZ\xFA\x91\x82\x15a\x0B6W\x80\x92a\n\xFEW[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`\x0B`$\x83\x01RjDEV_ADDRESS`\xA8\x1B`D\x83\x01R\x81`d\x81`\0\x80Q` a\x0E\xEA\x839\x81Q\x91RZ\xFA\x80\x15a\x04\x88Wa\n\xDFW[Pa\x02\x16V[a\n\xF7\x90` =` \x11a\x04\x81Wa\x04r\x81\x83a\x0B\xA8V[P8a\n\xD9V[\x90\x91P` \x82=` \x11a\x0B.W[\x81a\x0B\x1A` \x93\x83a\x0B\xA8V[\x81\x01\x03\x12a\x0B+WPQ8\x80a\n\x86V[\x80\xFD[=\x91Pa\x0B\rV[`@Q\x90=\x90\x82>=\x90\xFD[\x90P` \x81=` \x11a\x0ByW[\x81a\x0B]` \x93\x83a\x0B\xA8V[\x81\x01\x03\x12a\x0BuWQ\x80\x15\x15\x81\x03a\x0BuW8a\0\xAAV[P\x80\xFD[=\x91Pa\x0BPV[`@Q=\x84\x82>=\x90\xFD[a\x01@\x81\x01\x90\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17a\n\x18W`@RV[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\n\x18W`@RV[\x90\x81` \x91\x03\x12a\t\xF5WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\t\xF5W\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x12W`\0\x80\xFD[`\x005`\xE0\x1C\x80c\xA2\xD7\xC8\x8E\x14a\0\xF3W\x80c\xD7\xB6WE\x14a\0hWc\xF8\xCC\xBFG\x14a\0=W`\0\x80\xFD[4a\0cW`\x006`\x03\x19\x01\x12a\0cW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[`\0\x80\xFD[4a\0cW`\x006`\x03\x19\x01\x12a\0cW`\rT`\x0ET`\x0FT`\x10T`\x11T`\x12T`\x13T`\x14T`\x15T`\x16T`@\x80Q\x9A\x8BR`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16` \x8C\x01R\x97\x89\x16\x97\x8A\x01\x97\x90\x97R\x94\x87\x16``\x89\x01R\x92\x86\x16`\x80\x88\x01R\x90\x85\x16`\xA0\x87\x01R\x84\x16`\xC0\x86\x01R\x83\x16`\xE0\x85\x01R\x82\x16a\x01\0\x84\x01R\x16a\x01 \x82\x01Ra\x01@\x90\xF3[4a\0cW`\x006`\x03\x19\x01\x12a\0cW`\0a\x01 a\x01\x11a\x02\x92V[\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x82a\x01\0\x82\x01R\x01Ra\x01@a\x01Ra\x02\x92V[`\rT\x90\x81\x81R`\x01\x80`\xA0\x1B\x03`\x0ET\x16` \x82\x01\x90\x81R`\x01\x80`\xA0\x1B\x03`\x0FT\x16`@\x83\x01\x90\x81R`\x01\x80`\xA0\x1B\x03`\x10T\x16``\x84\x01\x90\x81R`\x01\x80`\xA0\x1B\x03`\x11T\x16`\x80\x85\x01\x90\x81R`\x01\x80`\xA0\x1B\x03`\x12T\x16\x90`\xA0\x86\x01\x91\x82R`\x01\x80`\xA0\x1B\x03`\x13T\x16\x92`\xC0\x87\x01\x93\x84R`\x01\x80`\xA0\x1B\x03`\x14T\x16\x94`\xE0\x88\x01\x95\x86R`\x01\x80`\xA0\x1B\x03`\x15T\x16\x96a\x01\0\x89\x01\x97\x88Ra\x01 `\x01\x80`\xA0\x1B\x03`\x16T\x16\x99\x01\x98\x89R`@Q\x99\x8AR`\x01\x80`\xA0\x1B\x03\x90Q\x16` \x8A\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`@\x89\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16``\x88\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`\x80\x87\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`\xA0\x86\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`\xC0\x85\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`\xE0\x84\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16a\x01\0\x83\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16a\x01 \x82\x01R\xF3[`@Q\x90a\x01@\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xB3W`@RV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \xE6\xB5@\x90\xB0}\xFA\xED\x19,Q\xF5q\xE4\x99\xA8\xABXc3B\x17t,$\x02`\x92*\xD5\xF1\xDFdsolcC\0\x08\x1A\x003\0\0\0\0\0\0\0\0\0\0\0\0q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436101561001257600080fd5b60003560e01c8063a2d7c88e146100f3578063d7b65745146100685763f8ccbf471461003d57600080fd5b3461006357600036600319011261006357602060ff600c5460101c166040519015158152f35b600080fd5b3461006357600036600319011261006357600d54600e54600f54601054601154601254601354601454601554601654604080519a8b526001600160a01b03998a1660208c0152978916978a01979097529487166060890152928616608088015290851660a0870152841660c0860152831660e085015282166101008401521661012082015261014090f35b34610063576000366003190112610063576000610120610111610292565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152610140610152610292565b600d549081815260018060a01b03600e54166020820190815260018060a01b03600f54166040830190815260018060a01b03601054166060840190815260018060a01b03601154166080850190815260018060a01b03601254169060a0860191825260018060a01b03601354169260c0870193845260018060a01b03601454169460e0880195865260018060a01b036015541696610100890197885261012060018060a01b03601654169901988952604051998a5260018060a01b0390511660208a015260018060a01b03905116604089015260018060a01b03905116606088015260018060a01b03905116608087015260018060a01b0390511660a086015260018060a01b0390511660c085015260018060a01b0390511660e084015260018060a01b0390511661010083015260018060a01b03905116610120820152f35b60405190610140820182811067ffffffffffffffff8211176102b357604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e6b54090b07dfaed192c51f571e499a8ab5863334217742c240260922ad5f1df64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x12W`\0\x80\xFD[`\x005`\xE0\x1C\x80c\xA2\xD7\xC8\x8E\x14a\0\xF3W\x80c\xD7\xB6WE\x14a\0hWc\xF8\xCC\xBFG\x14a\0=W`\0\x80\xFD[4a\0cW`\x006`\x03\x19\x01\x12a\0cW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[`\0\x80\xFD[4a\0cW`\x006`\x03\x19\x01\x12a\0cW`\rT`\x0ET`\x0FT`\x10T`\x11T`\x12T`\x13T`\x14T`\x15T`\x16T`@\x80Q\x9A\x8BR`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16` \x8C\x01R\x97\x89\x16\x97\x8A\x01\x97\x90\x97R\x94\x87\x16``\x89\x01R\x92\x86\x16`\x80\x88\x01R\x90\x85\x16`\xA0\x87\x01R\x84\x16`\xC0\x86\x01R\x83\x16`\xE0\x85\x01R\x82\x16a\x01\0\x84\x01R\x16a\x01 \x82\x01Ra\x01@\x90\xF3[4a\0cW`\x006`\x03\x19\x01\x12a\0cW`\0a\x01 a\x01\x11a\x02\x92V[\x82\x81R\x82` \x82\x01R\x82`@\x82\x01R\x82``\x82\x01R\x82`\x80\x82\x01R\x82`\xA0\x82\x01R\x82`\xC0\x82\x01R\x82`\xE0\x82\x01R\x82a\x01\0\x82\x01R\x01Ra\x01@a\x01Ra\x02\x92V[`\rT\x90\x81\x81R`\x01\x80`\xA0\x1B\x03`\x0ET\x16` \x82\x01\x90\x81R`\x01\x80`\xA0\x1B\x03`\x0FT\x16`@\x83\x01\x90\x81R`\x01\x80`\xA0\x1B\x03`\x10T\x16``\x84\x01\x90\x81R`\x01\x80`\xA0\x1B\x03`\x11T\x16`\x80\x85\x01\x90\x81R`\x01\x80`\xA0\x1B\x03`\x12T\x16\x90`\xA0\x86\x01\x91\x82R`\x01\x80`\xA0\x1B\x03`\x13T\x16\x92`\xC0\x87\x01\x93\x84R`\x01\x80`\xA0\x1B\x03`\x14T\x16\x94`\xE0\x88\x01\x95\x86R`\x01\x80`\xA0\x1B\x03`\x15T\x16\x96a\x01\0\x89\x01\x97\x88Ra\x01 `\x01\x80`\xA0\x1B\x03`\x16T\x16\x99\x01\x98\x89R`@Q\x99\x8AR`\x01\x80`\xA0\x1B\x03\x90Q\x16` \x8A\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`@\x89\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16``\x88\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`\x80\x87\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`\xA0\x86\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`\xC0\x85\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16`\xE0\x84\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16a\x01\0\x83\x01R`\x01\x80`\xA0\x1B\x03\x90Q\x16a\x01 \x82\x01R\xF3[`@Q\x90a\x01@\x82\x01\x82\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xB3W`@RV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \xE6\xB5@\x90\xB0}\xFA\xED\x19,Q\xF5q\xE4\x99\xA8\xABXc3B\x17t,$\x02`\x92*\xD5\xF1\xDFdsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct NetworkConfig { uint256 deployerKey; address deployerAddress; address aaveLendingPool; address uniswapV2Router; address uniswapV3Factory; address uniswapV3Router; address aerodromeRouter; address usdc; address usdt; address weth; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NetworkConfig {
        pub deployerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub deployerAddress: alloy::sol_types::private::Address,
        pub aaveLendingPool: alloy::sol_types::private::Address,
        pub uniswapV2Router: alloy::sol_types::private::Address,
        pub uniswapV3Factory: alloy::sol_types::private::Address,
        pub uniswapV3Router: alloy::sol_types::private::Address,
        pub aerodromeRouter: alloy::sol_types::private::Address,
        pub usdc: alloy::sol_types::private::Address,
        pub usdt: alloy::sol_types::private::Address,
        pub weth: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NetworkConfig> for UnderlyingRustTuple<'_> {
            fn from(value: NetworkConfig) -> Self {
                (
                    value.deployerKey,
                    value.deployerAddress,
                    value.aaveLendingPool,
                    value.uniswapV2Router,
                    value.uniswapV3Factory,
                    value.uniswapV3Router,
                    value.aerodromeRouter,
                    value.usdc,
                    value.usdt,
                    value.weth,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NetworkConfig {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    deployerKey: tuple.0,
                    deployerAddress: tuple.1,
                    aaveLendingPool: tuple.2,
                    uniswapV2Router: tuple.3,
                    uniswapV3Factory: tuple.4,
                    uniswapV3Router: tuple.5,
                    aerodromeRouter: tuple.6,
                    usdc: tuple.7,
                    usdt: tuple.8,
                    weth: tuple.9,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for NetworkConfig {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for NetworkConfig {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deployerKey),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.deployerAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aaveLendingPool,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV2Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV3Factory,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aerodromeRouter,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.usdc,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.usdt,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.weth,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for NetworkConfig {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for NetworkConfig {
            const NAME: &'static str = "NetworkConfig";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "NetworkConfig(uint256 deployerKey,address deployerAddress,address aaveLendingPool,address uniswapV2Router,address uniswapV3Factory,address uniswapV3Router,address aerodromeRouter,address usdc,address usdt,address weth)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.deployerKey)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.deployerAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.aaveLendingPool,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV2Router,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV3Factory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV3Router,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.aerodromeRouter,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.usdc,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.usdt,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.weth,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for NetworkConfig {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deployerKey,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deployerAddress,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.aaveLendingPool,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV2Router,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV3Factory,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV3Router,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.aerodromeRouter,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.usdc,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.usdt,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.weth,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deployerKey,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deployerAddress,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.aaveLendingPool,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV2Router,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV3Factory,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV3Router,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.aerodromeRouter,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.usdc,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.usdt,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.weth,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `activeNetworkConfig()` and selector `0xd7b65745`.
```solidity
function activeNetworkConfig() external view returns (uint256 deployerKey, address deployerAddress, address aaveLendingPool, address uniswapV2Router, address uniswapV3Factory, address uniswapV3Router, address aerodromeRouter, address usdc, address usdt, address weth);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct activeNetworkConfigCall {}
    ///Container type for the return parameters of the [`activeNetworkConfig()`](activeNetworkConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct activeNetworkConfigReturn {
        pub deployerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub deployerAddress: alloy::sol_types::private::Address,
        pub aaveLendingPool: alloy::sol_types::private::Address,
        pub uniswapV2Router: alloy::sol_types::private::Address,
        pub uniswapV3Factory: alloy::sol_types::private::Address,
        pub uniswapV3Router: alloy::sol_types::private::Address,
        pub aerodromeRouter: alloy::sol_types::private::Address,
        pub usdc: alloy::sol_types::private::Address,
        pub usdt: alloy::sol_types::private::Address,
        pub weth: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeNetworkConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: activeNetworkConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activeNetworkConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeNetworkConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activeNetworkConfigReturn) -> Self {
                    (
                        value.deployerKey,
                        value.deployerAddress,
                        value.aaveLendingPool,
                        value.uniswapV2Router,
                        value.uniswapV3Factory,
                        value.uniswapV3Router,
                        value.aerodromeRouter,
                        value.usdc,
                        value.usdt,
                        value.weth,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activeNetworkConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deployerKey: tuple.0,
                        deployerAddress: tuple.1,
                        aaveLendingPool: tuple.2,
                        uniswapV2Router: tuple.3,
                        uniswapV3Factory: tuple.4,
                        uniswapV3Router: tuple.5,
                        aerodromeRouter: tuple.6,
                        usdc: tuple.7,
                        usdt: tuple.8,
                        weth: tuple.9,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activeNetworkConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activeNetworkConfigReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activeNetworkConfig()";
            const SELECTOR: [u8; 4] = [215u8, 182u8, 87u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getActiveNetworkConfig()` and selector `0xa2d7c88e`.
```solidity
function getActiveNetworkConfig() external view returns (NetworkConfig memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getActiveNetworkConfigCall {}
    ///Container type for the return parameters of the [`getActiveNetworkConfig()`](getActiveNetworkConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getActiveNetworkConfigReturn {
        pub _0: <NetworkConfig as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveNetworkConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveNetworkConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveNetworkConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (NetworkConfig,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <NetworkConfig as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveNetworkConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveNetworkConfigReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveNetworkConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveNetworkConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getActiveNetworkConfigReturn;
            type ReturnTuple<'a> = (NetworkConfig,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveNetworkConfig()";
            const SELECTOR: [u8; 4] = [162u8, 215u8, 200u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`HelperConfig`](self) function calls.
    pub enum HelperConfigCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        activeNetworkConfig(activeNetworkConfigCall),
        getActiveNetworkConfig(getActiveNetworkConfigCall),
    }
    #[automatically_derived]
    impl HelperConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [162u8, 215u8, 200u8, 142u8],
            [215u8, 182u8, 87u8, 69u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HelperConfigCalls {
        const NAME: &'static str = "HelperConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activeNetworkConfig(_) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveNetworkConfig(_) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<HelperConfigCalls>] = &[
                {
                    fn getActiveNetworkConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::getActiveNetworkConfig)
                    }
                    getActiveNetworkConfig
                },
                {
                    fn activeNetworkConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::activeNetworkConfig)
                    }
                    activeNetworkConfig
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::activeNetworkConfig(inner) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveNetworkConfig(inner) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activeNetworkConfig(inner) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveNetworkConfig(inner) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HelperConfig`](self) contract instance.

See the [wrapper's documentation](`HelperConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> HelperConfigInstance<T, P, N> {
        HelperConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HelperConfigInstance<T, P, N>>,
    > {
        HelperConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        HelperConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`HelperConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HelperConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HelperConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for HelperConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HelperConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`HelperConfig`](self) contract instance.

See the [wrapper's documentation](`HelperConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<HelperConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> HelperConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> HelperConfigInstance<T, P, N> {
            HelperConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`activeNetworkConfig`] function.
        pub fn activeNetworkConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, activeNetworkConfigCall, N> {
            self.call_builder(&activeNetworkConfigCall {})
        }
        ///Creates a new call builder for the [`getActiveNetworkConfig`] function.
        pub fn getActiveNetworkConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getActiveNetworkConfigCall, N> {
            self.call_builder(&getActiveNetworkConfigCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
