/**

Generated by the following Solidity interface...
```solidity
interface TxSimulator {
    struct SwapParams {
        uint8 protocol;
        address handler;
        address tokenIn;
        address tokenOut;
        uint24 fee;
        uint256 amount;
        bool stable;
        address factory;
    }

    constructor();

    function simulateAeroSwapIn(SwapParams memory params) external returns (uint256 amountOut);
    function simulateCurveSwapIn(SwapParams memory params) external returns (uint256 amountOut);
    function simulateSwapIn(SwapParams[] memory paramsArray) external returns (uint256);
    function simulateUniswapV2SwapIn(SwapParams memory params) external view returns (uint256 amountOut);
    function simulateUniswapV3SwapIn(SwapParams memory params) external returns (uint256 amountOut);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simulateAeroSwapIn",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct TxSimulator.SwapParams",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simulateCurveSwapIn",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct TxSimulator.SwapParams",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simulateSwapIn",
    "inputs": [
      {
        "name": "paramsArray",
        "type": "tuple[]",
        "internalType": "struct TxSimulator.SwapParams[]",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simulateUniswapV2SwapIn",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct TxSimulator.SwapParams",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "simulateUniswapV3SwapIn",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct TxSimulator.SwapParams",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod TxSimulator {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60808060405234601557610e72908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806312c0c3681461034e5780636a1ad1af146103295780636dabe38014610304578063933d4379146102d75763b5c983ac1461005357600080fd5b346102d25760203660031901126102d25760043567ffffffffffffffff81116102d257366023820112156102d257806004013567ffffffffffffffff81116102d2573660248260081b840101116102d2576000805b828210156102c75760008260081b850161010060231982360301126102c357604051926100d484610373565b602482013560ff811681036102bf5784526100f1604483016103c8565b6020850152610102606483016103c8565b6040850152610113608483016103c8565b606085015260a482013562ffffff811681036102bf57608085015260a084019160c4810135835260e481013580151581036102bb5760c086015261015a90610104016103c8565b60e0850152806102b35750515b825160ff16806101885750505061017f600191610859565b915b01906100a8565b600181036101a45750505061019e600191610c12565b91610181565b600281036102885750506040516040810181811067ffffffffffffffff82111761027457604052601381527239b4b6bab630ba32a1bab93b32a9bbb0b824b760691b6020820152604051602081019163104c13eb60e21b835260206024830152805190816044840152845b82811061025e57505092600194928261024860648288868361019e9b829a010152601f801991011681010301601f1981018352826103a6565b51906a636f6e736f6c652e6c6f675afa50610707565b806020809284010151606482870101520161020f565b634e487b7160e01b83526041600452602483fd5b600391949392501461029e575b50600190610181565b60019192506102ac906104b8565b9190610295565b809152610167565b8480fd5b8380fd5b5080fd5b602090604051908152f35b600080fd5b346102d2576101003660031901126102d25760206102fc6102f7366103dc565b610c12565b604051908152f35b346102d2576101003660031901126102d25760206102fc610324366103dc565b610859565b346102d2576101003660031901126102d25760206102fc610349366103dc565b610707565b346102d2576101003660031901126102d25760206102fc61036e366103dc565b6104b8565b610100810190811067ffffffffffffffff82111761039057604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761039057604052565b35906001600160a01b03821682036102d257565b6101009060031901126102d257604051906103f682610373565b8160043560ff811681036102d25781526024356001600160a01b03811681036102d25760208201526044356001600160a01b03811681036102d25760408201526064356001600160a01b03811681036102d257606082015260843562ffffff811681036102d257608082015260a43560a082015260c43580151581036102d25760c082015260e435906001600160a01b03821682036102d25760e00152565b8051156104a25760200190565b634e487b7160e01b600052603260045260246000fd5b602081015160408051909290916001600160a01b0316906104d984846103a6565b60018352601f19840160005b8181106106c45750508381015160a091906001600160a01b031661050885610495565b5152600180831b03606082015116602061052186610495565b51015260c081015115158561053586610495565b510152600180831b0360e082015116606061054f86610495565b51015201518351928391631542686b60e21b835260448301906004840152856024840152815180915260206064840192019060005b8181106106785750505091818060009403915afa90811561066d576000916105b7575b508051600110156104a257015190565b3d8083833e6105c681836103a6565b8101906020818303126106695780519067ffffffffffffffff82116102bf57019181601f840112156106525782519267ffffffffffffffff8411610655578360051b91602083019461061a875196876103a6565b85526020808601938301019384116106525750602001905b82821061064257505050386105a7565b8151815260209182019101610632565b80fd5b634e487b7160e01b82526041600452602482fd5b8280fd5b82513d6000823e3d90fd5b825180516001600160a01b0390811686526020828101518216818801528a83015115158b8801526060928301519091169186019190915287955060809094019390920191600101610584565b855190608082019180831067ffffffffffffffff8411176103905760209288526000815260008382015260008882015260006060820152828288010152016104e5565b60208101516001600160a01b0316600080805b82821461079f575b5060649060a060209495015194604051958694859363556d6e9f60e01b85526004850152602484015260448301525afa90811561079357600091610764575090565b90506020813d60201161078b575b8161077f602093836103a6565b810103126102d2575190565b3d9150610772565b6040513d6000823e3d90fd5b60405163c661065760e01b815260048101829052602081602481885afa90811561079357600091610818575b5060408601516001600160a01b03918216911681036107fd57509050805b8282036107f85760010161071a565b610722565b60608601516001600160a01b0316036107e9579150816107e9565b6020813d8211610851575b81610830602093836103a6565b810103126102c35751906001600160a01b03821682036106525750386107cb565b3d9150610823565b602081015160408201516060808401516001600160a01b03908116936000936004939216919061089461088c8785610d6d565b509684610d6d565b60405191841b6bffffffffffffffffffffffff199081166020840190815291851b16603483015260288252906108cb6048826103a6565b5190209060405191602083019160ff60f81b83526bffffffffffffffffffffffff1990851b16602184015260358301527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f6055830152605582526109306075836103a6565b90519020604051630240bc6b60e21b815293849182906001600160a01b03165afa918215610bf65783908493610b98575b506001600160701b03928316949216916001600160a01b031603610b8f5760a09092935b0151918215610b3657801592831580610b2d575b15610ad7576103e58102928184046103e503610a995750806103e5840403610a5d576000948015918215610aad575b505015610a5d5760006103e88202938285046103e8141715610a9957506103e8830403610a5d57810190818111610a47578110610a0b57610a0891610d4d565b90565b60405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606490fd5b634e487b7160e01b81526011600452602490fd5b81026103e50295509050821583860482141715610a4757610acf839186610d4d565b1438806109c8565b60405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b6064820152608490fd5b50841515610999565b60405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b6064820152608490fd5b9260a090610985565b9250506060823d606011610bee575b81610bb4606093836103a6565b81010312610669576001600160701b0380610bce84610d39565b610be66040610bdf60208801610d39565b9601610c01565b509150610961565b3d9150610ba7565b6040513d85823e3d90fd5b519063ffffffff821682036102d257565b6020810151604051906001600160a01b031660a0820167ffffffffffffffff811183821017610390576040908152600080845260208401818152828501828152606080870184815260808881018681528a8801516001600160a01b039081168b52938b01518416865260a08b015185529981015162ffffff90811683529651636352813560e11b81529851831660048a0152935182166024890152915160448801529051909316606486015294519091166084840152919291839160a49183915af190811561079357600091610ce6575090565b6080813d608011610d31575b81610cff608093836103a6565b810103126102c357805160208201519092906001600160a01b0381160361065257506040610d2d9101610c01565b5090565b3d9150610cf2565b51906001600160701b03821682036102d257565b8115610d57570490565b634e487b7160e01b600052601260045260246000fd5b9091906001600160a01b03808416908216808214610de9571015610de457915b906001600160a01b03831615610d9f57565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b610d8d565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608490fdfea26469706673582212202ed455f720e60ca5aa6281e8684dbbfde4b7f5c133184a7535a584cf663499af64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x0Er\x90\x81a\0\x1B\x829\xF3[`\0\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x12W`\0\x80\xFD[`\x005`\xE0\x1C\x80c\x12\xC0\xC3h\x14a\x03NW\x80cj\x1A\xD1\xAF\x14a\x03)W\x80cm\xAB\xE3\x80\x14a\x03\x04W\x80c\x93=Cy\x14a\x02\xD7Wc\xB5\xC9\x83\xAC\x14a\0SW`\0\x80\xFD[4a\x02\xD2W` 6`\x03\x19\x01\x12a\x02\xD2W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xD2W6`#\x82\x01\x12\x15a\x02\xD2W\x80`\x04\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xD2W6`$\x82`\x08\x1B\x84\x01\x01\x11a\x02\xD2W`\0\x80[\x82\x82\x10\x15a\x02\xC7W`\0\x82`\x08\x1B\x85\x01a\x01\0`#\x19\x826\x03\x01\x12a\x02\xC3W`@Q\x92a\0\xD4\x84a\x03sV[`$\x82\x015`\xFF\x81\x16\x81\x03a\x02\xBFW\x84Ra\0\xF1`D\x83\x01a\x03\xC8V[` \x85\x01Ra\x01\x02`d\x83\x01a\x03\xC8V[`@\x85\x01Ra\x01\x13`\x84\x83\x01a\x03\xC8V[``\x85\x01R`\xA4\x82\x015b\xFF\xFF\xFF\x81\x16\x81\x03a\x02\xBFW`\x80\x85\x01R`\xA0\x84\x01\x91`\xC4\x81\x015\x83R`\xE4\x81\x015\x80\x15\x15\x81\x03a\x02\xBBW`\xC0\x86\x01Ra\x01Z\x90a\x01\x04\x01a\x03\xC8V[`\xE0\x85\x01R\x80a\x02\xB3WPQ[\x82Q`\xFF\x16\x80a\x01\x88WPPPa\x01\x7F`\x01\x91a\x08YV[\x91[\x01\x90a\0\xA8V[`\x01\x81\x03a\x01\xA4WPPPa\x01\x9E`\x01\x91a\x0C\x12V[\x91a\x01\x81V[`\x02\x81\x03a\x02\x88WPP`@Q`@\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02tW`@R`\x13\x81Rr9\xB4\xB6\xBA\xB60\xBA2\xA1\xBA\xB9;2\xA9\xBB\xB0\xB8$\xB7`i\x1B` \x82\x01R`@Q` \x81\x01\x91c\x10L\x13\xEB`\xE2\x1B\x83R` `$\x83\x01R\x80Q\x90\x81`D\x84\x01R\x84[\x82\x81\x10a\x02^WPP\x92`\x01\x94\x92\x82a\x02H`d\x82\x88\x86\x83a\x01\x9E\x9B\x82\x9A\x01\x01R`\x1F\x80\x19\x91\x01\x16\x81\x01\x03\x01`\x1F\x19\x81\x01\x83R\x82a\x03\xA6V[Q\x90jconsole.logZ\xFAPa\x07\x07V[\x80` \x80\x92\x84\x01\x01Q`d\x82\x87\x01\x01R\x01a\x02\x0FV[cNH{q`\xE0\x1B\x83R`A`\x04R`$\x83\xFD[`\x03\x91\x94\x93\x92P\x14a\x02\x9EW[P`\x01\x90a\x01\x81V[`\x01\x91\x92Pa\x02\xAC\x90a\x04\xB8V[\x91\x90a\x02\x95V[\x80\x91Ra\x01gV[\x84\x80\xFD[\x83\x80\xFD[P\x80\xFD[` \x90`@Q\x90\x81R\xF3[`\0\x80\xFD[4a\x02\xD2Wa\x01\x006`\x03\x19\x01\x12a\x02\xD2W` a\x02\xFCa\x02\xF76a\x03\xDCV[a\x0C\x12V[`@Q\x90\x81R\xF3[4a\x02\xD2Wa\x01\x006`\x03\x19\x01\x12a\x02\xD2W` a\x02\xFCa\x03$6a\x03\xDCV[a\x08YV[4a\x02\xD2Wa\x01\x006`\x03\x19\x01\x12a\x02\xD2W` a\x02\xFCa\x03I6a\x03\xDCV[a\x07\x07V[4a\x02\xD2Wa\x01\x006`\x03\x19\x01\x12a\x02\xD2W` a\x02\xFCa\x03n6a\x03\xDCV[a\x04\xB8V[a\x01\0\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\x90W`@RV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\x90W`@RV[5\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x02\xD2WV[a\x01\0\x90`\x03\x19\x01\x12a\x02\xD2W`@Q\x90a\x03\xF6\x82a\x03sV[\x81`\x045`\xFF\x81\x16\x81\x03a\x02\xD2W\x81R`$5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xD2W` \x82\x01R`D5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xD2W`@\x82\x01R`d5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xD2W``\x82\x01R`\x845b\xFF\xFF\xFF\x81\x16\x81\x03a\x02\xD2W`\x80\x82\x01R`\xA45`\xA0\x82\x01R`\xC45\x80\x15\x15\x81\x03a\x02\xD2W`\xC0\x82\x01R`\xE45\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x02\xD2W`\xE0\x01RV[\x80Q\x15a\x04\xA2W` \x01\x90V[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[` \x81\x01Q`@\x80Q\x90\x92\x90\x91`\x01`\x01`\xA0\x1B\x03\x16\x90a\x04\xD9\x84\x84a\x03\xA6V[`\x01\x83R`\x1F\x19\x84\x01`\0[\x81\x81\x10a\x06\xC4WPP\x83\x81\x01Q`\xA0\x91\x90`\x01`\x01`\xA0\x1B\x03\x16a\x05\x08\x85a\x04\x95V[QR`\x01\x80\x83\x1B\x03``\x82\x01Q\x16` a\x05!\x86a\x04\x95V[Q\x01R`\xC0\x81\x01Q\x15\x15\x85a\x055\x86a\x04\x95V[Q\x01R`\x01\x80\x83\x1B\x03`\xE0\x82\x01Q\x16``a\x05O\x86a\x04\x95V[Q\x01R\x01Q\x83Q\x92\x83\x91c\x15Bhk`\xE2\x1B\x83R`D\x83\x01\x90`\x04\x84\x01R\x85`$\x84\x01R\x81Q\x80\x91R` `d\x84\x01\x92\x01\x90`\0[\x81\x81\x10a\x06xWPPP\x91\x81\x80`\0\x94\x03\x91Z\xFA\x90\x81\x15a\x06mW`\0\x91a\x05\xB7W[P\x80Q`\x01\x10\x15a\x04\xA2W\x01Q\x90V[=\x80\x83\x83>a\x05\xC6\x81\x83a\x03\xA6V[\x81\x01\x90` \x81\x83\x03\x12a\x06iW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02\xBFW\x01\x91\x81`\x1F\x84\x01\x12\x15a\x06RW\x82Q\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11a\x06UW\x83`\x05\x1B\x91` \x83\x01\x94a\x06\x1A\x87Q\x96\x87a\x03\xA6V[\x85R` \x80\x86\x01\x93\x83\x01\x01\x93\x84\x11a\x06RWP` \x01\x90[\x82\x82\x10a\x06BWPPP8a\x05\xA7V[\x81Q\x81R` \x91\x82\x01\x91\x01a\x062V[\x80\xFD[cNH{q`\xE0\x1B\x82R`A`\x04R`$\x82\xFD[\x82\x80\xFD[\x82Q=`\0\x82>=\x90\xFD[\x82Q\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x86R` \x82\x81\x01Q\x82\x16\x81\x88\x01R\x8A\x83\x01Q\x15\x15\x8B\x88\x01R``\x92\x83\x01Q\x90\x91\x16\x91\x86\x01\x91\x90\x91R\x87\x95P`\x80\x90\x94\x01\x93\x90\x92\x01\x91`\x01\x01a\x05\x84V[\x85Q\x90`\x80\x82\x01\x91\x80\x83\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x17a\x03\x90W` \x92\x88R`\0\x81R`\0\x83\x82\x01R`\0\x88\x82\x01R`\0``\x82\x01R\x82\x82\x88\x01\x01R\x01a\x04\xE5V[` \x81\x01Q`\x01`\x01`\xA0\x1B\x03\x16`\0\x80\x80[\x82\x82\x14a\x07\x9FW[P`d\x90`\xA0` \x94\x95\x01Q\x94`@Q\x95\x86\x94\x85\x93cUmn\x9F`\xE0\x1B\x85R`\x04\x85\x01R`$\x84\x01R`D\x83\x01RZ\xFA\x90\x81\x15a\x07\x93W`\0\x91a\x07dWP\x90V[\x90P` \x81=` \x11a\x07\x8BW[\x81a\x07\x7F` \x93\x83a\x03\xA6V[\x81\x01\x03\x12a\x02\xD2WQ\x90V[=\x91Pa\x07rV[`@Q=`\0\x82>=\x90\xFD[`@Qc\xC6a\x06W`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R` \x81`$\x81\x88Z\xFA\x90\x81\x15a\x07\x93W`\0\x91a\x08\x18W[P`@\x86\x01Q`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x91\x16\x81\x03a\x07\xFDWP\x90P\x80[\x82\x82\x03a\x07\xF8W`\x01\x01a\x07\x1AV[a\x07\"V[``\x86\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x03a\x07\xE9W\x91P\x81a\x07\xE9V[` \x81=\x82\x11a\x08QW[\x81a\x080` \x93\x83a\x03\xA6V[\x81\x01\x03\x12a\x02\xC3WQ\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x06RWP8a\x07\xCBV[=\x91Pa\x08#V[` \x81\x01Q`@\x82\x01Q``\x80\x84\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x93`\0\x93`\x04\x93\x92\x16\x91\x90a\x08\x94a\x08\x8C\x87\x85a\rmV[P\x96\x84a\rmV[`@Q\x91\x84\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x81\x16` \x84\x01\x90\x81R\x91\x85\x1B\x16`4\x83\x01R`(\x82R\x90a\x08\xCB`H\x82a\x03\xA6V[Q\x90 \x90`@Q\x91` \x83\x01\x91`\xFF`\xF8\x1B\x83Rk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x85\x1B\x16`!\x84\x01R`5\x83\x01R\x7F\x96\xE8\xACBw\x19\x8F\xF8\xB6\xF7\x85G\x8A\xA9\xA3\x9F@<\xB7h\xDD\x02\xCB\xEE2l>}\xA3H\x84_`U\x83\x01R`U\x82Ra\t0`u\x83a\x03\xA6V[\x90Q\x90 `@Qc\x02@\xBCk`\xE2\x1B\x81R\x93\x84\x91\x82\x90`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x91\x82\x15a\x0B\xF6W\x83\x90\x84\x93a\x0B\x98W[P`\x01`\x01`p\x1B\x03\x92\x83\x16\x94\x92\x16\x91`\x01`\x01`\xA0\x1B\x03\x16\x03a\x0B\x8FW`\xA0\x90\x92\x93[\x01Q\x91\x82\x15a\x0B6W\x80\x15\x92\x83\x15\x80a\x0B-W[\x15a\n\xD7Wa\x03\xE5\x81\x02\x92\x81\x84\x04a\x03\xE5\x03a\n\x99WP\x80a\x03\xE5\x84\x04\x03a\n]W`\0\x94\x80\x15\x91\x82\x15a\n\xADW[PP\x15a\n]W`\0a\x03\xE8\x82\x02\x93\x82\x85\x04a\x03\xE8\x14\x17\x15a\n\x99WPa\x03\xE8\x83\x04\x03a\n]W\x81\x01\x90\x81\x81\x11a\nGW\x81\x10a\n\x0BWa\n\x08\x91a\rMV[\x90V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rsds-math-add-overflow``\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rsds-math-mul-overflow``\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B\x81R`\x11`\x04R`$\x90\xFD[\x81\x02a\x03\xE5\x02\x95P\x90P\x82\x15\x83\x86\x04\x82\x14\x17\x15a\nGWa\n\xCF\x83\x91\x86a\rMV[\x148\x80a\t\xC8V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FUniswapV2Library: INSUFFICIENT_L`D\x82\x01RgIQUIDITY`\xC0\x1B`d\x82\x01R`\x84\x90\xFD[P\x84\x15\x15a\t\x99V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FUniswapV2Library: INSUFFICIENT_I`D\x82\x01Rj\x13\x94\x15U\x17\xD0SS\xD5S\x95`\xAA\x1B`d\x82\x01R`\x84\x90\xFD[\x92`\xA0\x90a\t\x85V[\x92PP``\x82=``\x11a\x0B\xEEW[\x81a\x0B\xB4``\x93\x83a\x03\xA6V[\x81\x01\x03\x12a\x06iW`\x01`\x01`p\x1B\x03\x80a\x0B\xCE\x84a\r9V[a\x0B\xE6`@a\x0B\xDF` \x88\x01a\r9V[\x96\x01a\x0C\x01V[P\x91Pa\taV[=\x91Pa\x0B\xA7V[`@Q=\x85\x82>=\x90\xFD[Q\x90c\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\xD2WV[` \x81\x01Q`@Q\x90`\x01`\x01`\xA0\x1B\x03\x16`\xA0\x82\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x83\x82\x10\x17a\x03\x90W`@\x90\x81R`\0\x80\x84R` \x84\x01\x81\x81R\x82\x85\x01\x82\x81R``\x80\x87\x01\x84\x81R`\x80\x88\x81\x01\x86\x81R\x8A\x88\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x8BR\x93\x8B\x01Q\x84\x16\x86R`\xA0\x8B\x01Q\x85R\x99\x81\x01Qb\xFF\xFF\xFF\x90\x81\x16\x83R\x96QccR\x815`\xE1\x1B\x81R\x98Q\x83\x16`\x04\x8A\x01R\x93Q\x82\x16`$\x89\x01R\x91Q`D\x88\x01R\x90Q\x90\x93\x16`d\x86\x01R\x94Q\x90\x91\x16`\x84\x84\x01R\x91\x92\x91\x83\x91`\xA4\x91\x83\x91Z\xF1\x90\x81\x15a\x07\x93W`\0\x91a\x0C\xE6WP\x90V[`\x80\x81=`\x80\x11a\r1W[\x81a\x0C\xFF`\x80\x93\x83a\x03\xA6V[\x81\x01\x03\x12a\x02\xC3W\x80Q` \x82\x01Q\x90\x92\x90`\x01`\x01`\xA0\x1B\x03\x81\x16\x03a\x06RWP`@a\r-\x91\x01a\x0C\x01V[P\x90V[=\x91Pa\x0C\xF2V[Q\x90`\x01`\x01`p\x1B\x03\x82\x16\x82\x03a\x02\xD2WV[\x81\x15a\rWW\x04\x90V[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[\x90\x91\x90`\x01`\x01`\xA0\x1B\x03\x80\x84\x16\x90\x82\x16\x80\x82\x14a\r\xE9W\x10\x15a\r\xE4W\x91[\x90`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\r\x9FWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FUniswapV2Library: ZERO_ADDRESS\0\0`D\x82\x01R`d\x90\xFD[a\r\x8DV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FUniswapV2Library: IDENTICAL_ADDR`D\x82\x01RdESSES`\xD8\x1B`d\x82\x01R`\x84\x90\xFD\xFE\xA2dipfsX\"\x12 .\xD4U\xF7 \xE6\x0C\xA5\xAAb\x81\xE8hM\xBB\xFD\xE4\xB7\xF5\xC13\x18Ju5\xA5\x84\xCFf4\x99\xAFdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436101561001257600080fd5b60003560e01c806312c0c3681461034e5780636a1ad1af146103295780636dabe38014610304578063933d4379146102d75763b5c983ac1461005357600080fd5b346102d25760203660031901126102d25760043567ffffffffffffffff81116102d257366023820112156102d257806004013567ffffffffffffffff81116102d2573660248260081b840101116102d2576000805b828210156102c75760008260081b850161010060231982360301126102c357604051926100d484610373565b602482013560ff811681036102bf5784526100f1604483016103c8565b6020850152610102606483016103c8565b6040850152610113608483016103c8565b606085015260a482013562ffffff811681036102bf57608085015260a084019160c4810135835260e481013580151581036102bb5760c086015261015a90610104016103c8565b60e0850152806102b35750515b825160ff16806101885750505061017f600191610859565b915b01906100a8565b600181036101a45750505061019e600191610c12565b91610181565b600281036102885750506040516040810181811067ffffffffffffffff82111761027457604052601381527239b4b6bab630ba32a1bab93b32a9bbb0b824b760691b6020820152604051602081019163104c13eb60e21b835260206024830152805190816044840152845b82811061025e57505092600194928261024860648288868361019e9b829a010152601f801991011681010301601f1981018352826103a6565b51906a636f6e736f6c652e6c6f675afa50610707565b806020809284010151606482870101520161020f565b634e487b7160e01b83526041600452602483fd5b600391949392501461029e575b50600190610181565b60019192506102ac906104b8565b9190610295565b809152610167565b8480fd5b8380fd5b5080fd5b602090604051908152f35b600080fd5b346102d2576101003660031901126102d25760206102fc6102f7366103dc565b610c12565b604051908152f35b346102d2576101003660031901126102d25760206102fc610324366103dc565b610859565b346102d2576101003660031901126102d25760206102fc610349366103dc565b610707565b346102d2576101003660031901126102d25760206102fc61036e366103dc565b6104b8565b610100810190811067ffffffffffffffff82111761039057604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761039057604052565b35906001600160a01b03821682036102d257565b6101009060031901126102d257604051906103f682610373565b8160043560ff811681036102d25781526024356001600160a01b03811681036102d25760208201526044356001600160a01b03811681036102d25760408201526064356001600160a01b03811681036102d257606082015260843562ffffff811681036102d257608082015260a43560a082015260c43580151581036102d25760c082015260e435906001600160a01b03821682036102d25760e00152565b8051156104a25760200190565b634e487b7160e01b600052603260045260246000fd5b602081015160408051909290916001600160a01b0316906104d984846103a6565b60018352601f19840160005b8181106106c45750508381015160a091906001600160a01b031661050885610495565b5152600180831b03606082015116602061052186610495565b51015260c081015115158561053586610495565b510152600180831b0360e082015116606061054f86610495565b51015201518351928391631542686b60e21b835260448301906004840152856024840152815180915260206064840192019060005b8181106106785750505091818060009403915afa90811561066d576000916105b7575b508051600110156104a257015190565b3d8083833e6105c681836103a6565b8101906020818303126106695780519067ffffffffffffffff82116102bf57019181601f840112156106525782519267ffffffffffffffff8411610655578360051b91602083019461061a875196876103a6565b85526020808601938301019384116106525750602001905b82821061064257505050386105a7565b8151815260209182019101610632565b80fd5b634e487b7160e01b82526041600452602482fd5b8280fd5b82513d6000823e3d90fd5b825180516001600160a01b0390811686526020828101518216818801528a83015115158b8801526060928301519091169186019190915287955060809094019390920191600101610584565b855190608082019180831067ffffffffffffffff8411176103905760209288526000815260008382015260008882015260006060820152828288010152016104e5565b60208101516001600160a01b0316600080805b82821461079f575b5060649060a060209495015194604051958694859363556d6e9f60e01b85526004850152602484015260448301525afa90811561079357600091610764575090565b90506020813d60201161078b575b8161077f602093836103a6565b810103126102d2575190565b3d9150610772565b6040513d6000823e3d90fd5b60405163c661065760e01b815260048101829052602081602481885afa90811561079357600091610818575b5060408601516001600160a01b03918216911681036107fd57509050805b8282036107f85760010161071a565b610722565b60608601516001600160a01b0316036107e9579150816107e9565b6020813d8211610851575b81610830602093836103a6565b810103126102c35751906001600160a01b03821682036106525750386107cb565b3d9150610823565b602081015160408201516060808401516001600160a01b03908116936000936004939216919061089461088c8785610d6d565b509684610d6d565b60405191841b6bffffffffffffffffffffffff199081166020840190815291851b16603483015260288252906108cb6048826103a6565b5190209060405191602083019160ff60f81b83526bffffffffffffffffffffffff1990851b16602184015260358301527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f6055830152605582526109306075836103a6565b90519020604051630240bc6b60e21b815293849182906001600160a01b03165afa918215610bf65783908493610b98575b506001600160701b03928316949216916001600160a01b031603610b8f5760a09092935b0151918215610b3657801592831580610b2d575b15610ad7576103e58102928184046103e503610a995750806103e5840403610a5d576000948015918215610aad575b505015610a5d5760006103e88202938285046103e8141715610a9957506103e8830403610a5d57810190818111610a47578110610a0b57610a0891610d4d565b90565b60405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606490fd5b634e487b7160e01b81526011600452602490fd5b81026103e50295509050821583860482141715610a4757610acf839186610d4d565b1438806109c8565b60405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b6064820152608490fd5b50841515610999565b60405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b6064820152608490fd5b9260a090610985565b9250506060823d606011610bee575b81610bb4606093836103a6565b81010312610669576001600160701b0380610bce84610d39565b610be66040610bdf60208801610d39565b9601610c01565b509150610961565b3d9150610ba7565b6040513d85823e3d90fd5b519063ffffffff821682036102d257565b6020810151604051906001600160a01b031660a0820167ffffffffffffffff811183821017610390576040908152600080845260208401818152828501828152606080870184815260808881018681528a8801516001600160a01b039081168b52938b01518416865260a08b015185529981015162ffffff90811683529651636352813560e11b81529851831660048a0152935182166024890152915160448801529051909316606486015294519091166084840152919291839160a49183915af190811561079357600091610ce6575090565b6080813d608011610d31575b81610cff608093836103a6565b810103126102c357805160208201519092906001600160a01b0381160361065257506040610d2d9101610c01565b5090565b3d9150610cf2565b51906001600160701b03821682036102d257565b8115610d57570490565b634e487b7160e01b600052601260045260246000fd5b9091906001600160a01b03808416908216808214610de9571015610de457915b906001600160a01b03831615610d9f57565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b610d8d565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608490fdfea26469706673582212202ed455f720e60ca5aa6281e8684dbbfde4b7f5c133184a7535a584cf663499af64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x12W`\0\x80\xFD[`\x005`\xE0\x1C\x80c\x12\xC0\xC3h\x14a\x03NW\x80cj\x1A\xD1\xAF\x14a\x03)W\x80cm\xAB\xE3\x80\x14a\x03\x04W\x80c\x93=Cy\x14a\x02\xD7Wc\xB5\xC9\x83\xAC\x14a\0SW`\0\x80\xFD[4a\x02\xD2W` 6`\x03\x19\x01\x12a\x02\xD2W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xD2W6`#\x82\x01\x12\x15a\x02\xD2W\x80`\x04\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xD2W6`$\x82`\x08\x1B\x84\x01\x01\x11a\x02\xD2W`\0\x80[\x82\x82\x10\x15a\x02\xC7W`\0\x82`\x08\x1B\x85\x01a\x01\0`#\x19\x826\x03\x01\x12a\x02\xC3W`@Q\x92a\0\xD4\x84a\x03sV[`$\x82\x015`\xFF\x81\x16\x81\x03a\x02\xBFW\x84Ra\0\xF1`D\x83\x01a\x03\xC8V[` \x85\x01Ra\x01\x02`d\x83\x01a\x03\xC8V[`@\x85\x01Ra\x01\x13`\x84\x83\x01a\x03\xC8V[``\x85\x01R`\xA4\x82\x015b\xFF\xFF\xFF\x81\x16\x81\x03a\x02\xBFW`\x80\x85\x01R`\xA0\x84\x01\x91`\xC4\x81\x015\x83R`\xE4\x81\x015\x80\x15\x15\x81\x03a\x02\xBBW`\xC0\x86\x01Ra\x01Z\x90a\x01\x04\x01a\x03\xC8V[`\xE0\x85\x01R\x80a\x02\xB3WPQ[\x82Q`\xFF\x16\x80a\x01\x88WPPPa\x01\x7F`\x01\x91a\x08YV[\x91[\x01\x90a\0\xA8V[`\x01\x81\x03a\x01\xA4WPPPa\x01\x9E`\x01\x91a\x0C\x12V[\x91a\x01\x81V[`\x02\x81\x03a\x02\x88WPP`@Q`@\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02tW`@R`\x13\x81Rr9\xB4\xB6\xBA\xB60\xBA2\xA1\xBA\xB9;2\xA9\xBB\xB0\xB8$\xB7`i\x1B` \x82\x01R`@Q` \x81\x01\x91c\x10L\x13\xEB`\xE2\x1B\x83R` `$\x83\x01R\x80Q\x90\x81`D\x84\x01R\x84[\x82\x81\x10a\x02^WPP\x92`\x01\x94\x92\x82a\x02H`d\x82\x88\x86\x83a\x01\x9E\x9B\x82\x9A\x01\x01R`\x1F\x80\x19\x91\x01\x16\x81\x01\x03\x01`\x1F\x19\x81\x01\x83R\x82a\x03\xA6V[Q\x90jconsole.logZ\xFAPa\x07\x07V[\x80` \x80\x92\x84\x01\x01Q`d\x82\x87\x01\x01R\x01a\x02\x0FV[cNH{q`\xE0\x1B\x83R`A`\x04R`$\x83\xFD[`\x03\x91\x94\x93\x92P\x14a\x02\x9EW[P`\x01\x90a\x01\x81V[`\x01\x91\x92Pa\x02\xAC\x90a\x04\xB8V[\x91\x90a\x02\x95V[\x80\x91Ra\x01gV[\x84\x80\xFD[\x83\x80\xFD[P\x80\xFD[` \x90`@Q\x90\x81R\xF3[`\0\x80\xFD[4a\x02\xD2Wa\x01\x006`\x03\x19\x01\x12a\x02\xD2W` a\x02\xFCa\x02\xF76a\x03\xDCV[a\x0C\x12V[`@Q\x90\x81R\xF3[4a\x02\xD2Wa\x01\x006`\x03\x19\x01\x12a\x02\xD2W` a\x02\xFCa\x03$6a\x03\xDCV[a\x08YV[4a\x02\xD2Wa\x01\x006`\x03\x19\x01\x12a\x02\xD2W` a\x02\xFCa\x03I6a\x03\xDCV[a\x07\x07V[4a\x02\xD2Wa\x01\x006`\x03\x19\x01\x12a\x02\xD2W` a\x02\xFCa\x03n6a\x03\xDCV[a\x04\xB8V[a\x01\0\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\x90W`@RV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\x90W`@RV[5\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x02\xD2WV[a\x01\0\x90`\x03\x19\x01\x12a\x02\xD2W`@Q\x90a\x03\xF6\x82a\x03sV[\x81`\x045`\xFF\x81\x16\x81\x03a\x02\xD2W\x81R`$5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xD2W` \x82\x01R`D5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xD2W`@\x82\x01R`d5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x02\xD2W``\x82\x01R`\x845b\xFF\xFF\xFF\x81\x16\x81\x03a\x02\xD2W`\x80\x82\x01R`\xA45`\xA0\x82\x01R`\xC45\x80\x15\x15\x81\x03a\x02\xD2W`\xC0\x82\x01R`\xE45\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x02\xD2W`\xE0\x01RV[\x80Q\x15a\x04\xA2W` \x01\x90V[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[` \x81\x01Q`@\x80Q\x90\x92\x90\x91`\x01`\x01`\xA0\x1B\x03\x16\x90a\x04\xD9\x84\x84a\x03\xA6V[`\x01\x83R`\x1F\x19\x84\x01`\0[\x81\x81\x10a\x06\xC4WPP\x83\x81\x01Q`\xA0\x91\x90`\x01`\x01`\xA0\x1B\x03\x16a\x05\x08\x85a\x04\x95V[QR`\x01\x80\x83\x1B\x03``\x82\x01Q\x16` a\x05!\x86a\x04\x95V[Q\x01R`\xC0\x81\x01Q\x15\x15\x85a\x055\x86a\x04\x95V[Q\x01R`\x01\x80\x83\x1B\x03`\xE0\x82\x01Q\x16``a\x05O\x86a\x04\x95V[Q\x01R\x01Q\x83Q\x92\x83\x91c\x15Bhk`\xE2\x1B\x83R`D\x83\x01\x90`\x04\x84\x01R\x85`$\x84\x01R\x81Q\x80\x91R` `d\x84\x01\x92\x01\x90`\0[\x81\x81\x10a\x06xWPPP\x91\x81\x80`\0\x94\x03\x91Z\xFA\x90\x81\x15a\x06mW`\0\x91a\x05\xB7W[P\x80Q`\x01\x10\x15a\x04\xA2W\x01Q\x90V[=\x80\x83\x83>a\x05\xC6\x81\x83a\x03\xA6V[\x81\x01\x90` \x81\x83\x03\x12a\x06iW\x80Q\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02\xBFW\x01\x91\x81`\x1F\x84\x01\x12\x15a\x06RW\x82Q\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11a\x06UW\x83`\x05\x1B\x91` \x83\x01\x94a\x06\x1A\x87Q\x96\x87a\x03\xA6V[\x85R` \x80\x86\x01\x93\x83\x01\x01\x93\x84\x11a\x06RWP` \x01\x90[\x82\x82\x10a\x06BWPPP8a\x05\xA7V[\x81Q\x81R` \x91\x82\x01\x91\x01a\x062V[\x80\xFD[cNH{q`\xE0\x1B\x82R`A`\x04R`$\x82\xFD[\x82\x80\xFD[\x82Q=`\0\x82>=\x90\xFD[\x82Q\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x86R` \x82\x81\x01Q\x82\x16\x81\x88\x01R\x8A\x83\x01Q\x15\x15\x8B\x88\x01R``\x92\x83\x01Q\x90\x91\x16\x91\x86\x01\x91\x90\x91R\x87\x95P`\x80\x90\x94\x01\x93\x90\x92\x01\x91`\x01\x01a\x05\x84V[\x85Q\x90`\x80\x82\x01\x91\x80\x83\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x17a\x03\x90W` \x92\x88R`\0\x81R`\0\x83\x82\x01R`\0\x88\x82\x01R`\0``\x82\x01R\x82\x82\x88\x01\x01R\x01a\x04\xE5V[` \x81\x01Q`\x01`\x01`\xA0\x1B\x03\x16`\0\x80\x80[\x82\x82\x14a\x07\x9FW[P`d\x90`\xA0` \x94\x95\x01Q\x94`@Q\x95\x86\x94\x85\x93cUmn\x9F`\xE0\x1B\x85R`\x04\x85\x01R`$\x84\x01R`D\x83\x01RZ\xFA\x90\x81\x15a\x07\x93W`\0\x91a\x07dWP\x90V[\x90P` \x81=` \x11a\x07\x8BW[\x81a\x07\x7F` \x93\x83a\x03\xA6V[\x81\x01\x03\x12a\x02\xD2WQ\x90V[=\x91Pa\x07rV[`@Q=`\0\x82>=\x90\xFD[`@Qc\xC6a\x06W`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R` \x81`$\x81\x88Z\xFA\x90\x81\x15a\x07\x93W`\0\x91a\x08\x18W[P`@\x86\x01Q`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x91\x16\x81\x03a\x07\xFDWP\x90P\x80[\x82\x82\x03a\x07\xF8W`\x01\x01a\x07\x1AV[a\x07\"V[``\x86\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x03a\x07\xE9W\x91P\x81a\x07\xE9V[` \x81=\x82\x11a\x08QW[\x81a\x080` \x93\x83a\x03\xA6V[\x81\x01\x03\x12a\x02\xC3WQ\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x06RWP8a\x07\xCBV[=\x91Pa\x08#V[` \x81\x01Q`@\x82\x01Q``\x80\x84\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x93`\0\x93`\x04\x93\x92\x16\x91\x90a\x08\x94a\x08\x8C\x87\x85a\rmV[P\x96\x84a\rmV[`@Q\x91\x84\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x81\x16` \x84\x01\x90\x81R\x91\x85\x1B\x16`4\x83\x01R`(\x82R\x90a\x08\xCB`H\x82a\x03\xA6V[Q\x90 \x90`@Q\x91` \x83\x01\x91`\xFF`\xF8\x1B\x83Rk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x85\x1B\x16`!\x84\x01R`5\x83\x01R\x7F\x96\xE8\xACBw\x19\x8F\xF8\xB6\xF7\x85G\x8A\xA9\xA3\x9F@<\xB7h\xDD\x02\xCB\xEE2l>}\xA3H\x84_`U\x83\x01R`U\x82Ra\t0`u\x83a\x03\xA6V[\x90Q\x90 `@Qc\x02@\xBCk`\xE2\x1B\x81R\x93\x84\x91\x82\x90`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x91\x82\x15a\x0B\xF6W\x83\x90\x84\x93a\x0B\x98W[P`\x01`\x01`p\x1B\x03\x92\x83\x16\x94\x92\x16\x91`\x01`\x01`\xA0\x1B\x03\x16\x03a\x0B\x8FW`\xA0\x90\x92\x93[\x01Q\x91\x82\x15a\x0B6W\x80\x15\x92\x83\x15\x80a\x0B-W[\x15a\n\xD7Wa\x03\xE5\x81\x02\x92\x81\x84\x04a\x03\xE5\x03a\n\x99WP\x80a\x03\xE5\x84\x04\x03a\n]W`\0\x94\x80\x15\x91\x82\x15a\n\xADW[PP\x15a\n]W`\0a\x03\xE8\x82\x02\x93\x82\x85\x04a\x03\xE8\x14\x17\x15a\n\x99WPa\x03\xE8\x83\x04\x03a\n]W\x81\x01\x90\x81\x81\x11a\nGW\x81\x10a\n\x0BWa\n\x08\x91a\rMV[\x90V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rsds-math-add-overflow``\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rsds-math-mul-overflow``\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B\x81R`\x11`\x04R`$\x90\xFD[\x81\x02a\x03\xE5\x02\x95P\x90P\x82\x15\x83\x86\x04\x82\x14\x17\x15a\nGWa\n\xCF\x83\x91\x86a\rMV[\x148\x80a\t\xC8V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FUniswapV2Library: INSUFFICIENT_L`D\x82\x01RgIQUIDITY`\xC0\x1B`d\x82\x01R`\x84\x90\xFD[P\x84\x15\x15a\t\x99V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FUniswapV2Library: INSUFFICIENT_I`D\x82\x01Rj\x13\x94\x15U\x17\xD0SS\xD5S\x95`\xAA\x1B`d\x82\x01R`\x84\x90\xFD[\x92`\xA0\x90a\t\x85V[\x92PP``\x82=``\x11a\x0B\xEEW[\x81a\x0B\xB4``\x93\x83a\x03\xA6V[\x81\x01\x03\x12a\x06iW`\x01`\x01`p\x1B\x03\x80a\x0B\xCE\x84a\r9V[a\x0B\xE6`@a\x0B\xDF` \x88\x01a\r9V[\x96\x01a\x0C\x01V[P\x91Pa\taV[=\x91Pa\x0B\xA7V[`@Q=\x85\x82>=\x90\xFD[Q\x90c\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\xD2WV[` \x81\x01Q`@Q\x90`\x01`\x01`\xA0\x1B\x03\x16`\xA0\x82\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x83\x82\x10\x17a\x03\x90W`@\x90\x81R`\0\x80\x84R` \x84\x01\x81\x81R\x82\x85\x01\x82\x81R``\x80\x87\x01\x84\x81R`\x80\x88\x81\x01\x86\x81R\x8A\x88\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x8BR\x93\x8B\x01Q\x84\x16\x86R`\xA0\x8B\x01Q\x85R\x99\x81\x01Qb\xFF\xFF\xFF\x90\x81\x16\x83R\x96QccR\x815`\xE1\x1B\x81R\x98Q\x83\x16`\x04\x8A\x01R\x93Q\x82\x16`$\x89\x01R\x91Q`D\x88\x01R\x90Q\x90\x93\x16`d\x86\x01R\x94Q\x90\x91\x16`\x84\x84\x01R\x91\x92\x91\x83\x91`\xA4\x91\x83\x91Z\xF1\x90\x81\x15a\x07\x93W`\0\x91a\x0C\xE6WP\x90V[`\x80\x81=`\x80\x11a\r1W[\x81a\x0C\xFF`\x80\x93\x83a\x03\xA6V[\x81\x01\x03\x12a\x02\xC3W\x80Q` \x82\x01Q\x90\x92\x90`\x01`\x01`\xA0\x1B\x03\x81\x16\x03a\x06RWP`@a\r-\x91\x01a\x0C\x01V[P\x90V[=\x91Pa\x0C\xF2V[Q\x90`\x01`\x01`p\x1B\x03\x82\x16\x82\x03a\x02\xD2WV[\x81\x15a\rWW\x04\x90V[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[\x90\x91\x90`\x01`\x01`\xA0\x1B\x03\x80\x84\x16\x90\x82\x16\x80\x82\x14a\r\xE9W\x10\x15a\r\xE4W\x91[\x90`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\r\x9FWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FUniswapV2Library: ZERO_ADDRESS\0\0`D\x82\x01R`d\x90\xFD[a\r\x8DV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FUniswapV2Library: IDENTICAL_ADDR`D\x82\x01RdESSES`\xD8\x1B`d\x82\x01R`\x84\x90\xFD\xFE\xA2dipfsX\"\x12 .\xD4U\xF7 \xE6\x0C\xA5\xAAb\x81\xE8hM\xBB\xFD\xE4\xB7\xF5\xC13\x18Ju5\xA5\x84\xCFf4\x99\xAFdsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct SwapParams { uint8 protocol; address handler; address tokenIn; address tokenOut; uint24 fee; uint256 amount; bool stable; address factory; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SwapParams {
        pub protocol: u8,
        pub handler: alloy::sol_types::private::Address,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub fee: alloy::sol_types::private::primitives::aliases::U24,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        pub stable: bool,
        pub factory: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U24,
            alloy::sol_types::private::primitives::aliases::U256,
            bool,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapParams> for UnderlyingRustTuple<'_> {
            fn from(value: SwapParams) -> Self {
                (
                    value.protocol,
                    value.handler,
                    value.tokenIn,
                    value.tokenOut,
                    value.fee,
                    value.amount,
                    value.stable,
                    value.factory,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapParams {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    protocol: tuple.0,
                    handler: tuple.1,
                    tokenIn: tuple.2,
                    tokenOut: tuple.3,
                    fee: tuple.4,
                    amount: tuple.5,
                    stable: tuple.6,
                    factory: tuple.7,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SwapParams {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SwapParams {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.protocol),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.handler,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.fee),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.factory,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SwapParams {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SwapParams {
            const NAME: &'static str = "SwapParams";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SwapParams(uint8 protocol,address handler,address tokenIn,address tokenOut,uint24 fee,uint256 amount,bool stable,address factory)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.protocol)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.handler,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenIn,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenOut,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amount)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.stable,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.factory,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SwapParams {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.protocol,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.handler,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenIn,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenOut,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amount,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.stable,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.factory,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.protocol,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.handler,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenIn,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenOut,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amount,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.stable,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.factory,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `simulateAeroSwapIn((uint8,address,address,address,uint24,uint256,bool,address))` and selector `0x12c0c368`.
```solidity
function simulateAeroSwapIn(SwapParams memory params) external returns (uint256 amountOut);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateAeroSwapInCall {
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`simulateAeroSwapIn((uint8,address,address,address,uint24,uint256,bool,address))`](simulateAeroSwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateAeroSwapInReturn {
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateAeroSwapInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateAeroSwapInCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateAeroSwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateAeroSwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateAeroSwapInReturn) -> Self {
                    (value.amountOut,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateAeroSwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountOut: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateAeroSwapInCall {
            type Parameters<'a> = (SwapParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateAeroSwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateAeroSwapIn((uint8,address,address,address,uint24,uint256,bool,address))";
            const SELECTOR: [u8; 4] = [18u8, 192u8, 195u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `simulateCurveSwapIn((uint8,address,address,address,uint24,uint256,bool,address))` and selector `0x6a1ad1af`.
```solidity
function simulateCurveSwapIn(SwapParams memory params) external returns (uint256 amountOut);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateCurveSwapInCall {
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`simulateCurveSwapIn((uint8,address,address,address,uint24,uint256,bool,address))`](simulateCurveSwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateCurveSwapInReturn {
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateCurveSwapInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateCurveSwapInCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateCurveSwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateCurveSwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateCurveSwapInReturn) -> Self {
                    (value.amountOut,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateCurveSwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountOut: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateCurveSwapInCall {
            type Parameters<'a> = (SwapParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateCurveSwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateCurveSwapIn((uint8,address,address,address,uint24,uint256,bool,address))";
            const SELECTOR: [u8; 4] = [106u8, 26u8, 209u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `simulateSwapIn((uint8,address,address,address,uint24,uint256,bool,address)[])` and selector `0xb5c983ac`.
```solidity
function simulateSwapIn(SwapParams[] memory paramsArray) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateSwapInCall {
        pub paramsArray: alloy::sol_types::private::Vec<
            <SwapParams as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`simulateSwapIn((uint8,address,address,address,uint24,uint256,bool,address)[])`](simulateSwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateSwapInReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<SwapParams>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <SwapParams as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateSwapInCall> for UnderlyingRustTuple<'_> {
                fn from(value: simulateSwapInCall) -> Self {
                    (value.paramsArray,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for simulateSwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { paramsArray: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateSwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateSwapInReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateSwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateSwapInCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<SwapParams>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateSwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateSwapIn((uint8,address,address,address,uint24,uint256,bool,address)[])";
            const SELECTOR: [u8; 4] = [181u8, 201u8, 131u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        SwapParams,
                    > as alloy_sol_types::SolType>::tokenize(&self.paramsArray),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `simulateUniswapV2SwapIn((uint8,address,address,address,uint24,uint256,bool,address))` and selector `0x6dabe380`.
```solidity
function simulateUniswapV2SwapIn(SwapParams memory params) external view returns (uint256 amountOut);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateUniswapV2SwapInCall {
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`simulateUniswapV2SwapIn((uint8,address,address,address,uint24,uint256,bool,address))`](simulateUniswapV2SwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateUniswapV2SwapInReturn {
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateUniswapV2SwapInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateUniswapV2SwapInCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateUniswapV2SwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateUniswapV2SwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateUniswapV2SwapInReturn) -> Self {
                    (value.amountOut,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateUniswapV2SwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountOut: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateUniswapV2SwapInCall {
            type Parameters<'a> = (SwapParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateUniswapV2SwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateUniswapV2SwapIn((uint8,address,address,address,uint24,uint256,bool,address))";
            const SELECTOR: [u8; 4] = [109u8, 171u8, 227u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `simulateUniswapV3SwapIn((uint8,address,address,address,uint24,uint256,bool,address))` and selector `0x933d4379`.
```solidity
function simulateUniswapV3SwapIn(SwapParams memory params) external returns (uint256 amountOut);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateUniswapV3SwapInCall {
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`simulateUniswapV3SwapIn((uint8,address,address,address,uint24,uint256,bool,address))`](simulateUniswapV3SwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simulateUniswapV3SwapInReturn {
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateUniswapV3SwapInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateUniswapV3SwapInCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateUniswapV3SwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateUniswapV3SwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateUniswapV3SwapInReturn) -> Self {
                    (value.amountOut,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateUniswapV3SwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountOut: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateUniswapV3SwapInCall {
            type Parameters<'a> = (SwapParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateUniswapV3SwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateUniswapV3SwapIn((uint8,address,address,address,uint24,uint256,bool,address))";
            const SELECTOR: [u8; 4] = [147u8, 61u8, 67u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TxSimulator`](self) function calls.
    pub enum TxSimulatorCalls {
        simulateAeroSwapIn(simulateAeroSwapInCall),
        simulateCurveSwapIn(simulateCurveSwapInCall),
        simulateSwapIn(simulateSwapInCall),
        simulateUniswapV2SwapIn(simulateUniswapV2SwapInCall),
        simulateUniswapV3SwapIn(simulateUniswapV3SwapInCall),
    }
    #[automatically_derived]
    impl TxSimulatorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [18u8, 192u8, 195u8, 104u8],
            [106u8, 26u8, 209u8, 175u8],
            [109u8, 171u8, 227u8, 128u8],
            [147u8, 61u8, 67u8, 121u8],
            [181u8, 201u8, 131u8, 172u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TxSimulatorCalls {
        const NAME: &'static str = "TxSimulatorCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::simulateAeroSwapIn(_) => {
                    <simulateAeroSwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::simulateCurveSwapIn(_) => {
                    <simulateCurveSwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::simulateSwapIn(_) => {
                    <simulateSwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::simulateUniswapV2SwapIn(_) => {
                    <simulateUniswapV2SwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::simulateUniswapV3SwapIn(_) => {
                    <simulateUniswapV3SwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TxSimulatorCalls>] = &[
                {
                    fn simulateAeroSwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateAeroSwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateAeroSwapIn)
                    }
                    simulateAeroSwapIn
                },
                {
                    fn simulateCurveSwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateCurveSwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateCurveSwapIn)
                    }
                    simulateCurveSwapIn
                },
                {
                    fn simulateUniswapV2SwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateUniswapV2SwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateUniswapV2SwapIn)
                    }
                    simulateUniswapV2SwapIn
                },
                {
                    fn simulateUniswapV3SwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateUniswapV3SwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateUniswapV3SwapIn)
                    }
                    simulateUniswapV3SwapIn
                },
                {
                    fn simulateSwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateSwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateSwapIn)
                    }
                    simulateSwapIn
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::simulateAeroSwapIn(inner) => {
                    <simulateAeroSwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::simulateCurveSwapIn(inner) => {
                    <simulateCurveSwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::simulateSwapIn(inner) => {
                    <simulateSwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::simulateUniswapV2SwapIn(inner) => {
                    <simulateUniswapV2SwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::simulateUniswapV3SwapIn(inner) => {
                    <simulateUniswapV3SwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::simulateAeroSwapIn(inner) => {
                    <simulateAeroSwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simulateCurveSwapIn(inner) => {
                    <simulateCurveSwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simulateSwapIn(inner) => {
                    <simulateSwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simulateUniswapV2SwapIn(inner) => {
                    <simulateUniswapV2SwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simulateUniswapV3SwapIn(inner) => {
                    <simulateUniswapV3SwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TxSimulator`](self) contract instance.

See the [wrapper's documentation](`TxSimulatorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TxSimulatorInstance<T, P, N> {
        TxSimulatorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TxSimulatorInstance<T, P, N>>,
    > {
        TxSimulatorInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        TxSimulatorInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`TxSimulator`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TxSimulator`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TxSimulatorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TxSimulatorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TxSimulatorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TxSimulatorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TxSimulator`](self) contract instance.

See the [wrapper's documentation](`TxSimulatorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<TxSimulatorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TxSimulatorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TxSimulatorInstance<T, P, N> {
            TxSimulatorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TxSimulatorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`simulateAeroSwapIn`] function.
        pub fn simulateAeroSwapIn(
            &self,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateAeroSwapInCall, N> {
            self.call_builder(&simulateAeroSwapInCall { params })
        }
        ///Creates a new call builder for the [`simulateCurveSwapIn`] function.
        pub fn simulateCurveSwapIn(
            &self,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateCurveSwapInCall, N> {
            self.call_builder(&simulateCurveSwapInCall { params })
        }
        ///Creates a new call builder for the [`simulateSwapIn`] function.
        pub fn simulateSwapIn(
            &self,
            paramsArray: alloy::sol_types::private::Vec<
                <SwapParams as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateSwapInCall, N> {
            self.call_builder(&simulateSwapInCall { paramsArray })
        }
        ///Creates a new call builder for the [`simulateUniswapV2SwapIn`] function.
        pub fn simulateUniswapV2SwapIn(
            &self,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateUniswapV2SwapInCall, N> {
            self.call_builder(
                &simulateUniswapV2SwapInCall {
                    params,
                },
            )
        }
        ///Creates a new call builder for the [`simulateUniswapV3SwapIn`] function.
        pub fn simulateUniswapV3SwapIn(
            &self,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateUniswapV3SwapInCall, N> {
            self.call_builder(
                &simulateUniswapV3SwapInCall {
                    params,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TxSimulatorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
