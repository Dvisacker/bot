/**

Generated by the following Solidity interface...
```solidity
interface TxSimulator {
    struct SwapParams {
        uint8 protocol;
        address handler;
        address tokenIn;
        address tokenOut;
        uint24 fee;
        uint256 amount;
        bool stable;
        address factory;
    }

    constructor();

    function simulateAeroSwapIn(SwapParams memory params) external returns (uint256 amountOut);
    function simulateCurveSwapIn(SwapParams memory params) external returns (uint256 amountOut);
    function simulateSwapIn(SwapParams[] memory paramsArray) external returns (uint256);
    function simulateUniswapV2SwapIn(SwapParams memory params) external view returns (uint256 amountOut);
    function simulateUniswapV3SwapIn(SwapParams memory params) external returns (uint256 amountOut);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simulateAeroSwapIn",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct TxSimulator.SwapParams",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simulateCurveSwapIn",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct TxSimulator.SwapParams",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simulateSwapIn",
    "inputs": [
      {
        "name": "paramsArray",
        "type": "tuple[]",
        "internalType": "struct TxSimulator.SwapParams[]",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simulateUniswapV2SwapIn",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct TxSimulator.SwapParams",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "simulateUniswapV3SwapIn",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct TxSimulator.SwapParams",
        "components": [
          {
            "name": "protocol",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "handler",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "stable",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "factory",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TxSimulator {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b611eef61002b8239611eef90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61043a565b61001d5f3561006c565b806312c0c368146100675780636a1ad1af146100625780636dabe3801461005d578063933d4379146100585763b5c983ac0361000e57610404565b61034d565b610318565b6102e3565b6102ae565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100b090610088565b810190811067ffffffffffffffff8211176100ca57604052565b610092565b906100e26100db610072565b92836100a6565b565b60ff1690565b6100f3816100e4565b036100fa57565b5f80fd5b9050359061010b826100ea565b565b60018060a01b031690565b6101219061010d565b90565b61012d81610118565b0361013457565b5f80fd5b9050359061014582610124565b565b62ffffff1690565b61015881610147565b0361015f57565b5f80fd5b905035906101708261014f565b565b90565b61017e81610172565b0361018557565b5f80fd5b9050359061019682610175565b565b151590565b6101a681610198565b036101ad57565b5f80fd5b905035906101be8261019d565b565b91906101008382031261026857610261906101dc6101006100cf565b936101e9825f83016100fe565b5f8601526101fa8260208301610138565b602086015261020c8260408301610138565b604086015261021e8260608301610138565b60608601526102308260808301610163565b60808601526102428260a08301610189565b60a08601526102548260c083016101b1565b60c086015260e001610138565b60e0830152565b610084565b906101008282031261028757610284915f016101c0565b90565b61007c565b61029590610172565b9052565b91906102ac905f6020850194019061028c565b565b346102de576102da6102c96102c436600461026d565b610851565b6102d1610072565b91829182610299565b0390f35b610078565b346103135761030f6102fe6102f936600461026d565b610a7f565b610306610072565b91829182610299565b0390f35b610078565b346103485761034461033361032e36600461026d565b610c70565b61033b610072565b91829182610299565b0390f35b610078565b3461037d5761037961036861036336600461026d565b610ed4565b610370610072565b91829182610299565b0390f35b610078565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103c95781359167ffffffffffffffff83116103c4576020019261010083028401116103bf57565b61038a565b610386565b610382565b906020828203126103ff575f82013567ffffffffffffffff81116103fa576103f6920161038e565b9091565b610080565b61007c565b346104355761043161042061041a3660046103ce565b90611166565b610428610072565b91829182610299565b0390f35b610078565b5f80fd5b5f90565b61044c9051610118565b90565b90565b61046661046161046b9261010d565b61044f565b61010d565b90565b61047790610452565b90565b6104839061046e565b90565b61048f90610452565b90565b61049b90610486565b90565b90565b6104b56104b06104ba9261049e565b61044f565b610172565b90565b67ffffffffffffffff81116104d55760208091020190565b610092565b906104ec6104e7836104bd565b6100cf565b918252565b6104fb60806100cf565b90565b5f90565b5f90565b61050e6104f1565b9060208080808561051d6104fe565b8152016105286104fe565b815201610533610502565b81520161053e6104fe565b81525050565b61054c610506565b90565b5f5b82811061055d57505050565b602090610568610544565b8184015201610551565b9061059761057f836104da565b9260208061058d86936104bd565b920191039061054f565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b906105bb826105ad565b8110156105cc576020809102010190565b610599565b90565b6105e86105e36105ed926105d1565b61044f565b610172565b90565b906105fa90610118565b9052565b6106089051610198565b90565b9061061590610198565b9052565b61062290610452565b90565b61062e90610619565b90565b61063b9051610172565b90565b60e01b90565b67ffffffffffffffff811161065c5760208091020190565b610092565b9050519061066e82610175565b565b9092919261068561068082610644565b6100cf565b93818552602080860192028301928184116106c257915b8383106106a95750505050565b602080916106b78486610661565b81520192019161069c565b61038a565b9080601f830112156106e5578160206106e293519101610670565b90565b610382565b9060208282031261071a575f82015167ffffffffffffffff81116107155761071292016106c7565b90565b610080565b61007c565b60209181520190565b60200190565b61073790610118565b9052565b61074490610198565b9052565b9060608061078e936107605f8201515f86019061072e565b6107726020820151602086019061072e565b6107846040820151604086019061073b565b015191019061072e565b565b9061079d81608093610748565b0190565b60200190565b906107c46107be6107b7846105ad565b809361071f565b92610728565b905f5b8181106107d45750505090565b9091926107ed6107e76001928651610790565b946107a1565b91019190916107c7565b9161081a9261080d60408201935f83019061028c565b60208184039101526107a7565b90565b610825610072565b3d5f823e3d90fd5b5190565b9061083b8261082d565b81101561084c576020809102010190565b610599565b61085961043e565b505f61087761087261086d60208501610442565b61047a565b610492565b61093d61088c61088760016104a1565b610572565b916108b761089c60408701610442565b856108b0866108aa836105d4565b906105b1565b51016105f0565b6108e26108c660608701610442565b60206108db866108d5896105d4565b906105b1565b51016105f0565b61090d6108f160c087016105fe565b604061090686610900896105d4565b906105b1565b510161060b565b61093861091c60e08701610442565b60606109318661092b896105d4565b906105b1565b51016105f0565b610625565b61096a61095160a0635509a1ac9601610631565b929461097561095e610072565b9687958694859461063e565b8452600484016107f7565b03915afa9081156109ca576109a5916109a0915f916109a8575b5061099a60016104a1565b90610831565b610631565b90565b6109c491503d805f833e6109bc81836100a6565b8101906106ea565b5f61098f565b61081d565b6109d890610452565b90565b6109e4906109cf565b90565b6109f090610619565b90565b90505190610a0082610124565b565b90602082820312610a1b57610a18915f016109f3565b90565b61007c565b6001610a2c9101610172565b90565b90602082820312610a4857610a45915f01610661565b90565b61007c565b604090610a76610a7d9496959396610a6c60608401985f85019061028c565b602083019061028c565b019061028c565b565b610a8761043e565b50610a9c610a9760208301610442565b6109db565b90610aa561043e565b610aad61043e565b90610ab75f6105d4565b5b81610acb610ac585610172565b91610172565b03610c6057610b086020610ade876109e7565b63c661065790610afd8592610af1610072565b9586948593849361063e565b835260048301610299565b03915afa908115610c5b575f91610c2d575b5080610b39610b33610b2e60408901610442565b610118565b91610118565b145f14610bfc5750809150905b81610b59610b5385610172565b91610172565b03610b6c57610b6790610a20565b610ab8565b50610ba8610b7d602094955b6109e7565b91610bb3610b9460a063556d6e9f93969801610631565b610b9c610072565b9788968795869561063e565b855260048501610a4d565b03915afa908115610bf7575f91610bc9575b5090565b610bea915060203d8111610bf0575b610be281836100a6565b810190610a2f565b5f610bc5565b503d610bd8565b61081d565b610c19610c13610c0e60608801610442565b610118565b91610118565b14610c24575b610b46565b80925091610c1f565b610c4e915060203d8111610c54575b610c4681836100a6565b810190610a02565b5f610b1a565b503d610c3c565b61081d565b50610ba8610b7d60209495610b78565b60a0610cc191610c7e61043e565b50610cb9610caf610c9160208401610442565b610c9d60408501610442565b610ca960608601610442565b916113bd565b9390939201610631565b919091611699565b90565b610ccd90610452565b90565b610cd990610cc4565b90565b610ce660a06100cf565b90565b5f90565b5f90565b5f90565b610cfd610cdc565b9060208080808086610d0d6104fe565b815201610d186104fe565b815201610d23610ce9565b815201610d2e610ced565b815201610d39610cf1565b81525050565b610d47610cf5565b90565b90610d5490610172565b9052565b610d629051610147565b90565b90610d6f90610147565b9052565b610d87610d82610d8c926105d1565b61044f565b61010d565b90565b90610d999061010d565b9052565b610da690610619565b90565b610db28161010d565b03610db957565b5f80fd5b90505190610dca82610da9565b565b63ffffffff1690565b610dde81610dcc565b03610de557565b5f80fd5b90505190610df682610dd5565b565b608081830312610e3957610e0e825f8301610661565b92610e36610e1f8460208501610dbd565b93610e2d8160408601610de9565b93606001610661565b90565b61007c565b610e4790610172565b9052565b610e5490610147565b9052565b610e619061010d565b9052565b90608080610ebd93610e7d5f8201515f86019061072e565b610e8f6020820151602086019061072e565b610ea160408201516040860190610e3e565b610eb360608201516060860190610e4b565b0151910190610e58565b565b9190610ed2905f60a08501940190610e65565b565b6080610fa191610ee261043e565b50610f79610efa610ef560208401610442565b610cd0565b610f60610f5785610f09610d3f565b95610f21610f1960408301610442565b5f89016105f0565b610f39610f3060608301610442565b602089016105f0565b610f51610f4860a08301610631565b60408901610d4a565b01610d58565b60608501610d65565b610f74610f6c5f610d73565b858501610d8f565b610d9d565b610f965f63c6a5026a610f8a610072565b9687958694859361063e565b835260048301610ebf565b03925af1908115610fe6575f91610fb7575b5090565b610fd8915060803d8111610fdf575b610fd081836100a6565b810190610df8565b5050610fb3565b503d610fc6565b61081d565b5090565b919081101561100057610100020190565b610599565b6110109036906101c0565b90565b61101d90516100e4565b90565b61103461102f611039926105d1565b61044f565b6100e4565b90565b61105061104b6110559261049e565b61044f565b6100e4565b90565b90565b61106f61106a61107492611058565b61044f565b6100e4565b90565b90565b61108e61108961109392611077565b61044f565b6100e4565b90565b67ffffffffffffffff81116110b4576110b0602091610088565b0190565b610092565b906110cb6110c683611096565b6100cf565b918252565b5f7f73696d756c617465437572766553776170496e00000000000000000000000000910152565b61110160136110b9565b9061110e602083016110d0565b565b6111186110f7565b90565b5f7f616d6f756e744f75740000000000000000000000000000000000000000000000910152565b61114c60096110b9565b906111596020830161111b565b565b611163611142565b90565b9061116f61043e565b5061117861043e565b91611184818390610feb565b9361118d61043e565b935b846111a261119c88610172565b91610172565b10156112ff576111bc6111b784868891610fef565b611005565b90806111d06111ca5f6105d4565b91610172565b036112ed575b6111e15f8301611013565b6111f36111ed5f611020565b916100e4565b145f14611225575061120761121f91610c70565b945b61121a8661121561115b565b611808565b610a20565b9361118f565b6112305f8301611013565b61124361123d600161103c565b916100e4565b145f1461125e575061125761121f91610ed4565b945b611209565b6112695f8301611013565b61127c611276600261105b565b916100e4565b145f146112a757506112a061121f9161129b611296611110565b6117a1565b610a7f565b945b611259565b94906112b45f8201611013565b6112c76112c1600361107a565b916100e4565b146112d7575b5061121f906112a2565b61121f9195506112e690610851565b94906112cd565b6112fa8160a08401610d4a565b6111d6565b93509350505090565b61131190610452565b90565b61131d90611308565b90565b61132990610619565b90565b6dffffffffffffffffffffffffffff1690565b6113488161132c565b0361134f57565b5f80fd5b905051906113608261133f565b565b90916060828403126113975761139461137d845f8501611353565b9361138b8160208601611353565b93604001610de9565b90565b61007c565b5f0190565b6113b56113b06113ba9261132c565b61044f565b610172565b90565b60606113ff6113fa6113f561141595966113d561043e565b506113de61043e565b506113ea888290611984565b509590889091611b68565b611314565b611320565b630902f1ac9061140d610072565b94859261063e565b825281806114256004820161139c565b03915afa80156114b3575f80939091611471575b5061145961145261144c61145f936113a1565b946113a1565b9492610118565b91610118565b145f1461146c57905b9091565b611468565b61144c935061145f91506114526114a16114599260603d81116114ac575b61149981836100a6565b810190611362565b509550925050611439565b503d61148f565b61081d565b60209181520190565b60207f4e5055545f414d4f554e54000000000000000000000000000000000000000000917f556e697377617056324c6962726172793a20494e53554646494349454e545f495f8201520152565b61151b602b6040926114b8565b611524816114c1565b0190565b61153d9060208101905f81830391015261150e565b90565b1561154757565b61154f610072565b62461bcd60e51b81528061156560048201611528565b0390fd5b60207f4951554944495459000000000000000000000000000000000000000000000000917f556e697377617056324c6962726172793a20494e53554646494349454e545f4c5f8201520152565b6115c360286040926114b8565b6115cc81611569565b0190565b6115e59060208101905f8183039101526115b6565b90565b156115ef57565b6115f7610072565b62461bcd60e51b81528061160d600482016115d0565b0390fd5b90565b61162861162361162d92611611565b61044f565b610172565b90565b90565b61164761164261164c92611630565b61044f565b610172565b90565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b61168361168991610172565b91610172565b908115611694570490565b61164f565b6117279261171c61170a611703611721946116b261043e565b506116cf816116c96116c35f6105d4565b91610172565b11611540565b866116e26116dc5f6105d4565b91610172565b118061172a575b6116f2906115e8565b6116fd6103e5611614565b90611d00565b9283611d00565b936117166103e8611633565b90611d00565b611e13565b90611677565b90565b506116f28561174161173b5f6105d4565b91610172565b1190506116e9565b5190565b90825f9392825e0152565b6117776117806020936117859361176e81611749565b938480936114b8565b9586910161174d565b610088565b0190565b61179e9160208201915f818403910152611758565b90565b6117cc6117db6117e0926117b3610072565b92839160046020840163104c13eb60e21b815201611789565b602082018103825203826100a6565b611e48565b565b929160206117fe6118069360408701908782035f890152611758565b94019061028c565b565b906118436118489261183461181b610072565b938492600460208501632d839cb360e21b8152016117e2565b602082018103825203826100a6565b611e48565b565b5f90565b60207f4553534553000000000000000000000000000000000000000000000000000000917f556e697377617056324c6962726172793a204944454e544943414c5f414444525f8201520152565b6118a860256040926114b8565b6118b18161184e565b0190565b6118ca9060208101905f81830391015261189b565b90565b156118d457565b6118dc610072565b62461bcd60e51b8152806118f2600482016118b5565b0390fd5b6118ff90610d73565b90565b5f7f556e697377617056324c6962726172793a205a45524f5f414444524553530000910152565b611936601e6020926114b8565b61193f81611902565b0190565b6119589060208101905f818303910152611929565b90565b1561196257565b61196a610072565b62461bcd60e51b81528061198060048201611943565b0390fd5b61198c61184a565b5061199561184a565b506119b3816119ac6119a685610118565b91610118565b14156118cd565b806119c66119c084610118565b91610118565b105f146119f857905b90916119f6836119ef6119e96119e45f6118f6565b610118565b91610118565b141561195b565b565b6119cf565b90565b90565b5f1b90565b611a1c611a17611a21926119fd565b611a03565b611a00565b90565b60601b90565b611a3390611a24565b90565b611a3f90611a2a565b90565b611a4e611a5391610118565b611a36565b9052565b601481611a69611a7193839695611a42565b018092611a42565b0190565b60200190565b5190565b90565b60ff60f81b1690565b60f81b90565b611aa5611aa0611aaa92611a7f565b611a8b565b611a82565b90565b90565b611abc611ac191611a82565b611aad565b9052565b90565b611ad4611ad991611a00565b611ac5565b9052565b92611b0b6014611b1394611b03600188611afb60209b9a8c99611ab0565b018092611a42565b018092611ac8565b018092611ac8565b0190565b5f1c90565b611b30611b2b611b3592610172565b61044f565b610172565b90565b611b44611b4991611b17565b611b1c565b90565b611b60611b5b611b6592610172565b61044f565b61010d565b90565b611c15611c24611c3c92611b8b611c4696611c4196611b8561184a565b50611984565b939093611be1611bba7f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f611a08565b95611bd2611bc6610072565b93849260208401611a57565b602082018103825203826100a6565b611bf3611bed82611a7b565b91611a75565b2093611bff60ff611a91565b9294611c09610072565b95869460208601611add565b602082018103825203826100a6565b611c36611c3082611a7b565b91611a75565b20611b38565b611b4c565b610619565b90565b611c58611c5e91939293610172565b92610172565b91611c6a838202610172565b928184041490151715611c7957565b611663565b5f7f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000910152565b611cb260146020926114b8565b611cbb81611c7e565b0190565b611cd49060208101905f818303910152611ca5565b90565b15611cde57565b611ce6610072565b62461bcd60e51b815280611cfc60048201611cbf565b0390fd5b919091611d0b61043e565b9280611d1f611d195f6105d4565b91610172565b14918215611d35575b5050611d3390611cd7565b565b909350611d339150611d64611d5e611d58611d51848890611c49565b9687611677565b92610172565b91610172565b14905f611d28565b611d7b611d8191939293610172565b92610172565b8201809211611d8c57565b611663565b5f7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000910152565b611dc560146020926114b8565b611dce81611d91565b0190565b611de79060208101905f818303910152611db8565b90565b15611df157565b611df9610072565b62461bcd60e51b815280611e0f60048201611dd2565b0390fd5b9190611e2b611e4691611e2461043e565b5084611d6c565b92611e3f611e398592610172565b91610172565b1015611dea565b565b611e5b90611e566001611e87565b611ea7565b565b6a636f6e736f6c652e6c6f6790565b5f8091611e77611e5d565b602082519201905afa50565b5f90565b611e8f611e83565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103611e9357611eb790611e6c565b56fea2646970667358221220fc29941ba189de4899e5af326d671dbd2dc97c44890f07a3cfaf4dc87cc042a064736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x1E\xEFa\0+\x829a\x1E\xEF\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04:V[a\0\x1D_5a\0lV[\x80c\x12\xC0\xC3h\x14a\0gW\x80cj\x1A\xD1\xAF\x14a\0bW\x80cm\xAB\xE3\x80\x14a\0]W\x80c\x93=Cy\x14a\0XWc\xB5\xC9\x83\xAC\x03a\0\x0EWa\x04\x04V[a\x03MV[a\x03\x18V[a\x02\xE3V[a\x02\xAEV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xB0\x90a\0\x88V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xCAW`@RV[a\0\x92V[\x90a\0\xE2a\0\xDBa\0rV[\x92\x83a\0\xA6V[V[`\xFF\x16\x90V[a\0\xF3\x81a\0\xE4V[\x03a\0\xFAWV[_\x80\xFD[\x90P5\x90a\x01\x0B\x82a\0\xEAV[V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01!\x90a\x01\rV[\x90V[a\x01-\x81a\x01\x18V[\x03a\x014WV[_\x80\xFD[\x90P5\x90a\x01E\x82a\x01$V[V[b\xFF\xFF\xFF\x16\x90V[a\x01X\x81a\x01GV[\x03a\x01_WV[_\x80\xFD[\x90P5\x90a\x01p\x82a\x01OV[V[\x90V[a\x01~\x81a\x01rV[\x03a\x01\x85WV[_\x80\xFD[\x90P5\x90a\x01\x96\x82a\x01uV[V[\x15\x15\x90V[a\x01\xA6\x81a\x01\x98V[\x03a\x01\xADWV[_\x80\xFD[\x90P5\x90a\x01\xBE\x82a\x01\x9DV[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x02hWa\x02a\x90a\x01\xDCa\x01\0a\0\xCFV[\x93a\x01\xE9\x82_\x83\x01a\0\xFEV[_\x86\x01Ra\x01\xFA\x82` \x83\x01a\x018V[` \x86\x01Ra\x02\x0C\x82`@\x83\x01a\x018V[`@\x86\x01Ra\x02\x1E\x82``\x83\x01a\x018V[``\x86\x01Ra\x020\x82`\x80\x83\x01a\x01cV[`\x80\x86\x01Ra\x02B\x82`\xA0\x83\x01a\x01\x89V[`\xA0\x86\x01Ra\x02T\x82`\xC0\x83\x01a\x01\xB1V[`\xC0\x86\x01R`\xE0\x01a\x018V[`\xE0\x83\x01RV[a\0\x84V[\x90a\x01\0\x82\x82\x03\x12a\x02\x87Wa\x02\x84\x91_\x01a\x01\xC0V[\x90V[a\0|V[a\x02\x95\x90a\x01rV[\x90RV[\x91\x90a\x02\xAC\x90_` \x85\x01\x94\x01\x90a\x02\x8CV[V[4a\x02\xDEWa\x02\xDAa\x02\xC9a\x02\xC46`\x04a\x02mV[a\x08QV[a\x02\xD1a\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[4a\x03\x13Wa\x03\x0Fa\x02\xFEa\x02\xF96`\x04a\x02mV[a\n\x7FV[a\x03\x06a\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[4a\x03HWa\x03Da\x033a\x03.6`\x04a\x02mV[a\x0CpV[a\x03;a\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[4a\x03}Wa\x03ya\x03ha\x03c6`\x04a\x02mV[a\x0E\xD4V[a\x03pa\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\xC9W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\xC4W` \x01\x92a\x01\0\x83\x02\x84\x01\x11a\x03\xBFWV[a\x03\x8AV[a\x03\x86V[a\x03\x82V[\x90` \x82\x82\x03\x12a\x03\xFFW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xFAWa\x03\xF6\x92\x01a\x03\x8EV[\x90\x91V[a\0\x80V[a\0|V[4a\x045Wa\x041a\x04 a\x04\x1A6`\x04a\x03\xCEV[\x90a\x11fV[a\x04(a\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x90V[a\x04L\x90Qa\x01\x18V[\x90V[\x90V[a\x04fa\x04aa\x04k\x92a\x01\rV[a\x04OV[a\x01\rV[\x90V[a\x04w\x90a\x04RV[\x90V[a\x04\x83\x90a\x04nV[\x90V[a\x04\x8F\x90a\x04RV[\x90V[a\x04\x9B\x90a\x04\x86V[\x90V[\x90V[a\x04\xB5a\x04\xB0a\x04\xBA\x92a\x04\x9EV[a\x04OV[a\x01rV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xD5W` \x80\x91\x02\x01\x90V[a\0\x92V[\x90a\x04\xECa\x04\xE7\x83a\x04\xBDV[a\0\xCFV[\x91\x82RV[a\x04\xFB`\x80a\0\xCFV[\x90V[_\x90V[_\x90V[a\x05\x0Ea\x04\xF1V[\x90` \x80\x80\x80\x85a\x05\x1Da\x04\xFEV[\x81R\x01a\x05(a\x04\xFEV[\x81R\x01a\x053a\x05\x02V[\x81R\x01a\x05>a\x04\xFEV[\x81RPPV[a\x05La\x05\x06V[\x90V[_[\x82\x81\x10a\x05]WPPPV[` \x90a\x05ha\x05DV[\x81\x84\x01R\x01a\x05QV[\x90a\x05\x97a\x05\x7F\x83a\x04\xDAV[\x92` \x80a\x05\x8D\x86\x93a\x04\xBDV[\x92\x01\x91\x03\x90a\x05OV[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x05\xBB\x82a\x05\xADV[\x81\x10\x15a\x05\xCCW` \x80\x91\x02\x01\x01\x90V[a\x05\x99V[\x90V[a\x05\xE8a\x05\xE3a\x05\xED\x92a\x05\xD1V[a\x04OV[a\x01rV[\x90V[\x90a\x05\xFA\x90a\x01\x18V[\x90RV[a\x06\x08\x90Qa\x01\x98V[\x90V[\x90a\x06\x15\x90a\x01\x98V[\x90RV[a\x06\"\x90a\x04RV[\x90V[a\x06.\x90a\x06\x19V[\x90V[a\x06;\x90Qa\x01rV[\x90V[`\xE0\x1B\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\\W` \x80\x91\x02\x01\x90V[a\0\x92V[\x90PQ\x90a\x06n\x82a\x01uV[V[\x90\x92\x91\x92a\x06\x85a\x06\x80\x82a\x06DV[a\0\xCFV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x06\xC2W\x91[\x83\x83\x10a\x06\xA9WPPPPV[` \x80\x91a\x06\xB7\x84\x86a\x06aV[\x81R\x01\x92\x01\x91a\x06\x9CV[a\x03\x8AV[\x90\x80`\x1F\x83\x01\x12\x15a\x06\xE5W\x81` a\x06\xE2\x93Q\x91\x01a\x06pV[\x90V[a\x03\x82V[\x90` \x82\x82\x03\x12a\x07\x1AW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x15Wa\x07\x12\x92\x01a\x06\xC7V[\x90V[a\0\x80V[a\0|V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x077\x90a\x01\x18V[\x90RV[a\x07D\x90a\x01\x98V[\x90RV[\x90``\x80a\x07\x8E\x93a\x07`_\x82\x01Q_\x86\x01\x90a\x07.V[a\x07r` \x82\x01Q` \x86\x01\x90a\x07.V[a\x07\x84`@\x82\x01Q`@\x86\x01\x90a\x07;V[\x01Q\x91\x01\x90a\x07.V[V[\x90a\x07\x9D\x81`\x80\x93a\x07HV[\x01\x90V[` \x01\x90V[\x90a\x07\xC4a\x07\xBEa\x07\xB7\x84a\x05\xADV[\x80\x93a\x07\x1FV[\x92a\x07(V[\x90_[\x81\x81\x10a\x07\xD4WPPP\x90V[\x90\x91\x92a\x07\xEDa\x07\xE7`\x01\x92\x86Qa\x07\x90V[\x94a\x07\xA1V[\x91\x01\x91\x90\x91a\x07\xC7V[\x91a\x08\x1A\x92a\x08\r`@\x82\x01\x93_\x83\x01\x90a\x02\x8CV[` \x81\x84\x03\x91\x01Ra\x07\xA7V[\x90V[a\x08%a\0rV[=_\x82>=\x90\xFD[Q\x90V[\x90a\x08;\x82a\x08-V[\x81\x10\x15a\x08LW` \x80\x91\x02\x01\x01\x90V[a\x05\x99V[a\x08Ya\x04>V[P_a\x08wa\x08ra\x08m` \x85\x01a\x04BV[a\x04zV[a\x04\x92V[a\t=a\x08\x8Ca\x08\x87`\x01a\x04\xA1V[a\x05rV[\x91a\x08\xB7a\x08\x9C`@\x87\x01a\x04BV[\x85a\x08\xB0\x86a\x08\xAA\x83a\x05\xD4V[\x90a\x05\xB1V[Q\x01a\x05\xF0V[a\x08\xE2a\x08\xC6``\x87\x01a\x04BV[` a\x08\xDB\x86a\x08\xD5\x89a\x05\xD4V[\x90a\x05\xB1V[Q\x01a\x05\xF0V[a\t\ra\x08\xF1`\xC0\x87\x01a\x05\xFEV[`@a\t\x06\x86a\t\0\x89a\x05\xD4V[\x90a\x05\xB1V[Q\x01a\x06\x0BV[a\t8a\t\x1C`\xE0\x87\x01a\x04BV[``a\t1\x86a\t+\x89a\x05\xD4V[\x90a\x05\xB1V[Q\x01a\x05\xF0V[a\x06%V[a\tja\tQ`\xA0cU\t\xA1\xAC\x96\x01a\x061V[\x92\x94a\tua\t^a\0rV[\x96\x87\x95\x86\x94\x85\x94a\x06>V[\x84R`\x04\x84\x01a\x07\xF7V[\x03\x91Z\xFA\x90\x81\x15a\t\xCAWa\t\xA5\x91a\t\xA0\x91_\x91a\t\xA8W[Pa\t\x9A`\x01a\x04\xA1V[\x90a\x081V[a\x061V[\x90V[a\t\xC4\x91P=\x80_\x83>a\t\xBC\x81\x83a\0\xA6V[\x81\x01\x90a\x06\xEAV[_a\t\x8FV[a\x08\x1DV[a\t\xD8\x90a\x04RV[\x90V[a\t\xE4\x90a\t\xCFV[\x90V[a\t\xF0\x90a\x06\x19V[\x90V[\x90PQ\x90a\n\0\x82a\x01$V[V[\x90` \x82\x82\x03\x12a\n\x1BWa\n\x18\x91_\x01a\t\xF3V[\x90V[a\0|V[`\x01a\n,\x91\x01a\x01rV[\x90V[\x90` \x82\x82\x03\x12a\nHWa\nE\x91_\x01a\x06aV[\x90V[a\0|V[`@\x90a\nva\n}\x94\x96\x95\x93\x96a\nl``\x84\x01\x98_\x85\x01\x90a\x02\x8CV[` \x83\x01\x90a\x02\x8CV[\x01\x90a\x02\x8CV[V[a\n\x87a\x04>V[Pa\n\x9Ca\n\x97` \x83\x01a\x04BV[a\t\xDBV[\x90a\n\xA5a\x04>V[a\n\xADa\x04>V[\x90a\n\xB7_a\x05\xD4V[[\x81a\n\xCBa\n\xC5\x85a\x01rV[\x91a\x01rV[\x03a\x0C`Wa\x0B\x08` a\n\xDE\x87a\t\xE7V[c\xC6a\x06W\x90a\n\xFD\x85\x92a\n\xF1a\0rV[\x95\x86\x94\x85\x93\x84\x93a\x06>V[\x83R`\x04\x83\x01a\x02\x99V[\x03\x91Z\xFA\x90\x81\x15a\x0C[W_\x91a\x0C-W[P\x80a\x0B9a\x0B3a\x0B.`@\x89\x01a\x04BV[a\x01\x18V[\x91a\x01\x18V[\x14_\x14a\x0B\xFCWP\x80\x91P\x90[\x81a\x0BYa\x0BS\x85a\x01rV[\x91a\x01rV[\x03a\x0BlWa\x0Bg\x90a\n V[a\n\xB8V[Pa\x0B\xA8a\x0B}` \x94\x95[a\t\xE7V[\x91a\x0B\xB3a\x0B\x94`\xA0cUmn\x9F\x93\x96\x98\x01a\x061V[a\x0B\x9Ca\0rV[\x97\x88\x96\x87\x95\x86\x95a\x06>V[\x85R`\x04\x85\x01a\nMV[\x03\x91Z\xFA\x90\x81\x15a\x0B\xF7W_\x91a\x0B\xC9W[P\x90V[a\x0B\xEA\x91P` =\x81\x11a\x0B\xF0W[a\x0B\xE2\x81\x83a\0\xA6V[\x81\x01\x90a\n/V[_a\x0B\xC5V[P=a\x0B\xD8V[a\x08\x1DV[a\x0C\x19a\x0C\x13a\x0C\x0E``\x88\x01a\x04BV[a\x01\x18V[\x91a\x01\x18V[\x14a\x0C$W[a\x0BFV[\x80\x92P\x91a\x0C\x1FV[a\x0CN\x91P` =\x81\x11a\x0CTW[a\x0CF\x81\x83a\0\xA6V[\x81\x01\x90a\n\x02V[_a\x0B\x1AV[P=a\x0C<V[a\x08\x1DV[Pa\x0B\xA8a\x0B}` \x94\x95a\x0BxV[`\xA0a\x0C\xC1\x91a\x0C~a\x04>V[Pa\x0C\xB9a\x0C\xAFa\x0C\x91` \x84\x01a\x04BV[a\x0C\x9D`@\x85\x01a\x04BV[a\x0C\xA9``\x86\x01a\x04BV[\x91a\x13\xBDV[\x93\x90\x93\x92\x01a\x061V[\x91\x90\x91a\x16\x99V[\x90V[a\x0C\xCD\x90a\x04RV[\x90V[a\x0C\xD9\x90a\x0C\xC4V[\x90V[a\x0C\xE6`\xA0a\0\xCFV[\x90V[_\x90V[_\x90V[_\x90V[a\x0C\xFDa\x0C\xDCV[\x90` \x80\x80\x80\x80\x86a\r\ra\x04\xFEV[\x81R\x01a\r\x18a\x04\xFEV[\x81R\x01a\r#a\x0C\xE9V[\x81R\x01a\r.a\x0C\xEDV[\x81R\x01a\r9a\x0C\xF1V[\x81RPPV[a\rGa\x0C\xF5V[\x90V[\x90a\rT\x90a\x01rV[\x90RV[a\rb\x90Qa\x01GV[\x90V[\x90a\ro\x90a\x01GV[\x90RV[a\r\x87a\r\x82a\r\x8C\x92a\x05\xD1V[a\x04OV[a\x01\rV[\x90V[\x90a\r\x99\x90a\x01\rV[\x90RV[a\r\xA6\x90a\x06\x19V[\x90V[a\r\xB2\x81a\x01\rV[\x03a\r\xB9WV[_\x80\xFD[\x90PQ\x90a\r\xCA\x82a\r\xA9V[V[c\xFF\xFF\xFF\xFF\x16\x90V[a\r\xDE\x81a\r\xCCV[\x03a\r\xE5WV[_\x80\xFD[\x90PQ\x90a\r\xF6\x82a\r\xD5V[V[`\x80\x81\x83\x03\x12a\x0E9Wa\x0E\x0E\x82_\x83\x01a\x06aV[\x92a\x0E6a\x0E\x1F\x84` \x85\x01a\r\xBDV[\x93a\x0E-\x81`@\x86\x01a\r\xE9V[\x93``\x01a\x06aV[\x90V[a\0|V[a\x0EG\x90a\x01rV[\x90RV[a\x0ET\x90a\x01GV[\x90RV[a\x0Ea\x90a\x01\rV[\x90RV[\x90`\x80\x80a\x0E\xBD\x93a\x0E}_\x82\x01Q_\x86\x01\x90a\x07.V[a\x0E\x8F` \x82\x01Q` \x86\x01\x90a\x07.V[a\x0E\xA1`@\x82\x01Q`@\x86\x01\x90a\x0E>V[a\x0E\xB3``\x82\x01Q``\x86\x01\x90a\x0EKV[\x01Q\x91\x01\x90a\x0EXV[V[\x91\x90a\x0E\xD2\x90_`\xA0\x85\x01\x94\x01\x90a\x0EeV[V[`\x80a\x0F\xA1\x91a\x0E\xE2a\x04>V[Pa\x0Fya\x0E\xFAa\x0E\xF5` \x84\x01a\x04BV[a\x0C\xD0V[a\x0F`a\x0FW\x85a\x0F\ta\r?V[\x95a\x0F!a\x0F\x19`@\x83\x01a\x04BV[_\x89\x01a\x05\xF0V[a\x0F9a\x0F0``\x83\x01a\x04BV[` \x89\x01a\x05\xF0V[a\x0FQa\x0FH`\xA0\x83\x01a\x061V[`@\x89\x01a\rJV[\x01a\rXV[``\x85\x01a\reV[a\x0Fta\x0Fl_a\rsV[\x85\x85\x01a\r\x8FV[a\r\x9DV[a\x0F\x96_c\xC6\xA5\x02ja\x0F\x8Aa\0rV[\x96\x87\x95\x86\x94\x85\x93a\x06>V[\x83R`\x04\x83\x01a\x0E\xBFV[\x03\x92Z\xF1\x90\x81\x15a\x0F\xE6W_\x91a\x0F\xB7W[P\x90V[a\x0F\xD8\x91P`\x80=\x81\x11a\x0F\xDFW[a\x0F\xD0\x81\x83a\0\xA6V[\x81\x01\x90a\r\xF8V[PPa\x0F\xB3V[P=a\x0F\xC6V[a\x08\x1DV[P\x90V[\x91\x90\x81\x10\x15a\x10\0Wa\x01\0\x02\x01\x90V[a\x05\x99V[a\x10\x10\x906\x90a\x01\xC0V[\x90V[a\x10\x1D\x90Qa\0\xE4V[\x90V[a\x104a\x10/a\x109\x92a\x05\xD1V[a\x04OV[a\0\xE4V[\x90V[a\x10Pa\x10Ka\x10U\x92a\x04\x9EV[a\x04OV[a\0\xE4V[\x90V[\x90V[a\x10oa\x10ja\x10t\x92a\x10XV[a\x04OV[a\0\xE4V[\x90V[\x90V[a\x10\x8Ea\x10\x89a\x10\x93\x92a\x10wV[a\x04OV[a\0\xE4V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\xB4Wa\x10\xB0` \x91a\0\x88V[\x01\x90V[a\0\x92V[\x90a\x10\xCBa\x10\xC6\x83a\x10\x96V[a\0\xCFV[\x91\x82RV[_\x7FsimulateCurveSwapIn\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11\x01`\x13a\x10\xB9V[\x90a\x11\x0E` \x83\x01a\x10\xD0V[V[a\x11\x18a\x10\xF7V[\x90V[_\x7FamountOut\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11L`\ta\x10\xB9V[\x90a\x11Y` \x83\x01a\x11\x1BV[V[a\x11ca\x11BV[\x90V[\x90a\x11oa\x04>V[Pa\x11xa\x04>V[\x91a\x11\x84\x81\x83\x90a\x0F\xEBV[\x93a\x11\x8Da\x04>V[\x93[\x84a\x11\xA2a\x11\x9C\x88a\x01rV[\x91a\x01rV[\x10\x15a\x12\xFFWa\x11\xBCa\x11\xB7\x84\x86\x88\x91a\x0F\xEFV[a\x10\x05V[\x90\x80a\x11\xD0a\x11\xCA_a\x05\xD4V[\x91a\x01rV[\x03a\x12\xEDW[a\x11\xE1_\x83\x01a\x10\x13V[a\x11\xF3a\x11\xED_a\x10 V[\x91a\0\xE4V[\x14_\x14a\x12%WPa\x12\x07a\x12\x1F\x91a\x0CpV[\x94[a\x12\x1A\x86a\x12\x15a\x11[V[a\x18\x08V[a\n V[\x93a\x11\x8FV[a\x120_\x83\x01a\x10\x13V[a\x12Ca\x12=`\x01a\x10<V[\x91a\0\xE4V[\x14_\x14a\x12^WPa\x12Wa\x12\x1F\x91a\x0E\xD4V[\x94[a\x12\tV[a\x12i_\x83\x01a\x10\x13V[a\x12|a\x12v`\x02a\x10[V[\x91a\0\xE4V[\x14_\x14a\x12\xA7WPa\x12\xA0a\x12\x1F\x91a\x12\x9Ba\x12\x96a\x11\x10V[a\x17\xA1V[a\n\x7FV[\x94[a\x12YV[\x94\x90a\x12\xB4_\x82\x01a\x10\x13V[a\x12\xC7a\x12\xC1`\x03a\x10zV[\x91a\0\xE4V[\x14a\x12\xD7W[Pa\x12\x1F\x90a\x12\xA2V[a\x12\x1F\x91\x95Pa\x12\xE6\x90a\x08QV[\x94\x90a\x12\xCDV[a\x12\xFA\x81`\xA0\x84\x01a\rJV[a\x11\xD6V[\x93P\x93PPP\x90V[a\x13\x11\x90a\x04RV[\x90V[a\x13\x1D\x90a\x13\x08V[\x90V[a\x13)\x90a\x06\x19V[\x90V[m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x13H\x81a\x13,V[\x03a\x13OWV[_\x80\xFD[\x90PQ\x90a\x13`\x82a\x13?V[V[\x90\x91``\x82\x84\x03\x12a\x13\x97Wa\x13\x94a\x13}\x84_\x85\x01a\x13SV[\x93a\x13\x8B\x81` \x86\x01a\x13SV[\x93`@\x01a\r\xE9V[\x90V[a\0|V[_\x01\x90V[a\x13\xB5a\x13\xB0a\x13\xBA\x92a\x13,V[a\x04OV[a\x01rV[\x90V[``a\x13\xFFa\x13\xFAa\x13\xF5a\x14\x15\x95\x96a\x13\xD5a\x04>V[Pa\x13\xDEa\x04>V[Pa\x13\xEA\x88\x82\x90a\x19\x84V[P\x95\x90\x88\x90\x91a\x1BhV[a\x13\x14V[a\x13 V[c\t\x02\xF1\xAC\x90a\x14\ra\0rV[\x94\x85\x92a\x06>V[\x82R\x81\x80a\x14%`\x04\x82\x01a\x13\x9CV[\x03\x91Z\xFA\x80\x15a\x14\xB3W_\x80\x93\x90\x91a\x14qW[Pa\x14Ya\x14Ra\x14La\x14_\x93a\x13\xA1V[\x94a\x13\xA1V[\x94\x92a\x01\x18V[\x91a\x01\x18V[\x14_\x14a\x14lW\x90[\x90\x91V[a\x14hV[a\x14L\x93Pa\x14_\x91Pa\x14Ra\x14\xA1a\x14Y\x92``=\x81\x11a\x14\xACW[a\x14\x99\x81\x83a\0\xA6V[\x81\x01\x90a\x13bV[P\x95P\x92PPa\x149V[P=a\x14\x8FV[a\x08\x1DV[` \x91\x81R\x01\x90V[` \x7FNPUT_AMOUNT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FUniswapV2Library: INSUFFICIENT_I_\x82\x01R\x01RV[a\x15\x1B`+`@\x92a\x14\xB8V[a\x15$\x81a\x14\xC1V[\x01\x90V[a\x15=\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x0EV[\x90V[\x15a\x15GWV[a\x15Oa\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15e`\x04\x82\x01a\x15(V[\x03\x90\xFD[` \x7FIQUIDITY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FUniswapV2Library: INSUFFICIENT_L_\x82\x01R\x01RV[a\x15\xC3`(`@\x92a\x14\xB8V[a\x15\xCC\x81a\x15iV[\x01\x90V[a\x15\xE5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xB6V[\x90V[\x15a\x15\xEFWV[a\x15\xF7a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\r`\x04\x82\x01a\x15\xD0V[\x03\x90\xFD[\x90V[a\x16(a\x16#a\x16-\x92a\x16\x11V[a\x04OV[a\x01rV[\x90V[\x90V[a\x16Ga\x16Ba\x16L\x92a\x160V[a\x04OV[a\x01rV[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x16\x83a\x16\x89\x91a\x01rV[\x91a\x01rV[\x90\x81\x15a\x16\x94W\x04\x90V[a\x16OV[a\x17'\x92a\x17\x1Ca\x17\na\x17\x03a\x17!\x94a\x16\xB2a\x04>V[Pa\x16\xCF\x81a\x16\xC9a\x16\xC3_a\x05\xD4V[\x91a\x01rV[\x11a\x15@V[\x86a\x16\xE2a\x16\xDC_a\x05\xD4V[\x91a\x01rV[\x11\x80a\x17*W[a\x16\xF2\x90a\x15\xE8V[a\x16\xFDa\x03\xE5a\x16\x14V[\x90a\x1D\0V[\x92\x83a\x1D\0V[\x93a\x17\x16a\x03\xE8a\x163V[\x90a\x1D\0V[a\x1E\x13V[\x90a\x16wV[\x90V[Pa\x16\xF2\x85a\x17Aa\x17;_a\x05\xD4V[\x91a\x01rV[\x11\x90Pa\x16\xE9V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x17wa\x17\x80` \x93a\x17\x85\x93a\x17n\x81a\x17IV[\x93\x84\x80\x93a\x14\xB8V[\x95\x86\x91\x01a\x17MV[a\0\x88V[\x01\x90V[a\x17\x9E\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x17XV[\x90V[a\x17\xCCa\x17\xDBa\x17\xE0\x92a\x17\xB3a\0rV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x17\x89V[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA6V[a\x1EHV[V[\x92\x91` a\x17\xFEa\x18\x06\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x17XV[\x94\x01\x90a\x02\x8CV[V[\x90a\x18Ca\x18H\x92a\x184a\x18\x1Ba\0rV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x17\xE2V[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA6V[a\x1EHV[V[_\x90V[` \x7FESSES\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FUniswapV2Library: IDENTICAL_ADDR_\x82\x01R\x01RV[a\x18\xA8`%`@\x92a\x14\xB8V[a\x18\xB1\x81a\x18NV[\x01\x90V[a\x18\xCA\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\x9BV[\x90V[\x15a\x18\xD4WV[a\x18\xDCa\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\xF2`\x04\x82\x01a\x18\xB5V[\x03\x90\xFD[a\x18\xFF\x90a\rsV[\x90V[_\x7FUniswapV2Library: ZERO_ADDRESS\0\0\x91\x01RV[a\x196`\x1E` \x92a\x14\xB8V[a\x19?\x81a\x19\x02V[\x01\x90V[a\x19X\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19)V[\x90V[\x15a\x19bWV[a\x19ja\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\x80`\x04\x82\x01a\x19CV[\x03\x90\xFD[a\x19\x8Ca\x18JV[Pa\x19\x95a\x18JV[Pa\x19\xB3\x81a\x19\xACa\x19\xA6\x85a\x01\x18V[\x91a\x01\x18V[\x14\x15a\x18\xCDV[\x80a\x19\xC6a\x19\xC0\x84a\x01\x18V[\x91a\x01\x18V[\x10_\x14a\x19\xF8W\x90[\x90\x91a\x19\xF6\x83a\x19\xEFa\x19\xE9a\x19\xE4_a\x18\xF6V[a\x01\x18V[\x91a\x01\x18V[\x14\x15a\x19[V[V[a\x19\xCFV[\x90V[\x90V[_\x1B\x90V[a\x1A\x1Ca\x1A\x17a\x1A!\x92a\x19\xFDV[a\x1A\x03V[a\x1A\0V[\x90V[``\x1B\x90V[a\x1A3\x90a\x1A$V[\x90V[a\x1A?\x90a\x1A*V[\x90V[a\x1ANa\x1AS\x91a\x01\x18V[a\x1A6V[\x90RV[`\x14\x81a\x1Aia\x1Aq\x93\x83\x96\x95a\x1ABV[\x01\x80\x92a\x1ABV[\x01\x90V[` \x01\x90V[Q\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x1A\xA5a\x1A\xA0a\x1A\xAA\x92a\x1A\x7FV[a\x1A\x8BV[a\x1A\x82V[\x90V[\x90V[a\x1A\xBCa\x1A\xC1\x91a\x1A\x82V[a\x1A\xADV[\x90RV[\x90V[a\x1A\xD4a\x1A\xD9\x91a\x1A\0V[a\x1A\xC5V[\x90RV[\x92a\x1B\x0B`\x14a\x1B\x13\x94a\x1B\x03`\x01\x88a\x1A\xFB` \x9B\x9A\x8C\x99a\x1A\xB0V[\x01\x80\x92a\x1ABV[\x01\x80\x92a\x1A\xC8V[\x01\x80\x92a\x1A\xC8V[\x01\x90V[_\x1C\x90V[a\x1B0a\x1B+a\x1B5\x92a\x01rV[a\x04OV[a\x01rV[\x90V[a\x1BDa\x1BI\x91a\x1B\x17V[a\x1B\x1CV[\x90V[a\x1B`a\x1B[a\x1Be\x92a\x01rV[a\x04OV[a\x01\rV[\x90V[a\x1C\x15a\x1C$a\x1C<\x92a\x1B\x8Ba\x1CF\x96a\x1CA\x96a\x1B\x85a\x18JV[Pa\x19\x84V[\x93\x90\x93a\x1B\xE1a\x1B\xBA\x7F\x96\xE8\xACBw\x19\x8F\xF8\xB6\xF7\x85G\x8A\xA9\xA3\x9F@<\xB7h\xDD\x02\xCB\xEE2l>}\xA3H\x84_a\x1A\x08V[\x95a\x1B\xD2a\x1B\xC6a\0rV[\x93\x84\x92` \x84\x01a\x1AWV[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA6V[a\x1B\xF3a\x1B\xED\x82a\x1A{V[\x91a\x1AuV[ \x93a\x1B\xFF`\xFFa\x1A\x91V[\x92\x94a\x1C\ta\0rV[\x95\x86\x94` \x86\x01a\x1A\xDDV[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA6V[a\x1C6a\x1C0\x82a\x1A{V[\x91a\x1AuV[ a\x1B8V[a\x1BLV[a\x06\x19V[\x90V[a\x1CXa\x1C^\x91\x93\x92\x93a\x01rV[\x92a\x01rV[\x91a\x1Cj\x83\x82\x02a\x01rV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x1CyWV[a\x16cV[_\x7Fds-math-mul-overflow\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x1C\xB2`\x14` \x92a\x14\xB8V[a\x1C\xBB\x81a\x1C~V[\x01\x90V[a\x1C\xD4\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1C\xA5V[\x90V[\x15a\x1C\xDEWV[a\x1C\xE6a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1C\xFC`\x04\x82\x01a\x1C\xBFV[\x03\x90\xFD[\x91\x90\x91a\x1D\x0Ba\x04>V[\x92\x80a\x1D\x1Fa\x1D\x19_a\x05\xD4V[\x91a\x01rV[\x14\x91\x82\x15a\x1D5W[PPa\x1D3\x90a\x1C\xD7V[V[\x90\x93Pa\x1D3\x91Pa\x1Dda\x1D^a\x1DXa\x1DQ\x84\x88\x90a\x1CIV[\x96\x87a\x16wV[\x92a\x01rV[\x91a\x01rV[\x14\x90_a\x1D(V[a\x1D{a\x1D\x81\x91\x93\x92\x93a\x01rV[\x92a\x01rV[\x82\x01\x80\x92\x11a\x1D\x8CWV[a\x16cV[_\x7Fds-math-add-overflow\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x1D\xC5`\x14` \x92a\x14\xB8V[a\x1D\xCE\x81a\x1D\x91V[\x01\x90V[a\x1D\xE7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1D\xB8V[\x90V[\x15a\x1D\xF1WV[a\x1D\xF9a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1E\x0F`\x04\x82\x01a\x1D\xD2V[\x03\x90\xFD[\x91\x90a\x1E+a\x1EF\x91a\x1E$a\x04>V[P\x84a\x1DlV[\x92a\x1E?a\x1E9\x85\x92a\x01rV[\x91a\x01rV[\x10\x15a\x1D\xEAV[V[a\x1E[\x90a\x1EV`\x01a\x1E\x87V[a\x1E\xA7V[V[jconsole.log\x90V[_\x80\x91a\x1Ewa\x1E]V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x1E\x8Fa\x1E\x83V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x1E\x93Wa\x1E\xB7\x90a\x1ElV[V\xFE\xA2dipfsX\"\x12 \xFC)\x94\x1B\xA1\x89\xDEH\x99\xE5\xAF2mg\x1D\xBD-\xC9|D\x89\x0F\x07\xA3\xCF\xAFM\xC8|\xC0B\xA0dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61043a565b61001d5f3561006c565b806312c0c368146100675780636a1ad1af146100625780636dabe3801461005d578063933d4379146100585763b5c983ac0361000e57610404565b61034d565b610318565b6102e3565b6102ae565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100b090610088565b810190811067ffffffffffffffff8211176100ca57604052565b610092565b906100e26100db610072565b92836100a6565b565b60ff1690565b6100f3816100e4565b036100fa57565b5f80fd5b9050359061010b826100ea565b565b60018060a01b031690565b6101219061010d565b90565b61012d81610118565b0361013457565b5f80fd5b9050359061014582610124565b565b62ffffff1690565b61015881610147565b0361015f57565b5f80fd5b905035906101708261014f565b565b90565b61017e81610172565b0361018557565b5f80fd5b9050359061019682610175565b565b151590565b6101a681610198565b036101ad57565b5f80fd5b905035906101be8261019d565b565b91906101008382031261026857610261906101dc6101006100cf565b936101e9825f83016100fe565b5f8601526101fa8260208301610138565b602086015261020c8260408301610138565b604086015261021e8260608301610138565b60608601526102308260808301610163565b60808601526102428260a08301610189565b60a08601526102548260c083016101b1565b60c086015260e001610138565b60e0830152565b610084565b906101008282031261028757610284915f016101c0565b90565b61007c565b61029590610172565b9052565b91906102ac905f6020850194019061028c565b565b346102de576102da6102c96102c436600461026d565b610851565b6102d1610072565b91829182610299565b0390f35b610078565b346103135761030f6102fe6102f936600461026d565b610a7f565b610306610072565b91829182610299565b0390f35b610078565b346103485761034461033361032e36600461026d565b610c70565b61033b610072565b91829182610299565b0390f35b610078565b3461037d5761037961036861036336600461026d565b610ed4565b610370610072565b91829182610299565b0390f35b610078565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103c95781359167ffffffffffffffff83116103c4576020019261010083028401116103bf57565b61038a565b610386565b610382565b906020828203126103ff575f82013567ffffffffffffffff81116103fa576103f6920161038e565b9091565b610080565b61007c565b346104355761043161042061041a3660046103ce565b90611166565b610428610072565b91829182610299565b0390f35b610078565b5f80fd5b5f90565b61044c9051610118565b90565b90565b61046661046161046b9261010d565b61044f565b61010d565b90565b61047790610452565b90565b6104839061046e565b90565b61048f90610452565b90565b61049b90610486565b90565b90565b6104b56104b06104ba9261049e565b61044f565b610172565b90565b67ffffffffffffffff81116104d55760208091020190565b610092565b906104ec6104e7836104bd565b6100cf565b918252565b6104fb60806100cf565b90565b5f90565b5f90565b61050e6104f1565b9060208080808561051d6104fe565b8152016105286104fe565b815201610533610502565b81520161053e6104fe565b81525050565b61054c610506565b90565b5f5b82811061055d57505050565b602090610568610544565b8184015201610551565b9061059761057f836104da565b9260208061058d86936104bd565b920191039061054f565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b906105bb826105ad565b8110156105cc576020809102010190565b610599565b90565b6105e86105e36105ed926105d1565b61044f565b610172565b90565b906105fa90610118565b9052565b6106089051610198565b90565b9061061590610198565b9052565b61062290610452565b90565b61062e90610619565b90565b61063b9051610172565b90565b60e01b90565b67ffffffffffffffff811161065c5760208091020190565b610092565b9050519061066e82610175565b565b9092919261068561068082610644565b6100cf565b93818552602080860192028301928184116106c257915b8383106106a95750505050565b602080916106b78486610661565b81520192019161069c565b61038a565b9080601f830112156106e5578160206106e293519101610670565b90565b610382565b9060208282031261071a575f82015167ffffffffffffffff81116107155761071292016106c7565b90565b610080565b61007c565b60209181520190565b60200190565b61073790610118565b9052565b61074490610198565b9052565b9060608061078e936107605f8201515f86019061072e565b6107726020820151602086019061072e565b6107846040820151604086019061073b565b015191019061072e565b565b9061079d81608093610748565b0190565b60200190565b906107c46107be6107b7846105ad565b809361071f565b92610728565b905f5b8181106107d45750505090565b9091926107ed6107e76001928651610790565b946107a1565b91019190916107c7565b9161081a9261080d60408201935f83019061028c565b60208184039101526107a7565b90565b610825610072565b3d5f823e3d90fd5b5190565b9061083b8261082d565b81101561084c576020809102010190565b610599565b61085961043e565b505f61087761087261086d60208501610442565b61047a565b610492565b61093d61088c61088760016104a1565b610572565b916108b761089c60408701610442565b856108b0866108aa836105d4565b906105b1565b51016105f0565b6108e26108c660608701610442565b60206108db866108d5896105d4565b906105b1565b51016105f0565b61090d6108f160c087016105fe565b604061090686610900896105d4565b906105b1565b510161060b565b61093861091c60e08701610442565b60606109318661092b896105d4565b906105b1565b51016105f0565b610625565b61096a61095160a0635509a1ac9601610631565b929461097561095e610072565b9687958694859461063e565b8452600484016107f7565b03915afa9081156109ca576109a5916109a0915f916109a8575b5061099a60016104a1565b90610831565b610631565b90565b6109c491503d805f833e6109bc81836100a6565b8101906106ea565b5f61098f565b61081d565b6109d890610452565b90565b6109e4906109cf565b90565b6109f090610619565b90565b90505190610a0082610124565b565b90602082820312610a1b57610a18915f016109f3565b90565b61007c565b6001610a2c9101610172565b90565b90602082820312610a4857610a45915f01610661565b90565b61007c565b604090610a76610a7d9496959396610a6c60608401985f85019061028c565b602083019061028c565b019061028c565b565b610a8761043e565b50610a9c610a9760208301610442565b6109db565b90610aa561043e565b610aad61043e565b90610ab75f6105d4565b5b81610acb610ac585610172565b91610172565b03610c6057610b086020610ade876109e7565b63c661065790610afd8592610af1610072565b9586948593849361063e565b835260048301610299565b03915afa908115610c5b575f91610c2d575b5080610b39610b33610b2e60408901610442565b610118565b91610118565b145f14610bfc5750809150905b81610b59610b5385610172565b91610172565b03610b6c57610b6790610a20565b610ab8565b50610ba8610b7d602094955b6109e7565b91610bb3610b9460a063556d6e9f93969801610631565b610b9c610072565b9788968795869561063e565b855260048501610a4d565b03915afa908115610bf7575f91610bc9575b5090565b610bea915060203d8111610bf0575b610be281836100a6565b810190610a2f565b5f610bc5565b503d610bd8565b61081d565b610c19610c13610c0e60608801610442565b610118565b91610118565b14610c24575b610b46565b80925091610c1f565b610c4e915060203d8111610c54575b610c4681836100a6565b810190610a02565b5f610b1a565b503d610c3c565b61081d565b50610ba8610b7d60209495610b78565b60a0610cc191610c7e61043e565b50610cb9610caf610c9160208401610442565b610c9d60408501610442565b610ca960608601610442565b916113bd565b9390939201610631565b919091611699565b90565b610ccd90610452565b90565b610cd990610cc4565b90565b610ce660a06100cf565b90565b5f90565b5f90565b5f90565b610cfd610cdc565b9060208080808086610d0d6104fe565b815201610d186104fe565b815201610d23610ce9565b815201610d2e610ced565b815201610d39610cf1565b81525050565b610d47610cf5565b90565b90610d5490610172565b9052565b610d629051610147565b90565b90610d6f90610147565b9052565b610d87610d82610d8c926105d1565b61044f565b61010d565b90565b90610d999061010d565b9052565b610da690610619565b90565b610db28161010d565b03610db957565b5f80fd5b90505190610dca82610da9565b565b63ffffffff1690565b610dde81610dcc565b03610de557565b5f80fd5b90505190610df682610dd5565b565b608081830312610e3957610e0e825f8301610661565b92610e36610e1f8460208501610dbd565b93610e2d8160408601610de9565b93606001610661565b90565b61007c565b610e4790610172565b9052565b610e5490610147565b9052565b610e619061010d565b9052565b90608080610ebd93610e7d5f8201515f86019061072e565b610e8f6020820151602086019061072e565b610ea160408201516040860190610e3e565b610eb360608201516060860190610e4b565b0151910190610e58565b565b9190610ed2905f60a08501940190610e65565b565b6080610fa191610ee261043e565b50610f79610efa610ef560208401610442565b610cd0565b610f60610f5785610f09610d3f565b95610f21610f1960408301610442565b5f89016105f0565b610f39610f3060608301610442565b602089016105f0565b610f51610f4860a08301610631565b60408901610d4a565b01610d58565b60608501610d65565b610f74610f6c5f610d73565b858501610d8f565b610d9d565b610f965f63c6a5026a610f8a610072565b9687958694859361063e565b835260048301610ebf565b03925af1908115610fe6575f91610fb7575b5090565b610fd8915060803d8111610fdf575b610fd081836100a6565b810190610df8565b5050610fb3565b503d610fc6565b61081d565b5090565b919081101561100057610100020190565b610599565b6110109036906101c0565b90565b61101d90516100e4565b90565b61103461102f611039926105d1565b61044f565b6100e4565b90565b61105061104b6110559261049e565b61044f565b6100e4565b90565b90565b61106f61106a61107492611058565b61044f565b6100e4565b90565b90565b61108e61108961109392611077565b61044f565b6100e4565b90565b67ffffffffffffffff81116110b4576110b0602091610088565b0190565b610092565b906110cb6110c683611096565b6100cf565b918252565b5f7f73696d756c617465437572766553776170496e00000000000000000000000000910152565b61110160136110b9565b9061110e602083016110d0565b565b6111186110f7565b90565b5f7f616d6f756e744f75740000000000000000000000000000000000000000000000910152565b61114c60096110b9565b906111596020830161111b565b565b611163611142565b90565b9061116f61043e565b5061117861043e565b91611184818390610feb565b9361118d61043e565b935b846111a261119c88610172565b91610172565b10156112ff576111bc6111b784868891610fef565b611005565b90806111d06111ca5f6105d4565b91610172565b036112ed575b6111e15f8301611013565b6111f36111ed5f611020565b916100e4565b145f14611225575061120761121f91610c70565b945b61121a8661121561115b565b611808565b610a20565b9361118f565b6112305f8301611013565b61124361123d600161103c565b916100e4565b145f1461125e575061125761121f91610ed4565b945b611209565b6112695f8301611013565b61127c611276600261105b565b916100e4565b145f146112a757506112a061121f9161129b611296611110565b6117a1565b610a7f565b945b611259565b94906112b45f8201611013565b6112c76112c1600361107a565b916100e4565b146112d7575b5061121f906112a2565b61121f9195506112e690610851565b94906112cd565b6112fa8160a08401610d4a565b6111d6565b93509350505090565b61131190610452565b90565b61131d90611308565b90565b61132990610619565b90565b6dffffffffffffffffffffffffffff1690565b6113488161132c565b0361134f57565b5f80fd5b905051906113608261133f565b565b90916060828403126113975761139461137d845f8501611353565b9361138b8160208601611353565b93604001610de9565b90565b61007c565b5f0190565b6113b56113b06113ba9261132c565b61044f565b610172565b90565b60606113ff6113fa6113f561141595966113d561043e565b506113de61043e565b506113ea888290611984565b509590889091611b68565b611314565b611320565b630902f1ac9061140d610072565b94859261063e565b825281806114256004820161139c565b03915afa80156114b3575f80939091611471575b5061145961145261144c61145f936113a1565b946113a1565b9492610118565b91610118565b145f1461146c57905b9091565b611468565b61144c935061145f91506114526114a16114599260603d81116114ac575b61149981836100a6565b810190611362565b509550925050611439565b503d61148f565b61081d565b60209181520190565b60207f4e5055545f414d4f554e54000000000000000000000000000000000000000000917f556e697377617056324c6962726172793a20494e53554646494349454e545f495f8201520152565b61151b602b6040926114b8565b611524816114c1565b0190565b61153d9060208101905f81830391015261150e565b90565b1561154757565b61154f610072565b62461bcd60e51b81528061156560048201611528565b0390fd5b60207f4951554944495459000000000000000000000000000000000000000000000000917f556e697377617056324c6962726172793a20494e53554646494349454e545f4c5f8201520152565b6115c360286040926114b8565b6115cc81611569565b0190565b6115e59060208101905f8183039101526115b6565b90565b156115ef57565b6115f7610072565b62461bcd60e51b81528061160d600482016115d0565b0390fd5b90565b61162861162361162d92611611565b61044f565b610172565b90565b90565b61164761164261164c92611630565b61044f565b610172565b90565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b61168361168991610172565b91610172565b908115611694570490565b61164f565b6117279261171c61170a611703611721946116b261043e565b506116cf816116c96116c35f6105d4565b91610172565b11611540565b866116e26116dc5f6105d4565b91610172565b118061172a575b6116f2906115e8565b6116fd6103e5611614565b90611d00565b9283611d00565b936117166103e8611633565b90611d00565b611e13565b90611677565b90565b506116f28561174161173b5f6105d4565b91610172565b1190506116e9565b5190565b90825f9392825e0152565b6117776117806020936117859361176e81611749565b938480936114b8565b9586910161174d565b610088565b0190565b61179e9160208201915f818403910152611758565b90565b6117cc6117db6117e0926117b3610072565b92839160046020840163104c13eb60e21b815201611789565b602082018103825203826100a6565b611e48565b565b929160206117fe6118069360408701908782035f890152611758565b94019061028c565b565b906118436118489261183461181b610072565b938492600460208501632d839cb360e21b8152016117e2565b602082018103825203826100a6565b611e48565b565b5f90565b60207f4553534553000000000000000000000000000000000000000000000000000000917f556e697377617056324c6962726172793a204944454e544943414c5f414444525f8201520152565b6118a860256040926114b8565b6118b18161184e565b0190565b6118ca9060208101905f81830391015261189b565b90565b156118d457565b6118dc610072565b62461bcd60e51b8152806118f2600482016118b5565b0390fd5b6118ff90610d73565b90565b5f7f556e697377617056324c6962726172793a205a45524f5f414444524553530000910152565b611936601e6020926114b8565b61193f81611902565b0190565b6119589060208101905f818303910152611929565b90565b1561196257565b61196a610072565b62461bcd60e51b81528061198060048201611943565b0390fd5b61198c61184a565b5061199561184a565b506119b3816119ac6119a685610118565b91610118565b14156118cd565b806119c66119c084610118565b91610118565b105f146119f857905b90916119f6836119ef6119e96119e45f6118f6565b610118565b91610118565b141561195b565b565b6119cf565b90565b90565b5f1b90565b611a1c611a17611a21926119fd565b611a03565b611a00565b90565b60601b90565b611a3390611a24565b90565b611a3f90611a2a565b90565b611a4e611a5391610118565b611a36565b9052565b601481611a69611a7193839695611a42565b018092611a42565b0190565b60200190565b5190565b90565b60ff60f81b1690565b60f81b90565b611aa5611aa0611aaa92611a7f565b611a8b565b611a82565b90565b90565b611abc611ac191611a82565b611aad565b9052565b90565b611ad4611ad991611a00565b611ac5565b9052565b92611b0b6014611b1394611b03600188611afb60209b9a8c99611ab0565b018092611a42565b018092611ac8565b018092611ac8565b0190565b5f1c90565b611b30611b2b611b3592610172565b61044f565b610172565b90565b611b44611b4991611b17565b611b1c565b90565b611b60611b5b611b6592610172565b61044f565b61010d565b90565b611c15611c24611c3c92611b8b611c4696611c4196611b8561184a565b50611984565b939093611be1611bba7f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f611a08565b95611bd2611bc6610072565b93849260208401611a57565b602082018103825203826100a6565b611bf3611bed82611a7b565b91611a75565b2093611bff60ff611a91565b9294611c09610072565b95869460208601611add565b602082018103825203826100a6565b611c36611c3082611a7b565b91611a75565b20611b38565b611b4c565b610619565b90565b611c58611c5e91939293610172565b92610172565b91611c6a838202610172565b928184041490151715611c7957565b611663565b5f7f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000910152565b611cb260146020926114b8565b611cbb81611c7e565b0190565b611cd49060208101905f818303910152611ca5565b90565b15611cde57565b611ce6610072565b62461bcd60e51b815280611cfc60048201611cbf565b0390fd5b919091611d0b61043e565b9280611d1f611d195f6105d4565b91610172565b14918215611d35575b5050611d3390611cd7565b565b909350611d339150611d64611d5e611d58611d51848890611c49565b9687611677565b92610172565b91610172565b14905f611d28565b611d7b611d8191939293610172565b92610172565b8201809211611d8c57565b611663565b5f7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000910152565b611dc560146020926114b8565b611dce81611d91565b0190565b611de79060208101905f818303910152611db8565b90565b15611df157565b611df9610072565b62461bcd60e51b815280611e0f60048201611dd2565b0390fd5b9190611e2b611e4691611e2461043e565b5084611d6c565b92611e3f611e398592610172565b91610172565b1015611dea565b565b611e5b90611e566001611e87565b611ea7565b565b6a636f6e736f6c652e6c6f6790565b5f8091611e77611e5d565b602082519201905afa50565b5f90565b611e8f611e83565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103611e9357611eb790611e6c565b56fea2646970667358221220fc29941ba189de4899e5af326d671dbd2dc97c44890f07a3cfaf4dc87cc042a064736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04:V[a\0\x1D_5a\0lV[\x80c\x12\xC0\xC3h\x14a\0gW\x80cj\x1A\xD1\xAF\x14a\0bW\x80cm\xAB\xE3\x80\x14a\0]W\x80c\x93=Cy\x14a\0XWc\xB5\xC9\x83\xAC\x03a\0\x0EWa\x04\x04V[a\x03MV[a\x03\x18V[a\x02\xE3V[a\x02\xAEV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xB0\x90a\0\x88V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xCAW`@RV[a\0\x92V[\x90a\0\xE2a\0\xDBa\0rV[\x92\x83a\0\xA6V[V[`\xFF\x16\x90V[a\0\xF3\x81a\0\xE4V[\x03a\0\xFAWV[_\x80\xFD[\x90P5\x90a\x01\x0B\x82a\0\xEAV[V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01!\x90a\x01\rV[\x90V[a\x01-\x81a\x01\x18V[\x03a\x014WV[_\x80\xFD[\x90P5\x90a\x01E\x82a\x01$V[V[b\xFF\xFF\xFF\x16\x90V[a\x01X\x81a\x01GV[\x03a\x01_WV[_\x80\xFD[\x90P5\x90a\x01p\x82a\x01OV[V[\x90V[a\x01~\x81a\x01rV[\x03a\x01\x85WV[_\x80\xFD[\x90P5\x90a\x01\x96\x82a\x01uV[V[\x15\x15\x90V[a\x01\xA6\x81a\x01\x98V[\x03a\x01\xADWV[_\x80\xFD[\x90P5\x90a\x01\xBE\x82a\x01\x9DV[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x02hWa\x02a\x90a\x01\xDCa\x01\0a\0\xCFV[\x93a\x01\xE9\x82_\x83\x01a\0\xFEV[_\x86\x01Ra\x01\xFA\x82` \x83\x01a\x018V[` \x86\x01Ra\x02\x0C\x82`@\x83\x01a\x018V[`@\x86\x01Ra\x02\x1E\x82``\x83\x01a\x018V[``\x86\x01Ra\x020\x82`\x80\x83\x01a\x01cV[`\x80\x86\x01Ra\x02B\x82`\xA0\x83\x01a\x01\x89V[`\xA0\x86\x01Ra\x02T\x82`\xC0\x83\x01a\x01\xB1V[`\xC0\x86\x01R`\xE0\x01a\x018V[`\xE0\x83\x01RV[a\0\x84V[\x90a\x01\0\x82\x82\x03\x12a\x02\x87Wa\x02\x84\x91_\x01a\x01\xC0V[\x90V[a\0|V[a\x02\x95\x90a\x01rV[\x90RV[\x91\x90a\x02\xAC\x90_` \x85\x01\x94\x01\x90a\x02\x8CV[V[4a\x02\xDEWa\x02\xDAa\x02\xC9a\x02\xC46`\x04a\x02mV[a\x08QV[a\x02\xD1a\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[4a\x03\x13Wa\x03\x0Fa\x02\xFEa\x02\xF96`\x04a\x02mV[a\n\x7FV[a\x03\x06a\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[4a\x03HWa\x03Da\x033a\x03.6`\x04a\x02mV[a\x0CpV[a\x03;a\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[4a\x03}Wa\x03ya\x03ha\x03c6`\x04a\x02mV[a\x0E\xD4V[a\x03pa\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\xC9W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\xC4W` \x01\x92a\x01\0\x83\x02\x84\x01\x11a\x03\xBFWV[a\x03\x8AV[a\x03\x86V[a\x03\x82V[\x90` \x82\x82\x03\x12a\x03\xFFW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xFAWa\x03\xF6\x92\x01a\x03\x8EV[\x90\x91V[a\0\x80V[a\0|V[4a\x045Wa\x041a\x04 a\x04\x1A6`\x04a\x03\xCEV[\x90a\x11fV[a\x04(a\0rV[\x91\x82\x91\x82a\x02\x99V[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x90V[a\x04L\x90Qa\x01\x18V[\x90V[\x90V[a\x04fa\x04aa\x04k\x92a\x01\rV[a\x04OV[a\x01\rV[\x90V[a\x04w\x90a\x04RV[\x90V[a\x04\x83\x90a\x04nV[\x90V[a\x04\x8F\x90a\x04RV[\x90V[a\x04\x9B\x90a\x04\x86V[\x90V[\x90V[a\x04\xB5a\x04\xB0a\x04\xBA\x92a\x04\x9EV[a\x04OV[a\x01rV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xD5W` \x80\x91\x02\x01\x90V[a\0\x92V[\x90a\x04\xECa\x04\xE7\x83a\x04\xBDV[a\0\xCFV[\x91\x82RV[a\x04\xFB`\x80a\0\xCFV[\x90V[_\x90V[_\x90V[a\x05\x0Ea\x04\xF1V[\x90` \x80\x80\x80\x85a\x05\x1Da\x04\xFEV[\x81R\x01a\x05(a\x04\xFEV[\x81R\x01a\x053a\x05\x02V[\x81R\x01a\x05>a\x04\xFEV[\x81RPPV[a\x05La\x05\x06V[\x90V[_[\x82\x81\x10a\x05]WPPPV[` \x90a\x05ha\x05DV[\x81\x84\x01R\x01a\x05QV[\x90a\x05\x97a\x05\x7F\x83a\x04\xDAV[\x92` \x80a\x05\x8D\x86\x93a\x04\xBDV[\x92\x01\x91\x03\x90a\x05OV[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x05\xBB\x82a\x05\xADV[\x81\x10\x15a\x05\xCCW` \x80\x91\x02\x01\x01\x90V[a\x05\x99V[\x90V[a\x05\xE8a\x05\xE3a\x05\xED\x92a\x05\xD1V[a\x04OV[a\x01rV[\x90V[\x90a\x05\xFA\x90a\x01\x18V[\x90RV[a\x06\x08\x90Qa\x01\x98V[\x90V[\x90a\x06\x15\x90a\x01\x98V[\x90RV[a\x06\"\x90a\x04RV[\x90V[a\x06.\x90a\x06\x19V[\x90V[a\x06;\x90Qa\x01rV[\x90V[`\xE0\x1B\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\\W` \x80\x91\x02\x01\x90V[a\0\x92V[\x90PQ\x90a\x06n\x82a\x01uV[V[\x90\x92\x91\x92a\x06\x85a\x06\x80\x82a\x06DV[a\0\xCFV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x06\xC2W\x91[\x83\x83\x10a\x06\xA9WPPPPV[` \x80\x91a\x06\xB7\x84\x86a\x06aV[\x81R\x01\x92\x01\x91a\x06\x9CV[a\x03\x8AV[\x90\x80`\x1F\x83\x01\x12\x15a\x06\xE5W\x81` a\x06\xE2\x93Q\x91\x01a\x06pV[\x90V[a\x03\x82V[\x90` \x82\x82\x03\x12a\x07\x1AW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x15Wa\x07\x12\x92\x01a\x06\xC7V[\x90V[a\0\x80V[a\0|V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x077\x90a\x01\x18V[\x90RV[a\x07D\x90a\x01\x98V[\x90RV[\x90``\x80a\x07\x8E\x93a\x07`_\x82\x01Q_\x86\x01\x90a\x07.V[a\x07r` \x82\x01Q` \x86\x01\x90a\x07.V[a\x07\x84`@\x82\x01Q`@\x86\x01\x90a\x07;V[\x01Q\x91\x01\x90a\x07.V[V[\x90a\x07\x9D\x81`\x80\x93a\x07HV[\x01\x90V[` \x01\x90V[\x90a\x07\xC4a\x07\xBEa\x07\xB7\x84a\x05\xADV[\x80\x93a\x07\x1FV[\x92a\x07(V[\x90_[\x81\x81\x10a\x07\xD4WPPP\x90V[\x90\x91\x92a\x07\xEDa\x07\xE7`\x01\x92\x86Qa\x07\x90V[\x94a\x07\xA1V[\x91\x01\x91\x90\x91a\x07\xC7V[\x91a\x08\x1A\x92a\x08\r`@\x82\x01\x93_\x83\x01\x90a\x02\x8CV[` \x81\x84\x03\x91\x01Ra\x07\xA7V[\x90V[a\x08%a\0rV[=_\x82>=\x90\xFD[Q\x90V[\x90a\x08;\x82a\x08-V[\x81\x10\x15a\x08LW` \x80\x91\x02\x01\x01\x90V[a\x05\x99V[a\x08Ya\x04>V[P_a\x08wa\x08ra\x08m` \x85\x01a\x04BV[a\x04zV[a\x04\x92V[a\t=a\x08\x8Ca\x08\x87`\x01a\x04\xA1V[a\x05rV[\x91a\x08\xB7a\x08\x9C`@\x87\x01a\x04BV[\x85a\x08\xB0\x86a\x08\xAA\x83a\x05\xD4V[\x90a\x05\xB1V[Q\x01a\x05\xF0V[a\x08\xE2a\x08\xC6``\x87\x01a\x04BV[` a\x08\xDB\x86a\x08\xD5\x89a\x05\xD4V[\x90a\x05\xB1V[Q\x01a\x05\xF0V[a\t\ra\x08\xF1`\xC0\x87\x01a\x05\xFEV[`@a\t\x06\x86a\t\0\x89a\x05\xD4V[\x90a\x05\xB1V[Q\x01a\x06\x0BV[a\t8a\t\x1C`\xE0\x87\x01a\x04BV[``a\t1\x86a\t+\x89a\x05\xD4V[\x90a\x05\xB1V[Q\x01a\x05\xF0V[a\x06%V[a\tja\tQ`\xA0cU\t\xA1\xAC\x96\x01a\x061V[\x92\x94a\tua\t^a\0rV[\x96\x87\x95\x86\x94\x85\x94a\x06>V[\x84R`\x04\x84\x01a\x07\xF7V[\x03\x91Z\xFA\x90\x81\x15a\t\xCAWa\t\xA5\x91a\t\xA0\x91_\x91a\t\xA8W[Pa\t\x9A`\x01a\x04\xA1V[\x90a\x081V[a\x061V[\x90V[a\t\xC4\x91P=\x80_\x83>a\t\xBC\x81\x83a\0\xA6V[\x81\x01\x90a\x06\xEAV[_a\t\x8FV[a\x08\x1DV[a\t\xD8\x90a\x04RV[\x90V[a\t\xE4\x90a\t\xCFV[\x90V[a\t\xF0\x90a\x06\x19V[\x90V[\x90PQ\x90a\n\0\x82a\x01$V[V[\x90` \x82\x82\x03\x12a\n\x1BWa\n\x18\x91_\x01a\t\xF3V[\x90V[a\0|V[`\x01a\n,\x91\x01a\x01rV[\x90V[\x90` \x82\x82\x03\x12a\nHWa\nE\x91_\x01a\x06aV[\x90V[a\0|V[`@\x90a\nva\n}\x94\x96\x95\x93\x96a\nl``\x84\x01\x98_\x85\x01\x90a\x02\x8CV[` \x83\x01\x90a\x02\x8CV[\x01\x90a\x02\x8CV[V[a\n\x87a\x04>V[Pa\n\x9Ca\n\x97` \x83\x01a\x04BV[a\t\xDBV[\x90a\n\xA5a\x04>V[a\n\xADa\x04>V[\x90a\n\xB7_a\x05\xD4V[[\x81a\n\xCBa\n\xC5\x85a\x01rV[\x91a\x01rV[\x03a\x0C`Wa\x0B\x08` a\n\xDE\x87a\t\xE7V[c\xC6a\x06W\x90a\n\xFD\x85\x92a\n\xF1a\0rV[\x95\x86\x94\x85\x93\x84\x93a\x06>V[\x83R`\x04\x83\x01a\x02\x99V[\x03\x91Z\xFA\x90\x81\x15a\x0C[W_\x91a\x0C-W[P\x80a\x0B9a\x0B3a\x0B.`@\x89\x01a\x04BV[a\x01\x18V[\x91a\x01\x18V[\x14_\x14a\x0B\xFCWP\x80\x91P\x90[\x81a\x0BYa\x0BS\x85a\x01rV[\x91a\x01rV[\x03a\x0BlWa\x0Bg\x90a\n V[a\n\xB8V[Pa\x0B\xA8a\x0B}` \x94\x95[a\t\xE7V[\x91a\x0B\xB3a\x0B\x94`\xA0cUmn\x9F\x93\x96\x98\x01a\x061V[a\x0B\x9Ca\0rV[\x97\x88\x96\x87\x95\x86\x95a\x06>V[\x85R`\x04\x85\x01a\nMV[\x03\x91Z\xFA\x90\x81\x15a\x0B\xF7W_\x91a\x0B\xC9W[P\x90V[a\x0B\xEA\x91P` =\x81\x11a\x0B\xF0W[a\x0B\xE2\x81\x83a\0\xA6V[\x81\x01\x90a\n/V[_a\x0B\xC5V[P=a\x0B\xD8V[a\x08\x1DV[a\x0C\x19a\x0C\x13a\x0C\x0E``\x88\x01a\x04BV[a\x01\x18V[\x91a\x01\x18V[\x14a\x0C$W[a\x0BFV[\x80\x92P\x91a\x0C\x1FV[a\x0CN\x91P` =\x81\x11a\x0CTW[a\x0CF\x81\x83a\0\xA6V[\x81\x01\x90a\n\x02V[_a\x0B\x1AV[P=a\x0C<V[a\x08\x1DV[Pa\x0B\xA8a\x0B}` \x94\x95a\x0BxV[`\xA0a\x0C\xC1\x91a\x0C~a\x04>V[Pa\x0C\xB9a\x0C\xAFa\x0C\x91` \x84\x01a\x04BV[a\x0C\x9D`@\x85\x01a\x04BV[a\x0C\xA9``\x86\x01a\x04BV[\x91a\x13\xBDV[\x93\x90\x93\x92\x01a\x061V[\x91\x90\x91a\x16\x99V[\x90V[a\x0C\xCD\x90a\x04RV[\x90V[a\x0C\xD9\x90a\x0C\xC4V[\x90V[a\x0C\xE6`\xA0a\0\xCFV[\x90V[_\x90V[_\x90V[_\x90V[a\x0C\xFDa\x0C\xDCV[\x90` \x80\x80\x80\x80\x86a\r\ra\x04\xFEV[\x81R\x01a\r\x18a\x04\xFEV[\x81R\x01a\r#a\x0C\xE9V[\x81R\x01a\r.a\x0C\xEDV[\x81R\x01a\r9a\x0C\xF1V[\x81RPPV[a\rGa\x0C\xF5V[\x90V[\x90a\rT\x90a\x01rV[\x90RV[a\rb\x90Qa\x01GV[\x90V[\x90a\ro\x90a\x01GV[\x90RV[a\r\x87a\r\x82a\r\x8C\x92a\x05\xD1V[a\x04OV[a\x01\rV[\x90V[\x90a\r\x99\x90a\x01\rV[\x90RV[a\r\xA6\x90a\x06\x19V[\x90V[a\r\xB2\x81a\x01\rV[\x03a\r\xB9WV[_\x80\xFD[\x90PQ\x90a\r\xCA\x82a\r\xA9V[V[c\xFF\xFF\xFF\xFF\x16\x90V[a\r\xDE\x81a\r\xCCV[\x03a\r\xE5WV[_\x80\xFD[\x90PQ\x90a\r\xF6\x82a\r\xD5V[V[`\x80\x81\x83\x03\x12a\x0E9Wa\x0E\x0E\x82_\x83\x01a\x06aV[\x92a\x0E6a\x0E\x1F\x84` \x85\x01a\r\xBDV[\x93a\x0E-\x81`@\x86\x01a\r\xE9V[\x93``\x01a\x06aV[\x90V[a\0|V[a\x0EG\x90a\x01rV[\x90RV[a\x0ET\x90a\x01GV[\x90RV[a\x0Ea\x90a\x01\rV[\x90RV[\x90`\x80\x80a\x0E\xBD\x93a\x0E}_\x82\x01Q_\x86\x01\x90a\x07.V[a\x0E\x8F` \x82\x01Q` \x86\x01\x90a\x07.V[a\x0E\xA1`@\x82\x01Q`@\x86\x01\x90a\x0E>V[a\x0E\xB3``\x82\x01Q``\x86\x01\x90a\x0EKV[\x01Q\x91\x01\x90a\x0EXV[V[\x91\x90a\x0E\xD2\x90_`\xA0\x85\x01\x94\x01\x90a\x0EeV[V[`\x80a\x0F\xA1\x91a\x0E\xE2a\x04>V[Pa\x0Fya\x0E\xFAa\x0E\xF5` \x84\x01a\x04BV[a\x0C\xD0V[a\x0F`a\x0FW\x85a\x0F\ta\r?V[\x95a\x0F!a\x0F\x19`@\x83\x01a\x04BV[_\x89\x01a\x05\xF0V[a\x0F9a\x0F0``\x83\x01a\x04BV[` \x89\x01a\x05\xF0V[a\x0FQa\x0FH`\xA0\x83\x01a\x061V[`@\x89\x01a\rJV[\x01a\rXV[``\x85\x01a\reV[a\x0Fta\x0Fl_a\rsV[\x85\x85\x01a\r\x8FV[a\r\x9DV[a\x0F\x96_c\xC6\xA5\x02ja\x0F\x8Aa\0rV[\x96\x87\x95\x86\x94\x85\x93a\x06>V[\x83R`\x04\x83\x01a\x0E\xBFV[\x03\x92Z\xF1\x90\x81\x15a\x0F\xE6W_\x91a\x0F\xB7W[P\x90V[a\x0F\xD8\x91P`\x80=\x81\x11a\x0F\xDFW[a\x0F\xD0\x81\x83a\0\xA6V[\x81\x01\x90a\r\xF8V[PPa\x0F\xB3V[P=a\x0F\xC6V[a\x08\x1DV[P\x90V[\x91\x90\x81\x10\x15a\x10\0Wa\x01\0\x02\x01\x90V[a\x05\x99V[a\x10\x10\x906\x90a\x01\xC0V[\x90V[a\x10\x1D\x90Qa\0\xE4V[\x90V[a\x104a\x10/a\x109\x92a\x05\xD1V[a\x04OV[a\0\xE4V[\x90V[a\x10Pa\x10Ka\x10U\x92a\x04\x9EV[a\x04OV[a\0\xE4V[\x90V[\x90V[a\x10oa\x10ja\x10t\x92a\x10XV[a\x04OV[a\0\xE4V[\x90V[\x90V[a\x10\x8Ea\x10\x89a\x10\x93\x92a\x10wV[a\x04OV[a\0\xE4V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\xB4Wa\x10\xB0` \x91a\0\x88V[\x01\x90V[a\0\x92V[\x90a\x10\xCBa\x10\xC6\x83a\x10\x96V[a\0\xCFV[\x91\x82RV[_\x7FsimulateCurveSwapIn\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11\x01`\x13a\x10\xB9V[\x90a\x11\x0E` \x83\x01a\x10\xD0V[V[a\x11\x18a\x10\xF7V[\x90V[_\x7FamountOut\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11L`\ta\x10\xB9V[\x90a\x11Y` \x83\x01a\x11\x1BV[V[a\x11ca\x11BV[\x90V[\x90a\x11oa\x04>V[Pa\x11xa\x04>V[\x91a\x11\x84\x81\x83\x90a\x0F\xEBV[\x93a\x11\x8Da\x04>V[\x93[\x84a\x11\xA2a\x11\x9C\x88a\x01rV[\x91a\x01rV[\x10\x15a\x12\xFFWa\x11\xBCa\x11\xB7\x84\x86\x88\x91a\x0F\xEFV[a\x10\x05V[\x90\x80a\x11\xD0a\x11\xCA_a\x05\xD4V[\x91a\x01rV[\x03a\x12\xEDW[a\x11\xE1_\x83\x01a\x10\x13V[a\x11\xF3a\x11\xED_a\x10 V[\x91a\0\xE4V[\x14_\x14a\x12%WPa\x12\x07a\x12\x1F\x91a\x0CpV[\x94[a\x12\x1A\x86a\x12\x15a\x11[V[a\x18\x08V[a\n V[\x93a\x11\x8FV[a\x120_\x83\x01a\x10\x13V[a\x12Ca\x12=`\x01a\x10<V[\x91a\0\xE4V[\x14_\x14a\x12^WPa\x12Wa\x12\x1F\x91a\x0E\xD4V[\x94[a\x12\tV[a\x12i_\x83\x01a\x10\x13V[a\x12|a\x12v`\x02a\x10[V[\x91a\0\xE4V[\x14_\x14a\x12\xA7WPa\x12\xA0a\x12\x1F\x91a\x12\x9Ba\x12\x96a\x11\x10V[a\x17\xA1V[a\n\x7FV[\x94[a\x12YV[\x94\x90a\x12\xB4_\x82\x01a\x10\x13V[a\x12\xC7a\x12\xC1`\x03a\x10zV[\x91a\0\xE4V[\x14a\x12\xD7W[Pa\x12\x1F\x90a\x12\xA2V[a\x12\x1F\x91\x95Pa\x12\xE6\x90a\x08QV[\x94\x90a\x12\xCDV[a\x12\xFA\x81`\xA0\x84\x01a\rJV[a\x11\xD6V[\x93P\x93PPP\x90V[a\x13\x11\x90a\x04RV[\x90V[a\x13\x1D\x90a\x13\x08V[\x90V[a\x13)\x90a\x06\x19V[\x90V[m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x13H\x81a\x13,V[\x03a\x13OWV[_\x80\xFD[\x90PQ\x90a\x13`\x82a\x13?V[V[\x90\x91``\x82\x84\x03\x12a\x13\x97Wa\x13\x94a\x13}\x84_\x85\x01a\x13SV[\x93a\x13\x8B\x81` \x86\x01a\x13SV[\x93`@\x01a\r\xE9V[\x90V[a\0|V[_\x01\x90V[a\x13\xB5a\x13\xB0a\x13\xBA\x92a\x13,V[a\x04OV[a\x01rV[\x90V[``a\x13\xFFa\x13\xFAa\x13\xF5a\x14\x15\x95\x96a\x13\xD5a\x04>V[Pa\x13\xDEa\x04>V[Pa\x13\xEA\x88\x82\x90a\x19\x84V[P\x95\x90\x88\x90\x91a\x1BhV[a\x13\x14V[a\x13 V[c\t\x02\xF1\xAC\x90a\x14\ra\0rV[\x94\x85\x92a\x06>V[\x82R\x81\x80a\x14%`\x04\x82\x01a\x13\x9CV[\x03\x91Z\xFA\x80\x15a\x14\xB3W_\x80\x93\x90\x91a\x14qW[Pa\x14Ya\x14Ra\x14La\x14_\x93a\x13\xA1V[\x94a\x13\xA1V[\x94\x92a\x01\x18V[\x91a\x01\x18V[\x14_\x14a\x14lW\x90[\x90\x91V[a\x14hV[a\x14L\x93Pa\x14_\x91Pa\x14Ra\x14\xA1a\x14Y\x92``=\x81\x11a\x14\xACW[a\x14\x99\x81\x83a\0\xA6V[\x81\x01\x90a\x13bV[P\x95P\x92PPa\x149V[P=a\x14\x8FV[a\x08\x1DV[` \x91\x81R\x01\x90V[` \x7FNPUT_AMOUNT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FUniswapV2Library: INSUFFICIENT_I_\x82\x01R\x01RV[a\x15\x1B`+`@\x92a\x14\xB8V[a\x15$\x81a\x14\xC1V[\x01\x90V[a\x15=\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x0EV[\x90V[\x15a\x15GWV[a\x15Oa\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15e`\x04\x82\x01a\x15(V[\x03\x90\xFD[` \x7FIQUIDITY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FUniswapV2Library: INSUFFICIENT_L_\x82\x01R\x01RV[a\x15\xC3`(`@\x92a\x14\xB8V[a\x15\xCC\x81a\x15iV[\x01\x90V[a\x15\xE5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xB6V[\x90V[\x15a\x15\xEFWV[a\x15\xF7a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\r`\x04\x82\x01a\x15\xD0V[\x03\x90\xFD[\x90V[a\x16(a\x16#a\x16-\x92a\x16\x11V[a\x04OV[a\x01rV[\x90V[\x90V[a\x16Ga\x16Ba\x16L\x92a\x160V[a\x04OV[a\x01rV[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x16\x83a\x16\x89\x91a\x01rV[\x91a\x01rV[\x90\x81\x15a\x16\x94W\x04\x90V[a\x16OV[a\x17'\x92a\x17\x1Ca\x17\na\x17\x03a\x17!\x94a\x16\xB2a\x04>V[Pa\x16\xCF\x81a\x16\xC9a\x16\xC3_a\x05\xD4V[\x91a\x01rV[\x11a\x15@V[\x86a\x16\xE2a\x16\xDC_a\x05\xD4V[\x91a\x01rV[\x11\x80a\x17*W[a\x16\xF2\x90a\x15\xE8V[a\x16\xFDa\x03\xE5a\x16\x14V[\x90a\x1D\0V[\x92\x83a\x1D\0V[\x93a\x17\x16a\x03\xE8a\x163V[\x90a\x1D\0V[a\x1E\x13V[\x90a\x16wV[\x90V[Pa\x16\xF2\x85a\x17Aa\x17;_a\x05\xD4V[\x91a\x01rV[\x11\x90Pa\x16\xE9V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x17wa\x17\x80` \x93a\x17\x85\x93a\x17n\x81a\x17IV[\x93\x84\x80\x93a\x14\xB8V[\x95\x86\x91\x01a\x17MV[a\0\x88V[\x01\x90V[a\x17\x9E\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x17XV[\x90V[a\x17\xCCa\x17\xDBa\x17\xE0\x92a\x17\xB3a\0rV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x17\x89V[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA6V[a\x1EHV[V[\x92\x91` a\x17\xFEa\x18\x06\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x17XV[\x94\x01\x90a\x02\x8CV[V[\x90a\x18Ca\x18H\x92a\x184a\x18\x1Ba\0rV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x17\xE2V[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA6V[a\x1EHV[V[_\x90V[` \x7FESSES\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FUniswapV2Library: IDENTICAL_ADDR_\x82\x01R\x01RV[a\x18\xA8`%`@\x92a\x14\xB8V[a\x18\xB1\x81a\x18NV[\x01\x90V[a\x18\xCA\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18\x9BV[\x90V[\x15a\x18\xD4WV[a\x18\xDCa\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\xF2`\x04\x82\x01a\x18\xB5V[\x03\x90\xFD[a\x18\xFF\x90a\rsV[\x90V[_\x7FUniswapV2Library: ZERO_ADDRESS\0\0\x91\x01RV[a\x196`\x1E` \x92a\x14\xB8V[a\x19?\x81a\x19\x02V[\x01\x90V[a\x19X\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19)V[\x90V[\x15a\x19bWV[a\x19ja\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\x80`\x04\x82\x01a\x19CV[\x03\x90\xFD[a\x19\x8Ca\x18JV[Pa\x19\x95a\x18JV[Pa\x19\xB3\x81a\x19\xACa\x19\xA6\x85a\x01\x18V[\x91a\x01\x18V[\x14\x15a\x18\xCDV[\x80a\x19\xC6a\x19\xC0\x84a\x01\x18V[\x91a\x01\x18V[\x10_\x14a\x19\xF8W\x90[\x90\x91a\x19\xF6\x83a\x19\xEFa\x19\xE9a\x19\xE4_a\x18\xF6V[a\x01\x18V[\x91a\x01\x18V[\x14\x15a\x19[V[V[a\x19\xCFV[\x90V[\x90V[_\x1B\x90V[a\x1A\x1Ca\x1A\x17a\x1A!\x92a\x19\xFDV[a\x1A\x03V[a\x1A\0V[\x90V[``\x1B\x90V[a\x1A3\x90a\x1A$V[\x90V[a\x1A?\x90a\x1A*V[\x90V[a\x1ANa\x1AS\x91a\x01\x18V[a\x1A6V[\x90RV[`\x14\x81a\x1Aia\x1Aq\x93\x83\x96\x95a\x1ABV[\x01\x80\x92a\x1ABV[\x01\x90V[` \x01\x90V[Q\x90V[\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x1A\xA5a\x1A\xA0a\x1A\xAA\x92a\x1A\x7FV[a\x1A\x8BV[a\x1A\x82V[\x90V[\x90V[a\x1A\xBCa\x1A\xC1\x91a\x1A\x82V[a\x1A\xADV[\x90RV[\x90V[a\x1A\xD4a\x1A\xD9\x91a\x1A\0V[a\x1A\xC5V[\x90RV[\x92a\x1B\x0B`\x14a\x1B\x13\x94a\x1B\x03`\x01\x88a\x1A\xFB` \x9B\x9A\x8C\x99a\x1A\xB0V[\x01\x80\x92a\x1ABV[\x01\x80\x92a\x1A\xC8V[\x01\x80\x92a\x1A\xC8V[\x01\x90V[_\x1C\x90V[a\x1B0a\x1B+a\x1B5\x92a\x01rV[a\x04OV[a\x01rV[\x90V[a\x1BDa\x1BI\x91a\x1B\x17V[a\x1B\x1CV[\x90V[a\x1B`a\x1B[a\x1Be\x92a\x01rV[a\x04OV[a\x01\rV[\x90V[a\x1C\x15a\x1C$a\x1C<\x92a\x1B\x8Ba\x1CF\x96a\x1CA\x96a\x1B\x85a\x18JV[Pa\x19\x84V[\x93\x90\x93a\x1B\xE1a\x1B\xBA\x7F\x96\xE8\xACBw\x19\x8F\xF8\xB6\xF7\x85G\x8A\xA9\xA3\x9F@<\xB7h\xDD\x02\xCB\xEE2l>}\xA3H\x84_a\x1A\x08V[\x95a\x1B\xD2a\x1B\xC6a\0rV[\x93\x84\x92` \x84\x01a\x1AWV[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA6V[a\x1B\xF3a\x1B\xED\x82a\x1A{V[\x91a\x1AuV[ \x93a\x1B\xFF`\xFFa\x1A\x91V[\x92\x94a\x1C\ta\0rV[\x95\x86\x94` \x86\x01a\x1A\xDDV[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA6V[a\x1C6a\x1C0\x82a\x1A{V[\x91a\x1AuV[ a\x1B8V[a\x1BLV[a\x06\x19V[\x90V[a\x1CXa\x1C^\x91\x93\x92\x93a\x01rV[\x92a\x01rV[\x91a\x1Cj\x83\x82\x02a\x01rV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x1CyWV[a\x16cV[_\x7Fds-math-mul-overflow\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x1C\xB2`\x14` \x92a\x14\xB8V[a\x1C\xBB\x81a\x1C~V[\x01\x90V[a\x1C\xD4\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1C\xA5V[\x90V[\x15a\x1C\xDEWV[a\x1C\xE6a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1C\xFC`\x04\x82\x01a\x1C\xBFV[\x03\x90\xFD[\x91\x90\x91a\x1D\x0Ba\x04>V[\x92\x80a\x1D\x1Fa\x1D\x19_a\x05\xD4V[\x91a\x01rV[\x14\x91\x82\x15a\x1D5W[PPa\x1D3\x90a\x1C\xD7V[V[\x90\x93Pa\x1D3\x91Pa\x1Dda\x1D^a\x1DXa\x1DQ\x84\x88\x90a\x1CIV[\x96\x87a\x16wV[\x92a\x01rV[\x91a\x01rV[\x14\x90_a\x1D(V[a\x1D{a\x1D\x81\x91\x93\x92\x93a\x01rV[\x92a\x01rV[\x82\x01\x80\x92\x11a\x1D\x8CWV[a\x16cV[_\x7Fds-math-add-overflow\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x1D\xC5`\x14` \x92a\x14\xB8V[a\x1D\xCE\x81a\x1D\x91V[\x01\x90V[a\x1D\xE7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1D\xB8V[\x90V[\x15a\x1D\xF1WV[a\x1D\xF9a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1E\x0F`\x04\x82\x01a\x1D\xD2V[\x03\x90\xFD[\x91\x90a\x1E+a\x1EF\x91a\x1E$a\x04>V[P\x84a\x1DlV[\x92a\x1E?a\x1E9\x85\x92a\x01rV[\x91a\x01rV[\x10\x15a\x1D\xEAV[V[a\x1E[\x90a\x1EV`\x01a\x1E\x87V[a\x1E\xA7V[V[jconsole.log\x90V[_\x80\x91a\x1Ewa\x1E]V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x1E\x8Fa\x1E\x83V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x1E\x93Wa\x1E\xB7\x90a\x1ElV[V\xFE\xA2dipfsX\"\x12 \xFC)\x94\x1B\xA1\x89\xDEH\x99\xE5\xAF2mg\x1D\xBD-\xC9|D\x89\x0F\x07\xA3\xCF\xAFM\xC8|\xC0B\xA0dsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct SwapParams { uint8 protocol; address handler; address tokenIn; address tokenOut; uint24 fee; uint256 amount; bool stable; address factory; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SwapParams {
        #[allow(missing_docs)]
        pub protocol: u8,
        #[allow(missing_docs)]
        pub handler: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenOut: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub fee: alloy::sol_types::private::primitives::aliases::U24,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub stable: bool,
        #[allow(missing_docs)]
        pub factory: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U24,
            alloy::sol_types::private::primitives::aliases::U256,
            bool,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapParams> for UnderlyingRustTuple<'_> {
            fn from(value: SwapParams) -> Self {
                (
                    value.protocol,
                    value.handler,
                    value.tokenIn,
                    value.tokenOut,
                    value.fee,
                    value.amount,
                    value.stable,
                    value.factory,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapParams {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    protocol: tuple.0,
                    handler: tuple.1,
                    tokenIn: tuple.2,
                    tokenOut: tuple.3,
                    fee: tuple.4,
                    amount: tuple.5,
                    stable: tuple.6,
                    factory: tuple.7,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SwapParams {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SwapParams {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.protocol),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.handler,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.fee),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.factory,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SwapParams {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SwapParams {
            const NAME: &'static str = "SwapParams";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SwapParams(uint8 protocol,address handler,address tokenIn,address tokenOut,uint24 fee,uint256 amount,bool stable,address factory)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.protocol)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.handler,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenIn,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenOut,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amount)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.stable,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.factory,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SwapParams {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.protocol,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.handler,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenIn,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenOut,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amount,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.stable,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.factory,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.protocol,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.handler,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenIn,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenOut,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amount,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.stable,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.factory,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `simulateAeroSwapIn((uint8,address,address,address,uint24,uint256,bool,address))` and selector `0x12c0c368`.
```solidity
function simulateAeroSwapIn(SwapParams memory params) external returns (uint256 amountOut);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateAeroSwapInCall {
        #[allow(missing_docs)]
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`simulateAeroSwapIn((uint8,address,address,address,uint24,uint256,bool,address))`](simulateAeroSwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateAeroSwapInReturn {
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateAeroSwapInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateAeroSwapInCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateAeroSwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateAeroSwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateAeroSwapInReturn) -> Self {
                    (value.amountOut,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateAeroSwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountOut: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateAeroSwapInCall {
            type Parameters<'a> = (SwapParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateAeroSwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateAeroSwapIn((uint8,address,address,address,uint24,uint256,bool,address))";
            const SELECTOR: [u8; 4] = [18u8, 192u8, 195u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `simulateCurveSwapIn((uint8,address,address,address,uint24,uint256,bool,address))` and selector `0x6a1ad1af`.
```solidity
function simulateCurveSwapIn(SwapParams memory params) external returns (uint256 amountOut);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateCurveSwapInCall {
        #[allow(missing_docs)]
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`simulateCurveSwapIn((uint8,address,address,address,uint24,uint256,bool,address))`](simulateCurveSwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateCurveSwapInReturn {
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateCurveSwapInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateCurveSwapInCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateCurveSwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateCurveSwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateCurveSwapInReturn) -> Self {
                    (value.amountOut,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateCurveSwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountOut: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateCurveSwapInCall {
            type Parameters<'a> = (SwapParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateCurveSwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateCurveSwapIn((uint8,address,address,address,uint24,uint256,bool,address))";
            const SELECTOR: [u8; 4] = [106u8, 26u8, 209u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `simulateSwapIn((uint8,address,address,address,uint24,uint256,bool,address)[])` and selector `0xb5c983ac`.
```solidity
function simulateSwapIn(SwapParams[] memory paramsArray) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateSwapInCall {
        #[allow(missing_docs)]
        pub paramsArray: alloy::sol_types::private::Vec<
            <SwapParams as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`simulateSwapIn((uint8,address,address,address,uint24,uint256,bool,address)[])`](simulateSwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateSwapInReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<SwapParams>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <SwapParams as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateSwapInCall> for UnderlyingRustTuple<'_> {
                fn from(value: simulateSwapInCall) -> Self {
                    (value.paramsArray,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for simulateSwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { paramsArray: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateSwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateSwapInReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateSwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateSwapInCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<SwapParams>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateSwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateSwapIn((uint8,address,address,address,uint24,uint256,bool,address)[])";
            const SELECTOR: [u8; 4] = [181u8, 201u8, 131u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        SwapParams,
                    > as alloy_sol_types::SolType>::tokenize(&self.paramsArray),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `simulateUniswapV2SwapIn((uint8,address,address,address,uint24,uint256,bool,address))` and selector `0x6dabe380`.
```solidity
function simulateUniswapV2SwapIn(SwapParams memory params) external view returns (uint256 amountOut);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateUniswapV2SwapInCall {
        #[allow(missing_docs)]
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`simulateUniswapV2SwapIn((uint8,address,address,address,uint24,uint256,bool,address))`](simulateUniswapV2SwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateUniswapV2SwapInReturn {
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateUniswapV2SwapInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateUniswapV2SwapInCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateUniswapV2SwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateUniswapV2SwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateUniswapV2SwapInReturn) -> Self {
                    (value.amountOut,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateUniswapV2SwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountOut: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateUniswapV2SwapInCall {
            type Parameters<'a> = (SwapParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateUniswapV2SwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateUniswapV2SwapIn((uint8,address,address,address,uint24,uint256,bool,address))";
            const SELECTOR: [u8; 4] = [109u8, 171u8, 227u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `simulateUniswapV3SwapIn((uint8,address,address,address,uint24,uint256,bool,address))` and selector `0x933d4379`.
```solidity
function simulateUniswapV3SwapIn(SwapParams memory params) external returns (uint256 amountOut);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateUniswapV3SwapInCall {
        #[allow(missing_docs)]
        pub params: <SwapParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`simulateUniswapV3SwapIn((uint8,address,address,address,uint24,uint256,bool,address))`](simulateUniswapV3SwapInCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simulateUniswapV3SwapInReturn {
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateUniswapV3SwapInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateUniswapV3SwapInCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateUniswapV3SwapInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simulateUniswapV3SwapInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: simulateUniswapV3SwapInReturn) -> Self {
                    (value.amountOut,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for simulateUniswapV3SwapInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountOut: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simulateUniswapV3SwapInCall {
            type Parameters<'a> = (SwapParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = simulateUniswapV3SwapInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simulateUniswapV3SwapIn((uint8,address,address,address,uint24,uint256,bool,address))";
            const SELECTOR: [u8; 4] = [147u8, 61u8, 67u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TxSimulator`](self) function calls.
    pub enum TxSimulatorCalls {
        #[allow(missing_docs)]
        simulateAeroSwapIn(simulateAeroSwapInCall),
        #[allow(missing_docs)]
        simulateCurveSwapIn(simulateCurveSwapInCall),
        #[allow(missing_docs)]
        simulateSwapIn(simulateSwapInCall),
        #[allow(missing_docs)]
        simulateUniswapV2SwapIn(simulateUniswapV2SwapInCall),
        #[allow(missing_docs)]
        simulateUniswapV3SwapIn(simulateUniswapV3SwapInCall),
    }
    #[automatically_derived]
    impl TxSimulatorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [18u8, 192u8, 195u8, 104u8],
            [106u8, 26u8, 209u8, 175u8],
            [109u8, 171u8, 227u8, 128u8],
            [147u8, 61u8, 67u8, 121u8],
            [181u8, 201u8, 131u8, 172u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TxSimulatorCalls {
        const NAME: &'static str = "TxSimulatorCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::simulateAeroSwapIn(_) => {
                    <simulateAeroSwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::simulateCurveSwapIn(_) => {
                    <simulateCurveSwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::simulateSwapIn(_) => {
                    <simulateSwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::simulateUniswapV2SwapIn(_) => {
                    <simulateUniswapV2SwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::simulateUniswapV3SwapIn(_) => {
                    <simulateUniswapV3SwapInCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TxSimulatorCalls>] = &[
                {
                    fn simulateAeroSwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateAeroSwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateAeroSwapIn)
                    }
                    simulateAeroSwapIn
                },
                {
                    fn simulateCurveSwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateCurveSwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateCurveSwapIn)
                    }
                    simulateCurveSwapIn
                },
                {
                    fn simulateUniswapV2SwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateUniswapV2SwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateUniswapV2SwapIn)
                    }
                    simulateUniswapV2SwapIn
                },
                {
                    fn simulateUniswapV3SwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateUniswapV3SwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateUniswapV3SwapIn)
                    }
                    simulateUniswapV3SwapIn
                },
                {
                    fn simulateSwapIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TxSimulatorCalls> {
                        <simulateSwapInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TxSimulatorCalls::simulateSwapIn)
                    }
                    simulateSwapIn
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::simulateAeroSwapIn(inner) => {
                    <simulateAeroSwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::simulateCurveSwapIn(inner) => {
                    <simulateCurveSwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::simulateSwapIn(inner) => {
                    <simulateSwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::simulateUniswapV2SwapIn(inner) => {
                    <simulateUniswapV2SwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::simulateUniswapV3SwapIn(inner) => {
                    <simulateUniswapV3SwapInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::simulateAeroSwapIn(inner) => {
                    <simulateAeroSwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simulateCurveSwapIn(inner) => {
                    <simulateCurveSwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simulateSwapIn(inner) => {
                    <simulateSwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simulateUniswapV2SwapIn(inner) => {
                    <simulateUniswapV2SwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simulateUniswapV3SwapIn(inner) => {
                    <simulateUniswapV3SwapInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TxSimulator`](self) contract instance.

See the [wrapper's documentation](`TxSimulatorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TxSimulatorInstance<T, P, N> {
        TxSimulatorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TxSimulatorInstance<T, P, N>>,
    > {
        TxSimulatorInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        TxSimulatorInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`TxSimulator`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TxSimulator`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TxSimulatorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TxSimulatorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TxSimulatorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TxSimulatorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TxSimulator`](self) contract instance.

See the [wrapper's documentation](`TxSimulatorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<TxSimulatorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TxSimulatorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TxSimulatorInstance<T, P, N> {
            TxSimulatorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TxSimulatorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`simulateAeroSwapIn`] function.
        pub fn simulateAeroSwapIn(
            &self,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateAeroSwapInCall, N> {
            self.call_builder(&simulateAeroSwapInCall { params })
        }
        ///Creates a new call builder for the [`simulateCurveSwapIn`] function.
        pub fn simulateCurveSwapIn(
            &self,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateCurveSwapInCall, N> {
            self.call_builder(&simulateCurveSwapInCall { params })
        }
        ///Creates a new call builder for the [`simulateSwapIn`] function.
        pub fn simulateSwapIn(
            &self,
            paramsArray: alloy::sol_types::private::Vec<
                <SwapParams as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateSwapInCall, N> {
            self.call_builder(&simulateSwapInCall { paramsArray })
        }
        ///Creates a new call builder for the [`simulateUniswapV2SwapIn`] function.
        pub fn simulateUniswapV2SwapIn(
            &self,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateUniswapV2SwapInCall, N> {
            self.call_builder(
                &simulateUniswapV2SwapInCall {
                    params,
                },
            )
        }
        ///Creates a new call builder for the [`simulateUniswapV3SwapIn`] function.
        pub fn simulateUniswapV3SwapIn(
            &self,
            params: <SwapParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, simulateUniswapV3SwapInCall, N> {
            self.call_builder(
                &simulateUniswapV3SwapInCall {
                    params,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TxSimulatorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
